*options.txt*	Для Vim version 6.3.  Последнее изменение: 2004 Jun 01


		      СПРАВОЧНИК ПО VIM - Брам Мооленаар


Опции							     *options* *опции*

1. Настройка опций	                |настройка_опций|
2. Автоматическая настройка опций       |автоматическая_установка|
3. Список опций				|опции-список|

Краткое пояснение для каждой опции смотрите в разделе |список_опций| в файле
help.txt.

В Vim имеется набор внутренних переменных и переключателей, которые позволяют
достигать самых разных результатов. Такие опции могут быть трёх видов:

			                                    *boolean* *toggle*
    булево	может быть включено или выключено              *переключатель*
    число	имеет числовое значение
    строка	имеет строковое значение

==============================================================================
1. Настройка опций	                        *set-option* *настройка_опций*

							          *:se* *:set*
:se[t]			Показывает значения всех опций, которые отличаются от
			настройки по умолчанию.

:se[t] all		Показывает значение всех опций, кроме терминальных.

:se[t] termcap		Показывает все терминальные опции. Обратите внимание,
			что в графическом интерфейсе коды клавиш не
			показываются, поскольку они генерируются на внутреннем
			уровне и не могут быть изменены. Изменение кодов
			терминала в графическом интерфейсе не приводит ни к
			каким полезным изменениям.

								 *E518* *E519*
:se[t] {опция}?		Показать значение {опции}.

:se[t] {опция}		Переключатель: включить опцию.
			Число: показать значение.
			Строка: показать значение.

:se[t] no{опция}	Переключатель: отключить опцию.

:se[t] {опция}!   или
:se[t] inv{опция}	Переключатель: Изменить значение на противоположное. 
			{Vi не имеет такой возможности}

				*:set-default* *:set-&* *:set-&vi* *:set-&vim*
:se[t] {опция}&		Изменить значение опции на значение по умолчанию.
			Результат может зависеть от текущего значения опции
			'compatible'.
			{Vi не имеет такой возможности}
:se[t] {опция}&vi	Изменить значение опции на значение по умолчанию в Vi.
			{Vi не имеет такой возможности}
:se[t] {опция}&vim	Изменить значение опции на значение по умолчанию в
			Vim.
			{Vi не имеет такой возможности}

:se[t] all&		Изменить значение всех опций, кроме терминальных, на
			их значения по умолчанию. Значения опций 'term',
			'lines' и 'columns' остаются без изменений.
			{Vi не имеет такой возможности}

						    *:set-args* *E487* *E521*
							     *:set-аргументы*
:se[t] {опция}={значение} или
:se[t] {опция}:{значение}
			Установить {значение} строковой или числовой опции.

			Для числовых опций значение может быть задано в
			десятичной, шестнадцатеричной (при помощи '0x') или
			восьмеричной (при помощи '0') форме (шестнадцатеричные
			и восьмеричные значения доступны только на машинах, на
			которых имеется функция strtol()).
			Текущее значение опции может быть вставлено при помощи
			кнопки, заданной значением опции 'wildchar' (по
			умолчанию это <Tab> или CTRL-E, если включена опция
			'compatible'). См. |дополнение_командной_строки|.
			Допускается использование пробела между {опцией} и
			символом '=', он игнорируется редактором. Пробел между
			'=' и {значением} не допускается.
			Об использовании символа обратной косой черты и
			пробелов в {значении} читайте в разделе
			|опции-обратная_косая|.

:se[t] {опция}+={значение}				              *:set+=*
			Сложение текущего значения числовой опции и указанного
			{значения}, либо добавление {значения} к строковой
			опции. Если значением опции является разделённый
			запятыми список, то запятая добавляется автоматически,
			если опция уже имеет какое-либо значение отличное от
			пустой строки.
			Если значением опции является список флагов, то
			лишние флаги удаляются. В остальных случаях проверка
			повторяющихся значений в списке не производится.
			Повторения значений в списке можно избежать путём
			удаления значения перед его добавлением. Пример: >

				:set guioptions-=T guioptions+=T
				
<			См. также |:set-аргументы| выше.
			{Vi не имеет такой возможности}

:se[t] {опция}^={значение}				              *:set^=*
			Умножение указанного {значения} на текущую величину
			числовой опции или добавление указанного {значения} к
			текущему значению строковой опции. Если значением
			опции является список значений, разделённых запятой,
			то перед добавлением указанного значения будет
			добавлена запятая, если текущее значение опции не
			является пустой строкой.
			См. также |:set-аргументы|.
			{Vi не имеет такой возможности}

:se[t] {опция}-={значение}					      *:set-=*
			Вычитание указанного {значения} из текущей величины
			числовой опции или удаление указанного значения из
			величины строковой опции, если такое значение включено
			в текущее значение опции. Если указанное {значение} в
			составе строковой опции не присутствует, то это не
			приводит к возникновению ошибки или выдаче
			предупреждения. Если опция представляет собой список
			значений, разделённых запятыми, то соответствующая
			запятая также будет удалена, если в этом есть
			необходимость.
			Если опция представляет собой список флагов, то
			указанное {значение} должно быть задано в точности
			так, как оно указано в текущем значении опции. Лучше
			всего удалять флаги по очереди, чтобы не столкнуться с
			проблемами.
			См. также |:set-аргументы|.
			{Vi не имеет такой возможности}

Команда ":set" позволяет задавать несколько {опций}. Например: >

	:set ai nosi sw=3 ts=3
	
При этом, если в одном из аргументов будет допущена ошибка при определении
значения опции, то будет выдано соответствующее сообщение и последующие
аргументы будут проигнорированы.

							        *:set-verbose*
Если значение опции 'verbose' не равно нулю, то отображение значения опции
также приводит к выводу информации о том, каким образом значение данной опции
было последний раз изменено. Например: >

    :verbose set shiftwidth cindent?
      shiftwidth=4
	Последний раз установлено из modeline
      cindent
        Последний раз установлено из /usr/local/share/vim/vim60/ftplugin/c.vim

Эта информация выводится только в том случае, когда выполняется просмотр
значения определённой опции, но не для команды ":set all" или ":set" без
аргумента. 
Если значение опции устанавливается вручную, то сообщение о последнем
изменении не выводится. Для всех локальных опций с одним и тем же именем
выводится только одно значение, поэтому сообщение относится прежде всего к
имени опции, а не к её значению.
Если значение опции было изменено во время выполнения функции,
пользовательской команды или автокоманды, то выводится путь к сценарию, в
котором было определено такое изменение. Обратите внимание, что значение опции
может также измениться при включении опции 'compatible' в качестве побочного
эффекта.
{доступно только в том случае, если Vim скомпилирован с особенностью |+eval|}

							 *:set-termcap* *E522*
В качестве {опции} может быть также использовано имя в формате "t_xx" для
установки опции терминала termcap. В этом случае указанное значение будет
переопределять значение, заданное в определении терминала в termcap. После
этого соответствующие символы можно использовать в привязках. Если "xx"
содержит специальный символ, то следует использовать формат <t_xx>: >

	:set <t_#4>=^[Ot
	
Это также может быть полезно для перевода специального кода в обычный символ.
Например, если Alt-b приводит к вводу <Esc>b, то следует использовать такую
настройку опции: >

	:set <M-b>=^[b
	
(здесь ^[ это настоящий символ <Esc>, для его ввода следует пользоваться
CTRL-V <Esc>). Преимущество такого метода над привязкой состоит в том, что он
работает во всех ситуациях. 

Вывод команды ":set" отличается от вывода аналогичной команды в Vi. Длинные
строковые опции помещаются в конце списка. Количество опций довольно большое,
поэтому вывод команды "set all" скорее всего не поместится на одном экране и
Vim выведет сообщение |продолжение_следует|.

				     *option-backslash* *опции-обратная_косая*
Чтобы включить в значение опции пробел, он должен предваряться символом
обратной косой черты. Для включения в значение опции символа обратной косой
черты следует использовать два символа обратной косой черты. Количество
символов обратной косой черты в значении опции, таким образом, сокращается
вдвое. 
Вот несколько примеров: >

   :set tags=tags\ /usr/tags	    задаёт значение "tags /usr/tags"
   :set tags=tags\\,file	    задаёт значение "tags\,file"
   :set tags=tags\\\ file	    задаёт значение "tags\ file"

Символ "|" отделяет команду ":set" от последующей команды. Чтобы включить
символ "|" в значение опции следует использовать "\|". В следующем ниже
примере мы устанавливаем значение опции 'titlestring' равным строке
"привет|буфет": >

   :set titlestring=привет\|буфет

А теперь установим значение опции 'titlestring' равным строке "привет", а
значение опции 'iconstring' равным строке "буфет": >

   :set titlestring=привет|set iconstring=буфет

В MS-DOS и WIN32 символы обратной косой черты в именах файлов как правило не
убираются, а именно: в тех опциях, значением которых является имя файла (и в
которых может происходить подстановка значения переменной окружения), символ
обратной косой черты перед обычным символом имени файла не будет удалён, а
символ обратной косой черты перед специальным символом (пробелом, обратной
косой чертой, запятой и т.п.) будет обрабатываться так, как это описано выше.
Особая ситуация возникает в тех случаях, когда значение начинается с символов
"\\": >

   :set dir=\\компьютер\путь	    задаёт значение "\\компьютер\путь"
   :set dir=\\\\компьютер\\путь	    задаёт значение "\\компьютер\путь"
   :set dir=\\путь\\файл	    задаёт значение "\\путь\файл" (ошибка!)
   
В первом случае двойной символ косой черты сохраняется, а во втором случае
двойной символ заменяется одинарным. Это позволяет обеспечить
работоспособность как в том случае, когда вы ожидаете, что двойные символы
обратной косой черты будут сокращены, так и в том случае, когда вы ожидаете,
что двойные символы сокращаться не будут. Третий пример приводит, вероятно, к
ошибочному результату.

				      *add-option-flags* *remove-option-flags*
	                  *добавление_флага_к_опции* *удаление_флага_из_опции*
				                   *E539* *E550* *E551* *E552*
Некоторые опции представляют собой список флагов. Если вы хотите добавить флаг
к такой опции, без изменения существующих флагов, то это можно сделать
следующим образом: >

   :set guioptions+=a
   
Удаление флага из опции происходит так: >
   
   :set guioptions-=a

В данном случае удаляется флаг 'a' из опции 'guioptions'.
Обратите внимание, что следует добавлять и удалять флаги по одному. Если
значение опции 'guioptions' -- "ab", то команда "set guioptions-=ba" не
сработает, поскольку в значении опции не встречается строка "ba".

			      *:set_env* *expand-env* *expand-environment-var*
			                    *подстановка_переменных_окружения*
В большинстве строковых опций выполняется подстановка значений переменных
окружения. Если переменная окружения существует, то символ '$' и следующее за
ним имя переменной заменяются на значение переменной. Если указанная
переменная окружения не существует, то символ '$' и следующее за ним имя
остаются без изменений. После имени переменной окружения может следовать любой
неименной символ (т.е. не буква, не цифра и не '_'). Этот символ и любые
последующие символы добавляются к значению переменной окружения. Примеры: >

   :set term=$TERM.new
   :set path=/usr/$INCLUDE,$HOME/include,.
   
При добавлении или удалении строки из значения опции с помощью ":set opt-=val"
или :set opt+=val" подстановка значения переменной выполняется до выполнения
операции добавления или удаления.


Работа с местными опциями		       *local-options* *местные_опции*

Некоторые опции применяются только к окну или к буферу. Каждое окно или буфер
имеет собственную копию такой опции, независимую от других окон или буферов.
Это позволяет, например, включить опцию 'list' для одного окна и отключить её
для другого, или установить значение опции 'shiftwidth' равным 3 в одном
буфере и 4 в другом буфере.

Ниже поясняется, что происходит с такими местными опциями в определённых
ситуациях. Обычно вам не требуется знать это, поскольку Vim как правило
использует как раз те значения опций, которые и ожидает пользователь. 
К сожалению, иногда выполнение ожидаемых пользователем действий является
достаточно сложным процессом...

При разделении окна значения местных опций копируются в новое окно. Сразу
после разделения окна содержимое обоих окон выглядит одинаково.

При редактировании нового буфера значения местных опций должны быть
инициализированы. Поскольку местные опции текущего буфера могут быть
определены специально для данного буфера, их значения не используются. Вместо
этого используется глобальное значение для каждой из местных по отношению к
буферу опций, которое применяется ко всем вновь созданным буферам. Команда
":set" изменяет как местное значение опции, так и глобальное значение, а
команда ":setlocal" изменяет только местное значение, которое не будет
использоваться при редактировании нового буфера.

При редактировании буфера, который редактировался до этого, используются опции
для последнего использованного этим буфером окна. Если буфер редактировался в
этом же окне, то используются те значения опций, которые были в силе в момент
редактирования буфера. Если буфер редактировался раннее в другом окне, то
используются значения опций того окна, где буфер редактировался в последний
раз.

Опция, значение которой является местным по отношению к окну, может быть
задана конкретно для определённого буфера. При редактировании другого буфера в
том же самом окне вам скорее всего не захочется вновь использовать те же самые
значения опций. Поэтому, Vim сохраняет глобальные значения всех опций, которые
могут быть определены локально по отношению к данному окну, которые и
используются при редактировании нового буфера. В каждом окне хранятся
собственные копии этих значений. Такие значения являются местными по отношению
к окну, но глобальными по отношению ко всем буферам в данном окне. Например,
если выполнить команды >

	:e one
	:set list
	:e two

то опция 'list' будет включена при редактировании "two", поскольку по команде
":set list" было изменено также и глобальное значение. >

	:set nolist
	:e one
	:setlocal list
	:e two

В этом случае опция 'list' не будет включена, поскольку ":set nolist"
выключает глобальное значение, а ":setlocal list" изменяет только локальное
значение и при выполнении ":e two" применяется глобальное значение. Обратите
внимание, что если затем выполнить команду >

	:e one

то опция 'list' не будет включена, как это было при последнем редактировании
файла "one" в данном окне. Опции, которые являются местными по отношению к
окну, не запоминаются для каждого буфера в отдельности.

							   *:setl* *:setlocal*
:setl[ocal] ...		Команда выполняется так же, как и ":set", но при этом
			изменяется значение, определённое как местное по
			отношению к текущему буферу или окну. Местные значения
			бывают не у всех опций. Если опция не имеет местного
			значения, то будет изменено глобальное значение.
			Аргумент "all" позволяет показать местные значения
			всех местных опций.
			Без аргумента эта команда показывает местные значения
			всех местных опций, которые отличаются от значений по
			умолчанию.
			При просмотре значения определённой местной опции
			будет показано её местное значение. При просмотре
			значения глобальной опции будет показано глобальное
			значение (но такое поведение в будущем может быть
			изменено).
			{Vi не имеет такой возможности}

:setl[ocal] {опция}<	Устанавливает местное значение {опции} равным её
			глобальному значению. 
			{Vi не имеет такой возможности}

							  *:setg* *:setglobal*
:setg[lobal] ...	Команда выполняется так же, как и ":set", но при этом
                        изменяется только глобальное значение для местной
			опции без изменения местного значения. 
			При просмотре значения опции с помощью этой команды
			показывается глобальное значение. Аргумент "all"
			позволяет показать глобальные значения всех местных
			опций. При вызове команды без аргумента будут показаны
			глобальные значения всех местных опций, которые
			отличаются от значений по умолчанию.
			{Vi не имеет такой возможности}

Для опций, местных по отношению к окну или буферу:

	Команда		    глобальное значение	    местное значение ~
      :set опция=значение         изменяется	       изменяется
 :setlocal опция=значение	      -		       изменяется
:setglobal опция=значение	  изменяется	           -
      :set опция?	              -	              отображается
 :setlocal опция?	              - 	      отображается
:setglobal опция?	         отображается		   -


Глобальные опции с местным значением       *global-local* *глобальные-местные*

Опция является глобальной в тех случаях, когда для всех буферов используется
одно и то же значение. Иногда полезно сделать так, чтобы какая-либо глобальная
опция имела местное значение, которое отличалось бы от глобального. Установить
такое местное значение можно при помощи команды ":setlocal", после выполнения
которой текущий буфер станет использовать местное значение опции, а все
остальные буферы будут по прежнему использовать глобальное значение.

Например, представьте, что у вас есть два окна, в каждом из которых открыты
файлы с исходным текстом программ на языке C. Оба окна используют глобальную
опцию 'makeprg'. Если в одном из окон выполнить команду >

	:set makeprg=gmake 

то другое окно также станет использовать изменённое значение опции. Таким
образом, изменять значение опции 'makeprg' в другом окне на "gmake" не
требуется.
Предположим, однако, что в новом окне мы открываем файл с программой на языке
Perl. В этом случае нам потребуется использовать другую программу 'makeprg',
но изменять значение этой опции в двух других окнах, где открыты файлы с
программами на языке C, нам бы не хотелось. В этом случае можно воспользоваться
такой командой: >

	:setlocal makeprg=perlmake

Переключиться на использование глобального значения опции можно путём очистки
местного значения: >

	:setlocal makeprg=

Это будет работать для строковой опции. Для булевой опции необходимо
использовать флаг "<", например: >

	:setlocal autoread<

Обратите внимание, что остальные опции, кроме булевых, используют "<" для
копирования глобального значения в местное значение, но не переключают окно на
использование глобального значения опции (это имеет значение при последующем
изменении глобального значения).
Замечание: В будущем количество глобальных опций, которые могут быть
глобальными-местными, расширится. Использование команды ":setlocal" для
глобальной опции в этом случае может работать иначе.


Настройка типа файла

:setf[iletype] {тип_файла}			        *:setf* *:setfiletype*
			Устанавливает значение опции 'filetype' равным
			{типу_файла}, если это ещё не было выполнено при
			помощи последовательности (вложенных) автокоманд. Эта
			запись является сокращённой формой сценария >

				:if !did_filetype()
				:  setlocal filetype={filetype}
				:endif

<			Эта команда используется в файле filetype.vim, чтобы
			избежать повторного назначения опции 'filetype', что
			приводит к загрузке новых файлов подсветки синтаксиса
			и изменению других настроек.
			{Vi не имеет такой возможности}

:bro[wse] se[t]			*:set-browse* *:browse-set* *:opt* *:options*
:opt[ions]		Открывает окно для просмотра и настройки всех опций.
			Опции группируются по предназначению.
			В окне также указывается краткая справка для каждой
			опции. Если курсор находится на строке со справкой, то
			нажатие <CR>  открывает окно справки с более подробной
			информацией об этой опции.
			Для изменения значения опции нужно ввести новое
			значение и нажать <CR> (курсор должен находиться на
			строке "set"). При настройке опций, имеющих отношение
			к буферу или окну, будет изменяться значение опции для
			окна, в котором до этого находился курсор, либо, если
			курсор находился в окне справки, то для окна, которое
			находится под окном справки (окно опций пропускается). 
			{доступно только в том случае, если Vim скомпилирован
			с особенностями |+eval| и |+autocmd|}
			

								       *$HOME*
Символ "~" в начале значения опции и после пробела или запятой равноценен
использованию переменной окружения "$HOME".

В Unix-системах также можно использовать форму "~user", которая приводится к
значению домашнего каталога пользователя "user". Например: >

    :set path=~mool/include,/usr/include,.

Кроме того, на Unix-системах можно также использовать форму "${HOME}". Имя в
фигурных скобках в этом случае может содержать неименные символы. Обратите
внимание, что если вы желаете использовать это для команды "gf", то необходимо
добавить символы '{' и '}' в значение опции 'isfname'.

ЗАМЕЧАНИЕ: подстановка переменных окружения и "~/" выполняется только в
команде ":set", но не при изменении значения опции по команде ":let".

Обратите внимание, что максимальная длина опции после подстановки переменной
ограничена. Величина ограничения зависит от операционной системы, как правило
это 256 или 1024 символов.

							      *:fix* *:fixdel*
:fix[del]		Настройка значения терминальной опции 't_kD':

			     значение 't_kb'    значение 't_kD' ~
				  CTRL-?	  CTRL-H
				не CTRL-?	  CTRL-?

			(код символа CTRL-? в восьмеричной системе 0177, в
			шестнадцатеричной системе 0x7f) 
			{Vi не имеет такой возможности}

			Если код терминала для удаления символа в позиции
			курсора работает неправильно, хотя кнопка удаления
			символа слева от курсора работает нормально, то вы
			можете добавить в файл .vimrc команду >

				:fixdel
				
<			Эта команда позволяет исправить проблему независимо от
			действительного кода кнопки для удаления символа слева
			от курсора. 

			Если код терминала для кнопки удаления символа слева
			от курсора неправильный, то можно воспользоваться
			следующим сценарием: >

				:if &term == "termname"
				:  set t_kb=^V<BS>
				:  fixdel
				:endif

<			Здесь "^V" это CTRL-V, а "<BS>" это кнопка удаления
			символа слева от курсора (а не четыре символа!). 
			В этом сценарии следует заменить "termname" на имя
			вашего терминала.

			Если кнопка <Delete> приводит к вводу странной
			последовательности символов (не CTRL-? или CTRL-H), 
			то команда ":fixdel" работать не будет. В этом случае
			необходимо пользоваться таким сценарием: >
			
				:if &term == "termname"
				:  set t_kD=^V<Delete>
				:endif

<			Здесь "^V" это CTRL-V, а "<Delete>" это кнопка
			удаления символа в позиции курсора (а не восемь
			символов!). В этом сценарии следует заменить
			"termname" на имя вашего терминала.

							     *Linux-backspace*
			Замечание о Linux: по умолчанию кнопка удаления
			символа слева от курсора приводит к вводу символа
			CTRL-?, что является неправильным. Это можно исправить
			при помощи следующей строки в файле rc.local: >

			    echo "keycode 14 = BackSpace" | loadkeys
<
							    *NetBSD-backspace*
			Замечание о NetBSD: Если кнопка удаления символа слева
			от курсора не приводит к выдаче нужного кода, то можно
			попробовать выполнить команду >

				xmodmap -e "keycode 22 = BackSpace"

<			В случае успеха следует добавить в файл .Xmodmap
			следующую строку: >

				keysym 22 = BackSpace
<			
			После этого следует перезапустить X Window.

==============================================================================
2. Автоматическая настройка опций    *auto-setting* *автоматическая_установка*

Помимо изменения значений опций при помощи команды ":set" имеется три
альтернативных метода автоматического изменения значений опций для одного или
нескольких файлов:

1. При запуске Vim инициализация опций выполняется из нескольких сценариев.
   См. раздел |инициализация|. Большинство операций по инициализации
   выполняется для всех последующих сеансов редактирования, а значение
   некоторых опций зависит от рабочего каталога, из которого был запущен Vim.
   Инициализационные файлы можно создать при помощи команд |:mkvimrc|,
   |:mkview| и |:mksession|.
2. В начале редактирования нового файла также выполняются автоматические
   команды. Этим можно воспользоваться для установки опций для файлов,
   соответствующих шаблонам регулярных выражений, а также многих иных вещей.
   Подробнее об этом смотрите раздел |автокоманда|.
3. Если в начале редактирования нового файла включена опция 'modeline', то ряд
   строк в начале и конце файла проверяется на наличие режимной строки.
   Подробности объясняются ниже.

		         *режимной_строки* *режимную_строку* *режимная_строка*
					  *modeline* *vim:* *vi:* *ex:* *E520*
Существует две формы режимной строки. Первая форма выглядит так:

	[текст]{пробел}{vi:|vim:|ex:}[пробел]{опции}

[текст]		любой текст или его отсутствие
{пробел}	по крайней мере один пробельный символ (<Space> или <Tab>)
{vi:|vim:|ex:}	строка "vi:", "vim:" или "ex:"
[пробел]	необязательный пробел
{опции}		список опций и их значений, разделённых пробелами или
		символом ':', где каждая часть между символами ':' является
		аргументом команды ":set".

Пример: >

   vi:noai:sw=3 ts=6

Вторая форма режимной строки совместима с некоторыми версиями Vi:

	[текст]{пробел}{vi:|vim:|ex:}[пробел]se[t] {опции}:[текст]

[текст]		любой текст или его отсутствие
{пробел}	по крайней мере один пробельный символ (<Space> или <Tab>)
{vi:|vim:|ex:}	строка "vi:", "vim:" или "ex:"
[пробел]	необязательный пробел
se[t]		строка "set " или "se " (обратите внимание на пробел)
{опции}		список опций и их значений, разделённых пробелами, где
		каждая часть является аргументом команды ":set".
:		двоеточие
[text]		любой текст или его отсутствие

Пример: >

   /* vim: set ai tw=75: */

Пробел перед {vi:|vim:|ex:} является обязательным. Это уменьшает шанс, что
обычное слово, например "lex:", будет ошибочно принято за начало режимной
строки. Имеется одно исключение: "vi:" и "vim:" может также быть в самом
начале строки (для совместимости с версией 3.0). Использование "ex:" в начале
строки будет игнорироваться (поскольку это может быть сокращением английского
слова "example:").

		   	      *modeline-local* *режимная_строка-местные_опции*
Опции из режимной строки устанавливаются так, как если бы их значения
изменялись при помощи команды ":setlocal": новые значения применяются только к
буферу, который содержит данное окно. Хотя режимная строка и позволяет
изменять значения глобальных опций, такое использование весьма необычно. Если
у вас открыто два окна и файлы, которые в них загружены, изменяют значения
глобальных опций отлично друг от друга, то результат в конечном итоге зависит
от того, какой файл был открыт в последнюю очередь.

			           *modeline-version* *режимная_строка-версия*
Если режимная строка может быть использована не во всех версиях Vim, то вместо
"vim:" можно указать версию редактора, в котором данная режимная строка
применима:

	vim{версия}:	версия с номером {версия} или более поздняя
	vim<{версия}:	версия более ранняя, чем {версия}
	vim={версия}:	версия {версия}
	vim>{версия}:	версия после указанной {версии}
	
{версия} для Vim 6.0 записывается числом 600 (основная версия умноженная на
100 плюс подверсия).
Например, следующая режимная строка используется только в Vim 6.0 и более
поздних версиях: >

	/* vim600: set foldmethod=marker: */

Чтобы использовать режимную строку только в версиях Vim перед 5.7: >

	/* vim<570: set sw=4: */

Между "vim" и ":" не должно быть пробелов.


Число строк, которые проверяются на наличие режимной строки задаётся опцией
'modelines'. Если опция 'modelines' выключена или значение опции 'modelines'
равно 0, то файл не проверяется на наличие режимной строки.

Обратите также внимание, что в первой форме режимной строки используются все
символы вплоть до конца строки, поэтому строка наподобие >

   /* vi:ts=4: */

приведёт к сообщению об ошибке, поскольку на хвосте строки имеются лишние
символы "*/". Правильной строкой в таком случае будет >

   /* vi:set ts=4: */

При обнаружении ошибки во время разбора режимной строки оставшаяся часть
строки игнорируется.

Если вы желаете включить в аргумент команды set символ ':', то его надо
предварять символом '\'. Обратная косая черта перед символом ':' будет
подавляться. Например: >

   /* vi:set dir=c\:\tmp: */

Эта команда задаёт значение опции 'dir' равным "c:\tmp". Удаляется только
один символ перед символом ':', поэтому чтобы включить последовательность
символов "\:" необходимо писать "\\:".

В режимной строке поддерживается использование только команды "set", что
продиктовано соображениями безопасности: в противном случае вам могли бы
подкинуть текстовый файл-троян, который бы использовал возможности режимной
строки.

Совет: если вы хотите делать что-то ещё помимо изменения значений опций, то
можно определить автокоманду, которая проверяет файл на наличие определённой
строки. Например: >

	au BufReadPost * if getline(1) =~ "VAR" | call SetVar() | endif
	
После этого нужно определить функцию SetVar(), которая бы изменяла тем или
иным образом строку, содержащую "VAR".

==============================================================================
3. Список опций		                       *option-summary* *опции-список*

В списке, который приводится ниже, все опции упоминаются как с полным, так и с
сокращённым именем, если такое имеется. Вы можете использовать любую форму по
своему усмотрению.

В этом документе подразумевается, что если булева опция включена, то это
значит, что была введена команда ":set option". Если говорится, что опция
выключена, то это значит была введена команда ":set nooption".

Некоторые опции имеют два значения по умолчанию: "по умолчанию Vim", которое
используется, если опция 'compatible' выключена, и "по умолчанию Vi", которое
используется при включённой опции 'compatible'.

Большая часть опций имеет одинаковое значение во всех окнах и буферах, за
исключением ряда опций, которые относятся к отображению текста в окне. Такие
опции могут иметь отдельное значение для каждого окна. Например, опция 'list'
может быть включена в одном окне и выключена в другом для одного и того же
текста, предоставляя возможность одновременно получить оба представления.
Некоторые опции могут иметь значения, которые настраиваются отдельно для
каждого файла. Например, опция 'textwidth' может иметь значение 78 для
обычного текстового файла и 0 для файла с исходным текстом программы на 
языке C.

	глобальная		одна опция для всех окон и буферов
	местная для окна	каждое окно использует собственную копию опции
	местная для буфера	каждый буфер использует собственную копию
				опции

При создании нового окна значения опций из текущего окна используются в
качестве значений по умолчанию для опций, которые определяются для каждого
окна в отдельности. Что касается опций, которые определяются для каждого
отдельного буфера, то поведение редактора зависит от флагов 's' и 'S' в
значении опции 'cpoptions'. Если в значении этой опции указан флаг 's' (по
умолчанию), то значения буферных опций копируются из текущего буфера перед
первоначальной загрузкой буфера. Если указан флаг 'S', то эти значения
копируются при каждом переходе к данному буферу, т.е. практически поведение
ничем не отличается от использования глобальных опций. Если же флаги 's' и 'S'
не указаны в значении опции 'cpoptions', то опции копируются из текущего
буфера при создании нового буфера.

Не все опции поддерживаются во всех версиях. Для проверки возможности
использования некой опции "foo" в команде ":set" можно использовать функцию
"exists('&foo')". Это, однако, не означает, что значение действительно можно
присваивать той или иной опции. Некоторые опции являются скрытыми, поэтому
присваиваемые им значения не запоминаются. Для проверки действительной
поддержки той или иной опции в данной версии редактора используйте функцию
"exists('+foo')".

							                *E355*
Список всех опций с короткими описания и ссылками для перехода к более
подробной информации можно посмотреть в разделе |Q_op|.

					      *'aleph'* *'al'* *aleph* *Aleph*
'aleph' 'al'		число	(по умолчанию: 128 на MS-DOS, 224 в других
				системах)
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+rightleft|}
	
	Задаёт код ASCII для первой буквы алфавита иврит. Функция,
	обеспечивающая соответствующую раскладку клавиатуры в режиме иврит как
	в режиме Вставки (при включённой опции 'hkmap'), так и в командной
	строке (при вводе CTRL-_), возвращает символы иврит в диапазоне
	[aleph..aleph+26]. Значение aleph=128 является принятым на PC, в то
	время как aleph=224 соответствует стандарту ISO 8859-8. См. также
	|rileft.txt|.

			   *'allowrevins'* *'ari'* *'noallowrevins'* *'noari'*
'allowrevins' 'ari'	переключатель (по умолчанию: выключено)
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+rightleft|}

	Позволяет использовать CTRL-_ в режиме Вставки и в командной строке.
	По умолчанию опция выключена, чтобы избежать ситуации, когда
	пользователь случайно переходит в обратный режим Вставки по нажатию
	CTRL-_ вместо SHIFT-_ и не знает как из него выйти. См. также
	'revins'.
	ЗАМЕЧАНИЕ: эта опция выключается при включении опции 'compatible'.

			       *'altkeymap'* *'akm'* *'noaltkeymap'* *'noakm'*
'altkeymap' 'akm'	переключатель (по умолчанию: выключено)
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+farsi|}

	Если опция включена, то вторым языком является фарси. В режиме
	редактирования CTRL-_ переключает раскладку клавиатуры между
	английским и фарси, если включена опция 'allowrevins'.

	В выключенном состоянии клавиатура переключается между английским и
	ивритом. Эта опция полезна, когда Vim запускается в стандартном
	режиме, т.е. английском (с вводом текста слева направо) и вторым
	языком задаётся фарси или иврит (в режиме справа налево). См. также
	|farsi.txt|.

						        *'ambiwidth'* *'ambw'*
'ambiwidth' 'ambw'	строка (по умолчанию: "single")
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+multi_byte|}

	Опция работает только в том случае, если значением опции 'encoding'
	является "utf-8" или другая кодировка Unicode. Она сообщает редактору
	Vim как поступать с символами из класса неясной ширины символа East
	Asian Width Ambiguous (такими как символ валюты евро, символ
	зарегистрированной марки, символ охраны авторского права, буквы
	греческого и кириллического алфавитов).

	На данный момент используется два возможных значения этой опции:
	
	"single":	Используется та же ширина символов, что и для символов
			US-ASCII. Именно это ожидается большинством
			пользователей.
	"double":	Используется двойная ширина символа ASCII.

	Существует ряд шрифтов для языков с иероглифической письменностью, в
	которых длина таких символов зависит исключительно от количества
	октетов, которые используются для задания кода символа в традиционных
	кодировках CJK. В таких кодировках символы кириллического и греческого
	алфавитов, евро, зарегистрированной марки представлены двумя октетами,
	поэтому в таких шрифтах имеются "широкие" глифы для этих символов. То
	же самое можно сказать и о некоторых символах, которые используются
	для рисования линий в таблицах в текстовых файлах. Поэтому, если при
	работе Vim в графическом режиме или в терминале используются шрифты
	CJK (или если Vim запущен в xterm с ключом "-cjkwidth"), эта опция
	должна иметь значение "double", чтобы ширина глифов в шрифте совпадала
	с тем значением, которое ожидается редактором. Значение опции также
	вероятно должно быть установлено равным "double" при работе в CJK
	Windows 9x/ME или Windows 2k/XP, если системная локаль является одной
	из локалей CJK. Подробнее см. документ Unicode Standard Annex #11
	(http://www.unicode.org/reports/tr11).

			     *'antialias'* *'anti'* *'noantialias'* *'noanti'*
'antialias' 'anti'	переключатель (по умолчанию: выключено)
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только при использовании графического
			интерфейса в Mac OS X}
	
	Эта опция работает только в версии Vim с графическим интерфейсом для
	Mac OS X v.10.2 или более поздней. При включённом состоянии этой опции
	Vim будет применять "сглаживание" шрифтов, что повышает
	удобочитаемость на некоторых мониторах при использовании определённых
	размеров шрифтов. Включение этой опции может приводить к проблемам,
	если опция 'guifont' имеет значение по умолчанию (пустая строка).
	
			       *'autochdir'* *'acd'* *'noautochdir'* *'noacd'*
'autochdir' 'acd'	переключатель (по умолчанию: выключено)
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+netbeans_intg| или |+sun_workshop|}

	Если эта опция находится во включённом состоянии, то Vim будет
	изменять значение текущего рабочего каталога при открытии файла,
	переключении буферов, удалении буфера или открытии и закрытии окна.
	Рабочим каталогом становится при этом каталог, в котором хранится
	открытый файл. Эта опция существует для обеспечения обратной
	совместимости с редактором Vim, выпущенным в составе Sun ONE Studio 4
	Enterprise Edition.

				   *'arabic'* *'arab'* *'noarabic'* *'noarab'*
'arabic' 'arab'		переключатель (по умолчанию: выключено)
			местная по отношению к окну опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+arabic|}

	Эта опция во включённом состоянии позволяет редактировать текст на
	арабском языке. При включении этой опции происходит следующее:
	- включается опция 'rightleft', если опция 'termbidi' выключена.
	- включается опция 'arabicshape', если опция 'termbidi' выключена.
	- значение опции 'keymap' устанавливается равным "arabic"; в режиме
	  Вставки кнопка CTRL-^ переключает между набором английского и
	  арабского текста.
	- включается опция 'delcombine'.

	Обратите внимание, что для работы с арабским текстом значение опции
	'encoding' должно быть равным "utf-8".

	При отключении этой опции происходит следующее:
	- Отключается опция 'rightleft'.
	- Использование опции 'keymap' отключается (без изменения её
	  значения).

	Обратите внимание, что опции 'arabicshape' и 'delcombine' не
	отключаются (они являются глобальными).

	См. также |arabic.txt|.

					           *'arabicshape'* *'arshape'*
					       *'noarabicshape'* *'noarshape'*
'arabicshape' 'arshape'	переключатель (по умолчанию: включено)
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+arabic|}

	Если эта опция включена, а опция 'termbidi' выключена, то будут
	происходить необходимые визуальные изменения символов, необходимые для
	отображения арабского текста. При этом происходит изменение формы
	символов, а именно:
	  а) символы меняют свою форму в зависимости от позиции символа в
	     слове (начальная, средняя, финальная и самостоятельная позиции);
	  б) включается возможность составления символов;
	  в) выполняется обязательное комбинирование некоторых символов.
	
	Если эта опция отключена, то символы будут отображаться в своей
	самостоятельной форме. 

	Арабский язык использует сложную письменность и для работы с ним
	требуются также некоторые другие настройки. Подробнее об этом написано
	в разделе |arabic.txt|.

			       *'autoindent'* *'ai'* *'noautoindent'* *'noai'*
'autoindent' 'ai'	переключатель (по умолчанию: выключено)
			местная по отношению к буферу опция

	Если опция включена, то при открытии новой строки (после ввода <CR> в
	режиме Вставки или по команде "o" или "O") будет копироваться отступ
	текущей строки. При этом, если в строке не будет вводиться никаких
	символов кроме <BS> или CTRL-D с последующим вводом <Esc> или <CR>,
	вставленный раннее отступ будет удалён. При включённых автоматических
	отступах форматирование текста (по команде "gq" или при достижении
	границы, заданной значением опции 'textwidth' в режиме Вставки) будет
	использовать отступ, заданный в первой строке.
	При включённых опциях 'smartindent' и 'cindent' обработка отступов
	происходит иначе.
	Опция 'autoindent' отключается при включённой опции 'paste'.
	{Небольшое отличие от Vi: после удаления введённого отступа при
	нажатии <Esc> или <CR> позиция курсора при перемещении вверх или вниз
	находится после удалённого отступа; Vi помещает курсор внутри
	удалённого отступа}.

				   *'autoread'* *'ar'* *'noautoread'* *'noar'*
'autoread' 'ar'		переключатель (по умолчанию: выключено)
			глобальная или местная по отношению к буферу опция 
			|глобальные-местные|
			{Vi не имеет такой возможности}

	При обнаружении изменений в файле, внесенных вне редактора Vim, если
	при этом файл не был изменён в редакторе Vim, то он будет
	автоматически прочитан заново, если эта опция находится во включённом
	состоянии. Файл читается только в том случае, если он не был удалён.
	См. также |отметка_времени_изменения|.
	Если эта опция имеет местное значение, то для перехода к использованию
	глобального значения используйте следующую команду: >

		:set autoread<
<
				 *'autowrite'* *'aw'* *'noautowrite'* *'noaw'*
'autowrite' 'aw'	переключатель (по умолчанию: выключено)
			глобальная опция

	Запись содержимого файла при обнаружении несохранённых изменений при
	выполнении команд :next, :rewind, :last, :first, :previous, :stop,
	:suspend, :tag, :!, :make, CTRL-] и CTRL-^, а также в тех случаях,
	когда команды CTRL-O, CTRL-I, '{A-Z0-9} или `{A-Z0-9} выполняют
	переход к редактированию другого файла.
	Замечание: некоторые команды не используют опцию 'autowrite'; см.
	также опцию 'autowriteall'.

			 *'autowriteall'* *'awa'* *'noautowriteall'* *'noawa'*
'autowriteall' 'awa'	переключатель (по умолчанию: выключено)
			глобальная опция
			{Vi не имеет такой возможности}

	Работает так же, как и 'autowrite', но также используется при
	выполнении команд ":edit", ":enew", ":quit", ":qall", ":exit",
	":xit", ":recover" и закрытии окна Vim. Включение этой опции также
	приводит к тем же последствиям, что и включение опции 'autowrite'.

							*'background'* *'bg'*
'background' 'bg'	строка (по умолчанию "dark" или "light")
			глобальная опция
			{Vi не имеет такой возможности}

	Если значением опции является "dark", то Vim будет пытаться
	использовать такие цвета, которые выглядят хорошо на тёмном фоне. При
	использовании значения "light" Vim, наоборот, будет использовать
	цвета, которые хорошо выглядят на светлом фоне. Другие значения этой
	опции запрещены. Значение по умолчанию Vim старается установить в
	соответствии с используемым терминалом, но это не всегда удаётся.
	Изменение этой опции не изменяет цвет фона, она только сообщает
	редактору Vim какой используется цвет фона. Для изменения цвета фона
	используйте команды, описанные в разделе |:hi-normal|.

	При установленном значении опции 'background' Vim выполняет подстройку
	цветовых групп, используемых по умолчанию, в соответствии с новым
	значением. Однако, цвета используемые для подсветки синтаксиса, при
	этом не изменяются.
	Если цветовая схема загружена (переменной "colors_name" присвоено
	какое-либо значение), то изменение значения опции 'background'
	приводит к перезагрузке цветовой схемы.Если цветовая схема учитывает
	значение опции 'background', то оно будет принято во внимание. Однако,
	если цветовая схема сама изменяет значение опции 'background', то
	изменение значения этой опции может быть утрачено. При необходимости
	следует удалять переменную "colors_name".

	Для установки значения опции 'background' равным значению по умолчанию
	используйте команду >

		:set background&

<	Vim попытается самостоятельно определить необходимое значение. При
	использовании графического интерфейса такое определение как правило
	работает корректно. В ряде других случае Vim может установить
	ошибочное значение этой опции.

	При запуске Vim в режиме графического интерфейса, значение опции
	'background' по умолчанию будет "light". Если соответствующее значение
	не прописано в сценарии .gvimrc и Vim определяет, что фактически фон
	является довольно тёмным, то значение опции 'background' изменяется на
	"dark". Однако, это происходит только ПОСЛЕ обработки сценария запуска
	.gvimrc (поскольку для выяснения цвета фона окна требуется сначала
	открыть окно). Чтобы избежать нежелательных последствий такого
	поведения, заставьте окно графического интерфейса открываться до
	использования значения опции 'background', поместив команду ":gui" в
	файле сценария запуска редактора до первой соответствующей команды
	(такой, как, например, ":syntax on").
	Как правило, значение этой опции задаётся в файле сценария запуска
	редактора .vimrc, возможно в зависимости от используемого терминала.
	Например: >
	
		:if &term == "pcterm"
		:  set background=dark
		:endif

<	Если этой опции присвоено какое-либо значение, то будут изменены
	значения по умолчанию для групп подсветки синтаксиса. Для
	использования иных настроек необходимо помещать команды ":highlight"
	ПОСЛЕ изменения значения опции 'background'.
	Эта опция также используется в файле "$VIMRUNTIME/syntax/syntax.vim"
	для выбора цветов, используемых при подсветке синтаксиса. После
	изменения значения этой опции необходимо заново загрузить файл
	syntax.vim, чтобы изменения вступили в силу. Это может быть достигнуто
	выполнением команды ":syntax on".

							  *'backspace'* *'bs'*
'backspace' 'bs'	строка (по умолчанию: "")
			глобальная опция
			{Vi не имеет такой возможности}

	Эта опция влияет на работу кнопок <BS>, <Del>, CTRL-W и CTRL-U в
	режиме Вставки. Её значением является список значений, разделённых
	запятыми. Каждое значение позволяет использовать стирание символов в
	определённых позициях: 

	значение    эффект	~
	indent	    позволяет выполнять стирание символов в автоматических
		    отступах
	eol	    позволяет стирать символы перевода строк (склеивать строки)
	start	    позволяет выполнять стирание символов до начала вставки;
		    команды CTRL-W и CTRL-U прекращают удаление символов при
		    достижении начала вставки.

	Если значением опции является пустая строка, то используется удаление
	символов, совместимое с Vi.

	Для обратной совместимости с версией 5.4 и более ранними используются
	также следующие значения:

	значение    эффект	~
	  0	    то же, что и ":set backspace=" (Vi-совместимый режим)
	  1	    то же, что и ":set backspace=indent,eol"
	  2	    то же, что и ":set backspace=indent,eol,start"

	Если вы испытывает проблемы с кнопками <BS> или <Del>, то прочитайте
	раздел |:fixdel|.
	ЗАМЕЧАНИЕ: значение этой опции устанавливается равным "" при включении
	опции 'compatible'.

				       *'backup'* *'bk'* *'nobackup'* *'nobk'*
'backup' 'bk'		переключатель (по умолчанию: выключено)
			глобальная опция
			{Vi не имеет такой возможности}

	Выполняет резервное копирование перед изменением файла. Резервная
	копия остаётся на диске после успешной записи файла. Если вы не хотите
	сохранять резервную копию, но желаете выполнять резервное копирование
	файла перед началом записи, то вам нужно выключить эту опцию и
	включить опцию 'writebackup' (так происходит по умолчанию). Если вам
	совсем не нужно резервное копирование, то необходимо отключить обе
	опции (что может быть полезно, если файловая система почти полностью
	заполнена). Подробнее читайте в разделе
	|резервное_копирование-таблица|.
	При обнаружении соответствия шаблону, заданному в значении опции
	'backupskip', резервное копирование выполняться не будет. При
	установленном значении опции 'patchmode' имя резервной копии может
	быть изменено так, чтобы оно отражало самую раннюю версию файла.
	ЗАМЕЧАНИЕ: эта опция отключается при включении опции 'compatible'.

						        *'backupcopy'* *'bkc'*
'backupcopy' 'bkc'	строка	(по умолчанию в Vi в Unix: "yes", в остальных
			случаях: "auto")
			глобальная опция
			{Vi не имеет такой возможности}

	Опция указывает на способ резервного копирования, если оно выполняется
	при записи файла. Значением этой опции является список слов,
	разделённых запятыми.

	Имеются следующие основные значения:

	"yes"	создаётся копия файла, после чего оригинал перезаписывается
	"no"	файл переименовывается, после чего записывается новый файл
	"auto"  лучший из вышеуказанных методов

        Дополнительные значения, которые могут сочетаться с указанными выше:
	
	"breaksymlink"	всегда разбивать символические связи при записи
	"breakhardlink"	всегда разбивать жёсткие связи при записи

	Создание копии и перезапись оригинального файла:
	
	- Требует дополнительное время для создания копии файла.
	+ Если файл имеет какие-либо специальные атрибуты, является жёсткой
          или символической ссылкой или имеет ресурсную вилку, то такие
	  свойства файла сохраняются.
	- Если файл является ссылкой, то резервная копия будет иметь имя
	  ссылки, а не настоящего файла.

	Изменение имени файла и запись нового файла:
	
	+ Работает быстро.
	- Не все атрибуты файла могут быть скопированы в новый файл.
	- Если файл является ссылкой, то новый файл не будет ссылкой.

	Значение "auto" представляет собой золотую середину: если
	переименование файла возможно без побочных эффектов (т.е. свойства
	файла сохраняются и файл не является ссылкой), то будет использован
	этот метод. В противном случае выполняется копирование.

	Значения "breaksymlink" и "breakhardlink" могут быть использованы в
	сочетании с "yes", "no" и "auto". При включении этих значений Vim
	будет всегда разрывать символические или жёсткие связи, выполняя то же
	самое, что и при использовании значения "no", переименовывая исходный
	файл так, что он становится резервной копией и записывая новый файл на
	его место. Это может быть полезным для использования в деревьях
	исходного кода, где все файлы являются либо символическими, либо
	жёсткими ссылками, и все изменения должны оставаться в местном дереве
	исходного кода, не оказывая влияния на основной источник исходного
	кода.
	
							             *crontab*
	Существует ситуация, когда установка значения этой опции равным "no"
	или "auto" может привести к проблеме: если программа, которая
	открывает файл, запускает Vim для его редактирования, после чего
	выполняет проверку изменения открытого файла (используя дескриптор
	файла). В этом случае вместо вновь созданного файла проверка будет
	происходить с использованием резервной копии. Примером такой программы
	может быть "crontab -e".

	При копировании файла оригинал усекается до нулевой длины и затем
	заполняется новым текстом. Это приводит к тому, что защитные биты,
	сведения о владельце файла и символические ссылки оригинального файла
	остаются без изменений. В то же время, резервная копия файла является
	новым фалом, владельцем которого является пользователь, который
	редактировал оригинал файла. Группа файла резервной копии остаётся той
	же, что и группа оригинального файла, если это возможно, либо биты
	прав доступа к файлу для группы заменяются правами доступа для всех
	пользователей.

	При переименовании файла происходит нечто иное: резервная копия файла
	сохраняет все свойства оригинального файла, а владельцем нового файла
	будет текущий пользователь. Если файл являлся жёсткой или
	символической ссылкой, то новый файл ссылкой уже не будет!  Именно по
	этой причине при использовании значения "auto" не происходит
	переименования файла, если этот файл является ссылкой. Владелец и
	группа нового файла будут соответствовать значениям для оригинального
	файла, если система позволит это сделать; в противном случае, при
	использовании значения "auto" переименования не произойдёт.

						        *'backupdir'* *'bdir'*
'backupdir' 'bdir'	строка (по умолчанию на Amiga: ".,t:",
				на MS-DOS и Win32: ".,c:/tmp,c:/temp"
				на Unix: ".,~/tmp,~/")
			глобальная опция
			{Vi не имеет такой возможности}

	Список каталогов для хранения резервных копий, разделённых запятыми.
	- Резервная копия создаётся в первом каталоге из перечисленных в
	  списке, где это возможно.
	- Пустое значение опции означает, что резервные копии создаваться не
	  будут (опция 'patchmode' работать не будет!). При этом может быть
	  невозможна запись файла.
	- Каталог "." указывает на размещение резервной копии файла в том же
	  каталоге, что и сам файл.
	- Каталог, начинающийся с "./" (или ".\" на MS-DOS и т.п.) указывает
	  на размещение резервной копии файла относительно редактируемого
	  файла. При этом символ "." заменяется путём к редактируемому файлу.
	  ("." внутри имени каталога не имеет особого значения).
	- Пробелы после запятой игнорируются, остальные пробелы считаются
	  частью имени каталога. Чтобы включить пробел в начале имени
	  каталога, его надо предварять символом обратной косой черты.
	- Для включения запятой в имени каталога её надо предварять символом
	  обратной косой черты.
	- Имя каталога может заканчиваться символом '/'.
	- Возможна подстановка значений переменных окружения
	  |подстановка_переменных_окружения|.
	- Будьте осторожны с символом '\': перед пробелами следует указывать
	  один символ обратной косой черты, для включения символа косой черты
	  в значение опции следует набирать два символа косой черты (см.
	  |опции-обратная_косая|). Например: >
	  :set bdir=c:\\tmp,\ каталог\\,с\\,запятыми,\\\ каталог\ с\ пробелами
<	- Для обратной совместимости с Vim версии 3.0 символ '>' в начале
	  опции удаляется.
	
	См. также справку по опциям 'backup' и 'writebackup'.

	Если вы хотите прятать резервные копии файлов на Unix, то можно
	использовать следующее значение: >
	
		:set backupdir=./.backup,~/.backup,.,/tmp

<	Вам потребуется создать каталог ".backup" в каждом каталоге, а также в
	домашнем каталоге, чтобы этот метод работал. 
	При добавлении и удалении каталогов из списка рекомендуется
	использовать команды |:set+=| и |:set-=|. Это позволяет избежать
	проблем, если в будущих версиях будет использовано другое значение по
	умолчанию.
	Эта опция не может быть изменена из |режимной_строки| или в
	|песочнице| по соображениям безопасности.

						  *'backupext'* *'bex'* *E589*
'backupext' 'bex'	строка (по умолчанию: "~", на VMS: "_")
			глобальная опция
			{Vi не имеет такой возможности}

	Опция содержит строку, которая добавляется к имени файла у резервных
	копий. По умолчанию используется довольно необычное значение, чтобы
	избежать случайного стирания существующих файлов при записи резервной
	копии. Вы можете предпочесть использование расширения ".bak", однако
	убедитесь, что у вас нет файлов с таким расширением, которые вам
	хотелось бы сохранить.

						        *'backupskip'* *'bsk'*
'backupskip' 'bsk'	строка (по умолчанию: 
			        "/tmp/*,$TMPDIR/*,$TMP/*,$TEMP/*")
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+wildignore|}

	Список шаблонов имён файлов. Если один из шаблонов соответствует имени
	файла, то резервная копия не создаётся. Используется как имя файла,
	так и полный путь к файлу. Шаблоны, которые используются в качестве
	значения этой опции, такие же, как и применяемые в автокомандах
	|:autocmd|, подробнее см. |автокоманды-шаблоны|.
	Будьте осторожны с использованием специальных символов, 
	см. |опции-обратная_косая|.
	Если переменные $TMPDIR, $TMP или $TEMP не заданы, то они не будут
	использоваться в значении по умолчанию. "/tmp/*" используется только в
	Unix.

						    *'balloondelay'* *'bdlay'*
'balloondelay' 'bdlay'	число (по умолчанию: 600)
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+balloon_eval|}

	Задержка в миллисекундах перед появлением пузыря. 
	См. |вычисления_в_пузыре|.

		       *'ballooneval'* *'beval'* *'noballooneval'* *'nobeval'*
'ballooneval' 'beval'	переключатель (по умолчанию: выключено)
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностями |+balloon_eval| и |+sun_workshop| или
			|+netbeans_intg|}

	Включает или отключает возможность вычислений в пузыре, 
	см. |вычисления_в_пузыре|.

				     *'binary'* *'bin'* *'nobinary'* *'nobin'*
'binary' 'bin'		переключатель (по умолчанию: выключено)
			местная по отношению к буферу опция
			{Vi не имеет такой возможности}

	Эта опция должна быть включена перед редактированием бинарного файла.
	Вы также можете использовать аргумент |-b| при запуске Vim. При
	включении этой опции изменяется значение ряда других опций:
		'textwidth'  устанавливается равным 0
		'wrapmargin' устанавливается равным 0
		'modeline'   отключается
		'expandtab'  отключается
	Кроме того, опции 'fileformat' и 'fileformats' не будут
	использоваться, а файл читается и записывается так, как если бы
	значением опции 'fileformat' было "unix" (т.е. для разделения строк
	используется символ <NL>).
	Опции 'fileencoding' и 'fileencodings' также не используются, файл
	читается без преобразований.
	ЗАМЕЧАНИЕ: при редактировании другого файла с включённой опцией 'bin'
	настройки автокоманд могут изменить установки (например, значение
	опции 'textwidth'), что может привести к нежелательным последствиям
	при редактировании. Вы можете включить опцию 'bin' заново после
	загрузки файла.
	Предыдущие значения указанных опций запоминаются и восстанавливаются
	при отключении опции 'bin'. В каждом буфере сохраняется собственный
	набор соответствующих опций.
	Для редактирования файла со включённой опцией 'binary' можно
	использовать аргумент командной строки |++bin|. Это позволяет избежать
	применения команды ":set bin", которая оказывала бы влияние на все
	редактируемые файлы.
	При записи файла символ конца последней строки <EOL> записывается
	только в том случае, если он имеется в оригинальном файле (обычно Vim
	добавляет символ <EOL> к последней строке, если он не был введён
	пользователем; это делает файл длиннее). См. также справку по опции
	'endofline'.

			       *'bioskey'* *'biosk'* *'nobioskey'* *'nobiosk'*
'bioskey' 'biosk'	переключатель (по умолчанию: включено)
			глобальная опция
			{Vi не имеет такой возможности}
			{только в MS-DOS}

	Если эта опция включена, то для получения кода символа происходит
	обращение к BIOS. Это позволяет лучше определять нажатие CTRL-C, но
	работает только в консоли. При использовании терминала, подключённого
	к параллельному порту, следует отключить данную опцию.
	См. также |'conskey'|.

							   *'bomb'* *'nobomb'*
'bomb'			переключатель (по умолчанию: выключено)
			местная по отношению к буферу опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+multi_byte|}

	Если указанные ниже условия удовлетворяются, то при записи в начало
	файла будет вставлена отметка порядка байтов BOM (Byte Order Mark):
	- данная опция включена
	- опция 'binary' выключена
	- значением опции 'fileencoding' является "utf-8", "ucs-2", "ucs-4"
	  или один из вариантов с прямым/обратным порядком байтов.
	Некоторые приложения используют BOM для выяснения кодировки файла. Эта
	отметка часто используется для файлов в кодировке UCS-2 в MS-Windows.
	В других приложениях, наоборот, использование такой отметки приводит к
	проблемам, например: команда "cat file1 file2" приводит к тому, что
	отметка BOM вставляется в середине полученного таким образом файла.
	При чтении файла в редакторе Vim, если значение опции 'fileencodings'
	начинается с "ucs-bom", то файл проверяется на наличие BOM и значение
	опции 'bomb' устанавливается соответствующим образом. При этом она
	убирается из первой строки с тем, чтобы её не было видно при
	редактировании файла, если, конечно, опция 'binary' выключена. Если вы
	не отключаете эту опцию перед записью файла, то BOM будет
	восстановлена при записи.

						           *'breakat'* *'brk'*
'breakat' 'brk'		строка (по умолчанию: " ^I!@*-+;:,./?")
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+linebreak|}

	Эта опция позволяет вам указать символы, которые могут приводить к
	переносу строки при включённой опции 'linebreak'.

						       *'browsedir'* *'bsdir'*
'browsedir' 'bsdir'	строка (по умолчанию: "last")
			глобальная опция
			{Vi не имеет такой возможности}
			{только для Motif и версии с графическим интерфейсом
			Win32}

	Указывает на каталог, который используется для проводника по файловой
	системе:
	   last		Использовать каталог, который был использован раннее.
	   buffer	Использовать каталог соответствующего буфера.
	   current	Использовать текущий каталог.
	   {путь}	Использовать каталог с указанным {путём}.

						          *'bufhidden'* *'bh'*
'bufhidden' 'bh'	строка (по умолчанию: "")
			местная по отношению к буферу опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+quickfix|}

	Эта опция указывает, что происходит, когда буфер перестаёт
	отображаться в окне:
	  <пусто>	используется значение глобальной опции 'hidden'
	  hide		буфер скрывается (но не выгружается); также в случае,
			когда опция 'hidden' выключена
	  unload	буфер выгружается из памяти; также в случае,
			когда опция 'hidden' включена или используется команда
			|:hide|
	  delete	буфер удаляется из списка буферов; также при
			включённой опции 'hidden' или использовании |:hide|,
			подобно команде |:bdelete|.
	  wipe		буфер стирается из списка буферов; также при
			включённой опции 'hidden' или использовании команды
			|:hide|, подобно команде |:bwipeout|.

	Эта опция используется совместно с опциями 'buftype' и 'swapfile' для
	указания на специальные типы буферов. См. |специальные_буферы|.

		           *'buflisted'* *'bl'* *'nobuflisted'* *'nobl'* *E85*
'buflisted' 'bl'	переключатель (по умолчанию: включено)
			местная по отношению к буферу опция
			{Vi не имеет такой возможности}

	Если эта опция включена, то буфер будет появляться в списке буферов.
	Если опция выключена, то данный буфер не будет использоваться при
	выполнении команд ":bnext", "ls", в меню буферов и т.д. Эта опция
	отключается Vim для буферов, которые используются только для
	запоминания имени файла или отметок. При редактировании файла Vim
	включает эту опцию, кроме ситуации, когда переход к буферу выполняется
	по команде ":buffer".

						     *'buftype'* *'bt'* *E382*
'buftype' 'bt'		строка (по умолчанию: "")
			местная по отношению к буферу опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+quickfix|}

	Значение опции определяет тип буфера:
	  <пусто>	обычный буфер
	  nofile	буфер, который не связан с файлом и не может быть
			записан
	  nowrite	буфер, который не будет записан
	  quickfix	буфер быстрого исправления, содержит список ошибок.
			Подробнее смотрите в справке по команде |:cwindow|.
	  help		буфер справки (этот тип буфера не должен
			настраиваться вручную)

	Эта опция используется совместно с опциями 'bufhidden' и 'swapfile'
	для указания на специальные типы буферов. См. |специальные_буферы|.

	Изменяйте значение этой опции осторожно, т.к. это может привести к
	нежелательным последствиям.

	Буфер "quickfix" используется только для списка ошибок. Это значение
	устанавливается по команде |:cwindow| и вы не должны изменять его
	вручную.

	Буферы "nofile" и "nowrite" похожи:
	оба типа:	Буфер не может быть записан на диск, команда ":w" не
			работает (но работает команда ":w имя_файла").
	оба типа:	Буфер никогда не считается изменённым (см. справку по
			опции |'modified'|).
			Это приводит, в частности, к тому, что при выходе из
			Vim не выдаётся предупреждение о несохранённых
			изменениях.
	оба типа:	Своп-файл создаётся только при использовании большого
			количества памяти (если опция 'swapfile' выключена, то
			своп-файл никогда не создаётся).
	только nofile:	Имя буфера является неизменяемым и не будет
			рассматриваться как имя файла. Оно не изменяется в
			ответ на выполнение команды |:cd|.

						           *'casemap'* *'cmp'*
'casemap' 'cmp'		строка (по умолчанию: "internal,keepascii")
			глобальная опция
			{Vi не имеет такой возможности}

	Указывает на детали процесса изменения регистра символов. Опция может
	содержать следующие слова, разделённые запятыми:
	internal	Используются встроенные функции изменения регистра,
			значение локали не изменяет таблицы соответствий
			символов. Это значение актуально только в том случае,
			если 'encoding' является кодировкой Unicode. Если
			слово "internal" опущено, то по возможности
			используются системные библиотечные функции towupper()
			и towlower().
	keepascii	Для символов ASCII (от 0x00 до 0x7f) используется
			таблица соответствия регистра символов US, текущая
			локаль не принимается во внимание. Значение, по всей
			видимости, актуально только при использовании турецкой
			локали.

					       *'cdpath'* *'cd'* *E344* *E346*
'cdpath' 'cd'		строка (по умолчанию: эквивалент $CDPATH или ",,")
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+file_in_path|}

	Значением опции является список каталогов, в которых происходит поиск
	при выполнении команд |:cd| и |:lcd|, если указанный путь поиска
	является относительным (т.е. не начинается с символов "/", "./" or
	"../").
	Значение опции 'cdpath' имеет ту же форму и смысл, что и значение
	опции |'path'|. См. также раздел |файл-поиск|.
	Значением по умолчанию является значение переменной $CDPATH, которое
	предваряется ",", чтобы поиск выполнялся прежде всего в текущем
	каталоге.
	Если значение по умолчанию, взятое из значения переменной окружения
	$CDPATH, вас не устраивает, то вы можете добавить в файл vimrc
	команду, аналогичную следующей: >
	
	  :let &cdpath = ',' . substitute(substitute($CDPATH, '[, ]', '\\\0', 'g'), ':', ',', 'g')
	  
<	Значение этой опции не может быть изменено из |режимной_строки| или в
        |песочнице| по соображениям безопасности (значение опции 'cdpath'
	может содержать компоненты, которые передаются оболочке для
	подстановки имён файлов).

						                     *'cedit'*
'cedit'			строка (по умолчанию в Vi: "", 
			        по умолчанию в Vim: CTRL-F)
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+vertsplit|}

	Опция указывает на кнопку, которая используется в режиме командной
	строки для открытия окна команд. По умолчанию значением этой опции
	является CTRL-F, если опция 'compatible' выключена.
	В качестве значения этой опции могут выступать только непечатные
	символы.
	Кнопка может быть указана как соответствующий символ, однако,
	поскольку набирать такого рода символ затруднительно, то лучше
	использовать формат соглашения <>. Например: >

		:set cedit=<C-Y>
		:set cedit=<Esc>
		
<	|Nvi| также имеет данную опцию, но использует только первый символ.
	См. также |командная_строка-окно|.

				  *'charconvert'* *'ccv'* *E202* *E214* *E513*
'charconvert' 'ccv'	строка (по умолчанию: "")
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностями |+multi_byte| и |+eval|}

	Опция используется для задания выражения, которое используется при
	выполнении преобразования кодировок символов. Указанное выражение
	вычисляется при чтении или записи файла, который имеет кодировку,
	отличающуюся от желаемой.
	Опция 'charconvert' не используется, если Vim поддерживает встроенную
	функцию iconv() и может выполнять необходимые преобразования
	самостоятельно. Использование iconv() является предпочтительным и
	значительно более быстрым методом.
	Опция 'charconvert' не используется при чтении потока стандартного
	ввода |--|, поскольку в этом случае файл как таковой отсутствует.
	Чтобы выполнить перекодировку в этом случае вам потребуется сначала
	сохранить файл. Выражение, указанной в данной опции, должно возвращать
	ноль или пустую строку в случае успешного выполнения, либо ненулевое
	значение в случае неудачи.
	Возможные названия кодировок хранятся в значении опции 'encoding'.
	Кроме того, могут быть использованы кодировки, указанные в опциях
	'fileencodings' и 'fileencoding'.
	Преобразования между "latin1", "unicode", "ucs-2", "ucs-4" и "utf-8"
	выполняются при помощи внутреннего алгоритма, встроенного в редактор.
	Значение опции 'charconvert' при этом не используется. Если в значении
	опции 'viminfo' указан флаг 'c', то значение опции 'charconvert' будет
	использоваться при выполнении преобразования файла viminfo и
	преобразованиях Unicode.
	Пример: >
	
		set charconvert=CharConvert()
		fun CharConvert()
		  system("recode "
			\ . v:charconvert_from . ".." . v:charconvert_to
			\ . " <" . v:fname_in . " >" v:fname_out)
		  return v:shell_error
		endfun
		
<	Соответствующие переменные Vim имеют следующее предназначение:

		v:charconvert_from	название текущей кодировки
		v:charconvert_to	название желательной кодировки
		v:fname_in		имя входного файла
		v:fname_out		имя выходного файла

	Обратите внимание, что v:fname_in и v:fname_out не должны быть одним и
	тем же файлом. Заметим также, что значения v:charconvert_from и
	v:charconvert_to могут отличаться от значения опции 'encoding'.
	Внутренней кодировкой Vim является UTF-8, а не UCS-2 или UCS-4. При
	использовании опции 'charconvert' Vim не выполняет шифрование текста.
	Если после выполнения преобразования вы хотите зашифровать текст, то
	'charconvert' будет использоваться при необходимости.
	По соображения безопасности эта опция не может быть изменена из
	|режимной_строки| или в |песочнице|.

				   *'cindent'* *'cin'* *'nocindent'* *'nocin'*
'cindent' 'cin'		переключатель (по умолчанию: выключено)
			местная по отношению к буферу опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+cindent|}

	Позволяет выполнять автоматическое форматирование отступов в
	программах на языке C. Для настройки кнопок, которые вызывают
	изменение форматирования отступов в режиме Вставки, пользуйтесь опцией
	'cinkeys', а опция 'cinoptions' позволяет выбирать предпочтительный
	стиль форматирования отступов.
	Если опция 'indentexpr' имеет значение, отличное от пустой строки, то
	оно используется вместо значения опции 'cindent'.
	Если опция 'lisp' выключена, а опции 'indentexpr' и 'equalprg' пустые,
	то оператор "=" выполняет форматирование отступов с использованием
	данного алгоритма вместо вызова внешней программы.
	См. также |С-отступы|.
	Если вам не нравится как работает алгоритм, который используется в
	опции 'cindent', то вы можете попробовать использовать вместо него
	'smartindent' или опцию 'indentexpr'.
	Эта опция не используется при включённой опции 'paste'.
	ЗАМЕЧАНИЕ: эта опция отключается при включении опции 'compatible'.

							  *'cinkeys'* *'cink'*
'cinkeys' 'cink'	строка (по умолчанию: "0{,0},0),:,0#,!^F,o,O,e")
			местная по отношению к буферу опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+cindent|}

	Опция содержит список символов, набор которых в режиме Вставки
	вызывает изменение форматирования отступов в текущей строке.
	Используется только при включённой опции 'cindent' и пустой опции
	'indentexpr'.
	Формат значения этой опции описывается в разделе |cinkeys-формат|.
	См. также |С-отступы|.

						       *'cinoptions'* *'cino'*
'cinoptions' 'cino'	строка (по умолчанию: "")
			местная по отношению к буферу опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+cindent|}

	Опция 'cinoptions' влияет на метод форматирования отступов в исходных
	текстах программ на языке C при использовании опции 'cindent'.
	Значения этой опции разбираются в разделе |cinoptions-значения|, а
	общие сведения о форматировании отступов в программах на языке C
	приводятся в разделе |С-отступы|.


						         *'cinwords'* *'cinw'*
'cinwords' 'cinw'	строка (по умолчанию: "if,else,while,do,for,switch")
			местная по отношению к буферу опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностями |+cindent| и |+smartindent|}

	Опция содержит ключевые слова, ввод которых приводит к добавлению
	отступа в следующей строке, если включена опция 'smartindent' или
	'cindent'. При включённой опции 'cindent' это происходит только в том
	случае, если ключевое слово встречается внутри блока (в фигурных
	скобках {}).
	Обратите внимание, что 'ignorecase' не используется для опции
	'cinwords'. Если регистр символов в ключевом слове не имеет значения,
	то вам нужно добавить это слово в список значений опции во всех
	возможных вариантах: "if,If,IF".

						          *'clipboard'* *'cb'*
'clipboard' 'cb'	строка (по умолчанию: "autoselect,exclude:cons\|linux"
				   для X-windows, "" в остальных случаях)
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в версиях с графическим интерфейсом
			или в случае, если Vim скомпилирован с особенностью 
			|+xterm_clipboard|}

	Значением опции является список имён, разделённых запятыми.
	Поддерживаются следующие имена:

	unnamed		Если указано данное имя, то Vim будет использовать
			регистр буфера обмена '*' для всех операция
			копирования, удаления, изменения и помещения текста в
			безымянный регистр. Если регистр задан явным образом,
			то будет использован указанный регистр независимо от
			наличия имени "unnamed" в списке значений опции
			'clipboard'. Регистр буфера обмена может быть также
			доступен во всех случаях при помощи "*. См. также
			раздел |графический_интерфейс-буфер_обмена|.

	autoselect	Использование этого имени аналогично указанию флага
			'a' в значении 'guioptions': в том случае, когда оно
			указано, при переходе в Визуальный режим или
			расширении Визуальной области Vim пытается стать
			владельцем глобального выделения системы оконного
			интерфейса или помещает выделенный текст в буфер
			обмена при помощи регистра выделения "*. Подробнее об
			этом смотрите в разделах |guioptions_a| и
			|кавычка_звёздочка|. В случае, если используется
			графический интерфейс, применяется флаг 'a' в опции
			'guioptions', а если графический интерфейс не
			используется, то применяется значение "autoselect"
			данной опции.
			Вышесказанное также относится и к безрежимному
			выделению.

	autoselectml	То же, что и "autoselect", но только для безрежимного
			выделения. Ср. с флагом 'A' в опции 'guioptions'.

	exclude:{шаблон}
			Определяет шаблон, который используется для проверки
			соответствия имени терминала 'term'. Если имя
			терминала соответствует шаблону, то соединение с
			сервером X устанавливаться не будет. Это полезно в
			следующих случаях:
			
			- Vim запущен с консоли.
			- Переменная $DISPLAY установлена таким образом, что
			  приложения запускаются на другом экране.
			- Вы не хотите соединяться с сервером X в консоли, но
			  хотели бы это делать в эмуляторе терминала.

			Чтобы полностью исключить соединение с сервером X
			используйте >
			
				exclude:.*
<			
			Такое значение имеет тот же эффект, что и
			использование параметра |-X|. 
			Обратите внимание, что если соединение с сервером X
			отсутствует, то заголовок окна обновляться не будет и
			буфер обмена будет недоступен.
			Значение опции 'magic' игнорируется, а {шаблон}
			интерпретируется так, как если бы опция 'magic' была
			бы включена.
			В качестве {шаблона} используется весь текст до конца
			значения опции, поэтому данное имя должно быть
			последним в списке значений.

						          *'cmdheight'* *'ch'*
'cmdheight' 'ch'	число (по умолчанию: 1)
			глобальная опция
			{Vi не имеет такой возможности}

	Число строк экрана, выделенное для командной строки. Позволяет
	избежать появления сообщений |нажмите-enter|.

						      *'cmdwinheight'* *'cwh'*
'cmdwinheight' 'cwh'	число (по умолчанию: 7)
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+vertsplit|}

	Задаёт число строк экрана для окна командной строки. 
	См. |командная_строка-окно|.

						     *'columns'* *'co'* *E594*
'columns' 'co'		число (по умолчанию: 80 или ширина терминала)
			глобальная опция
			{Vi не имеет такой возможности}

	Число колонок на экране. Обычно значение этой опции изменяется
	автоматически при инициализации терминала и не требует вмешательства
	со стороны пользователя. 
	Если Vim запущен в графическом интерфейсе или в окне с изменяемым
	размером, то изменение значения этой опции приводит к изменению
	размера окна. Если вам необходимо изменять значение этой опции только
	для графического интерфейса, поместите соответствующую команду в файл
	|gvimrc|. Если после изменения значения этой опции Vim будет не в
	состоянии изменить физическое число колонок, то на экране возможно
	появление мусора.

					    *'comments'* *'com'* *E524* *E525*
'comments' 'com'	строка (по умолчанию:
				"s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-")
			местная по отношению к буферу опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+comments|}

	Значением этой опции является список символьных строк, разделённых
	запятыми, с которых может начинаться строка с комментарием. Более
	подробная информация о комментариях содержится в разделе
	|форматирование-комментарии|. В разделе |опции-обратная_косая|
	объясняется как использовать символ обратной косой черты для включения
	пробела в значение опции.

					      *'commentstring'* *'cms'* *E537*
'commentstring' 'cms'	строка (по умолчанию: "/*%s*/")
			местная по отношению к буферу опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+folding|}

	Опция содержит шаблон для комментария. Символы "%s" в значении опции
	заменяются текстом комментария. В настоящее время опция используется
	только для добавления маркеров для складок, см. |складки-маркеры|.

			       *'compatible'* *'cp'* *'nocompatible'* *'nocp'*
'compatible' 'cp'	переключатель (по умолчанию: включено, 
				         выключено если обнаружен файл .vimrc)
			глобальная опция
			{Vi не имеет такой возможности}

	Эта опция позволяет переключаться между режимом совместимости с Vi и
	более полезным использованием Vim.
	Эта опция отличается от других тем, что при изменении её значения
	также изменяется значение целого ряда других опций. 
	БУДЬТЕ ОСТОРОЖНЫ! Изменение значения этой опции может привести к
	целому ряду нежелательных последствий: изменяется алгоритм
	интерпретации привязок, отмена операций будет выполняться не так, как
	прежде и т.п. Если вы изменяете значение этой опции в файле vimrc, то
	лучше всего делать это в самом начале файла.
	По умолчанию эта опция включена, что приводит к использованию значений
	опций, принятых по умолчанию в Vi. Такое значение по умолчанию было
	выбрано специально для тех, кто перешёл на Vim с Vi и даже не знает
	(или не хочет знать) о существовании опции 'compatible'.
	Если при запуске Vim будет обнаружен файл ".vimrc", то эта опция
	отключается и все неизменённые опции будут изменены в соответствии со
	значениями, принятыми по умолчанию для Vim. Таким образом, редактор
	будет использовать значения опций по умолчанию для Vim, если имеется
	файл ".vimrc", и значения опций по умолчанию для Vi в противном
	случае. (Замечание: это не касается общего системного файла vimrc). 
	См. также |совместимость_по_умолчанию|.
	Эта опция может быть также включена с помощью аргумента "-C" командной
	строки и выключена при помощи аргумента "-N". См. |-C| и |-N|.
	Отключение этой опции приводит к использованию значений по умолчанию
	Vim для тех опций, в которых значения по умолчанию Vi и Vim
	различаются. В списке ниже такие опции помечены знаком '+'. Значения
	других опций не изменяются. 
	При включении этой опции значения целого ряда других опций изменяются
	таким образом, что Vim становится как можно более Vi-совместимым. В
	таблице ниже обобщаются эти изменения. Вы можете пользоваться этой
	возможностью, чтобы вернуться к редактированию в стиле Vi.
	См. также 'cpoptions'.

	опция		+ значение	эффект	~

	'allowrevins'	  off		отсутствует команда CTRL-_
	'backupcopy'	  Unix: "yes"	файл резервной копии является копией
			  другие системы: 
			  "auto"	файл резервной копии копируется или
					переименовывается
	'backspace'	  ""		обычное удаление символа слева
	'backup'	  off		файл резервной копии отключается
	'cindent'	  off		форматирование отступов в коде C
					отключается
	'cedit'		+ ""		кнопка для открытия |cmdwin| не
					определена
	'cpoptions'	+ (все флаги)	Vi-совместимые флаги
	'cscopetag'	  off		не использовать cscope для ":tag"
	'cscopetagorder'  0		см. |cscopetagorder|
	'cscopeverbose'	  off		см. |cscopeverbose|
	'digraph'	  off		диграфы отключаются
	'esckeys'	+ off		отсутствуют <Esc>-кнопки в режиме
					Вставки
	'expandtab'	  off		табуляция не заменяется пробелами
	'fileformats'	+ ""		автоматическое распознавание формата
					файла отключено,
			  "dos,unix"	за исключением DOS, Windows и OS/2
	'formatoptions'	+ "vt"		Vi-совместимое форматирование
	'gdefault'	  off		по умолчанию флаг 'g' для ":s"
					отсутствует
	'history'	+ 0		отсутствует история командной строки
	'hkmap'		  off		отсутствует раскладка клавиатуры для
					иврита
	'hkmapp'	  off		отсутствует фонетическая раскладка
					клавиатуры для иврита
	'hlsearch'	  off		отключается подсветка соответствий
					шаблону поиска
	'incsearch'	  off		отключается пошаговый поиск
	'indentexpr'	  ""		форматирование отступов по выражению
					отключается
	'insertmode'	  off		запуск в режиме Вставки не
					производится
	'iskeyword'	+ "@,48-57,_"	ключевые слова могут содержать
					алфавитно-цифровые символы и символ '_'
	'joinspaces'	  on		после точки вставляется два пробела
	'modeline'	+ off		режимные строки отключаются
	'more'		+ off		вывод длинных списков происходит без
					пауз
	'revins'	  off		отключается вставка в обратном
					направлении
	'ruler'		  off		отключается линейка
	'scrolljump'	  1		отключается прыжок при прокрутке
	'scrolloff'	  0		отсутствует смещение прокрутки
	'shiftround'	  off		ширина отступа не округляется до
					значения shiftwidth
	'shortmess'	+ ""		сообщения не сокращаются
	'showcmd'	+ off		символы команд не отображаются
	'showmode'	+ off		текущий режим не отображается
	'smartcase'	  off		автоматическое переключение
					игнорирования регистра символов
					отключается
	'smartindent'	  off		отключается интеллектуальное
					форматирование отступов
	'smarttab'	  off		отключается интеллектуальный размер
					табуляции
	'softtabstop'	  0		табуляция всегда выполняется в позиции
					'tabstop'
	'startofline'	  on		переход в начало строки в некоторых
					командах
	'tagrelative'	+ off		имена файлов меток не являются
					относительными
	'textauto'	+ off		отсутствует автоматическое
					распознавание режима текста
	'textwidth'	  0		автоматические перенос строк
					отключается
	'tildeop'	  off		тильда не является оператором
	'ttimeout'	  off		терминальный тайм-аут не определён
	'whichwrap'	+ ""		перемещения влево-вправо не выходят за
					пределы строки
	'wildchar'	+ CTRL-E	CTRL-E используется для дополнения
					командной строки только в том случае,
					если текущим значением является <Tab>
	'writebackup'	  on или off	зависит от особенности +writebackup

						   *'complete'* *'cpt'* *E535*
'complete' 'cpt'	строка (по умолчанию: ".,w,b,u,t,i")
			местная по отношению к буферу опция
			{Vi не имеет такой возможности}

	Эта опция указывает на алгоритм работы дополнения ключевых слов при
	использовании CTRL-P и CTRL-N (см. |вставка-автодополнение|). Значение
	опции также используется при дополнении строки целиком
	|i_CTRL-X_CTRL-L|. Она задаёт тип дополнения и источники, в которых
	выполняется поиск, и представляет собой список флагов, разделённых
	запятыми:
	.	искать в текущем буфере ('wrapscan' игнорируется)
	w	искать в буферах в других окнах
	b	искать в других загруженных буферах в списке буферов
	u	искать в выгруженных буферах в списке буферов
	U	искать в буферах вне списка буферов
	k	искать в файлах, заданных в значении опции 'dictionary'
	k{dict}	искать в файле {dict}.  Можно указывать несколько флагов "k",
		а также использовать шаблоны. Например: >
			:set cpt=k/usr/dict/*,k~/spanish
<	s	искать в файлах, указанных в значении опции 'thesaurus'
	s{tsr}	искать в файле {tsr}. Можно указывать несколько флагов "s",
		а также использовать шаблоны.
	i	искать в текущем и подключаемых к нему файлах
	d	искать в текущем и подключаемых к нему файлах определённое имя
		или макрос |i_CTRL-X_CTRL-D|
	]	дополнение метки
	t	то же, что и "]"

	Выгруженные буферы не загружаются, поэтому соответствующие автокоманды
	|:autocmd| не выполняются, что может привести к неожиданным эффектам
	при выполнении дополнений (например, из файлов-архивов gzip).
	Поиск дополнений строки целиком в выгруженных буферах не выполняется.

	По умолчанию используется значение ".,w,b,u,t,i", что приводит к
	поиску в следующих местах:
	   1. текущий буфер
	   2. буферы в других окнах
	   3. другие загруженные буферы
	   4. выгруженные буферы
	   5. метки
	   6. включённые файлы

	Как видите, CTRL-N и CTRL-P можно использовать для выполнения любых
	дополнений, основанных на 'iskeyword' (например, по словарю
	|i_CTRL-X_CTRL-K|, подключённым шаблонам |i_CTRL-X_CTRL-I|, меткам
	|i_CTRL-X_CTRL-]|, как и выполнять нормальные подстановки).

				     *'confirm'* *'cf'* *'noconfirm'* *'nocf'*
'confirm' 'cf'		переключатель (по умолчанию: выключено)
			глобальная опция
			{Vi не имеет такой возможности}

	Если опция 'confirm' включена, то некоторые операции, которые в
	обычных обстоятельствах завершаются неудачно по причине наличия
	несохранённых изменений в буфере, например ":q" и ":e", будут
	приводить к появлению |диалога|, запрашивающего необходимость
	сохранения текущего файла или файлов. При этом вы по-прежнему можете
	пользоваться !, чтобы |оставить| буфер безусловно. 
	Если опция 'confirm' выключена, то вы можете включить вывод диалога
	подтверждения для единственной команды (такая возможность в основном
	используется в привязках) при помощи команды |:confirm|.
	См. также функцию |confirm()| и флаг 'v' в опции 'guioptions'.

			       *'conskey'* *'consk'* *'noconskey'* *'noconsk'*
'conskey' 'consk'	переключатель (по умолчанию: выключено)
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в MS-DOS}

	При работе с консолью для получения кода символа используются
	процедуры прямого ввода, что работает в большинстве случаев. См. также
	справку по опции |'bioskey'|. В целом доступно три способа обработки
	ввода с консоли:

	'conskey'   'bioskey'	    действие ~
	   on	     on или off	    прямой ввод с консоли
	   off		on	    BIOS
	   off		off	    STDIN

			       *'copyindent'* *'ci'* *'nocopyindent'* *'noci'*
'copyindent' 'ci'	переключатель (по умолчанию: выключено)
			местная по отношению к буферу опция
			{Vi не имеет такой возможности}

	Включённая опция указывает, что редактор должен выполнять копирование
	структуры отступа в предыдущей строке при выполнении автоматического
	форматирования отступа в новой строке. Обычно новый отступ формируется
	при помощи последовательности символов табуляции с добавлением
	необходимого количества пробелов (если, конечно, опция |'expandtab'|
	выключена; в противном случае используются только пробелы). Если эта
	опция включена, то отступы в новой строке формируются в точности из
	тех же символов, что и в предыдущей строке. Если новый отступ больше
	чем отступ в предыдущей строке, то последующие пробелы подставляются в
	обычном порядке. 
	ЗАМЕЧАНИЕ: опция 'copyindent' выключается, если включена опция
	'compatible'. См. также справку по опции 'preserveindent'.
	

						         *'cpoptions'* *'cpo'*
'cpoptions' 'cpo'	строка (по умолчанию в режиме Vim: "aABceFs",
				по умолчанию в режиме совместимости с Vi:  
				все флаги)
			глобальная опция
			{Vi не имеет такой возможности}

	Последовательность флагов, представляющих собой одиночные символы.
	Каждый символ включает какое-либо Vi-совместимое поведение. Опция
	используется в тех случаях, когда предпочтительно не переходить в
	режим совместимости с Vi и в то же время настраивать определённые
	аспекты работы редактора так, как это работает в Vi.
	Название опции 'cpoptions' происходит от английского
	"compatible-options", т.е. "опции совместимости".
	Для удобочитаемости в строку-значение опции можно добавлять запятые.
	Чтобы избежать проблем с добавлением флагов, рекомендуется использовать
	особенности команды ":set": "+=" и "-=". Подробнее об этом читайте 
	в разделе |добавление_флага_к_опции|.
	ЗАМЕЧАНИЕ: значение опции устанавливается равным принятому по
	умолчанию в режиме совместимости с Vi при включении опции 'compatible'
	и равным принятому по умолчанию в режиме Vim при отключении опции
	'compatible'.

	      флаг	поведение	~
								       *cpo-a*
		a	Команда ":read" с именем файла в качестве аргумента
			устанавливает имя соседнего файла для текущего окна.
			
								       *cpo-A*
		A	Команда ":write" с именем файла в качестве аргумента
			устанавливает имя соседнего файла для текущего окна.
 
								       *cpo-b*
		b	"\|" в команде ":map" распознаётся как конец команды
			":map". Символ '\' включается в привязку, а текст
			после символа '|' интерпретируется как следующая
			команда. Для включения в привязку символа '|' вместо
			обратной косой нужно использовать в этом случае
			CTRL-V. Вышесказанное относится ко всем командам
			привязок, сокращений, меню и автокомандам. См. также
			|map-вертикальная_черта|.

								       *cpo-B*
		B	Обратная косая черта утрачивает особое значение в
			привязках, сокращениях и в значениях команд меню.
			Чтобы использовать обратную косую черту как CTRL-V
			следует убрать этот флаг. Например, команда 
			":map X \<Esc>" приводит к заданию следующей привязки
			для X:
				с флагом 'B':	"\^["	 (^[ это настоящий
							  символ <Esc>)
				без флага 'B':	"<Esc>"  (5 символов)

				('<' исключается в обоих случаях)

								       *cpo-c*
		c	Поиск продолжается в конце любого соответствия в
			позиции курсора, но не далее, чем начало следующей
			строки. Если этот флаг не задан, то поиск продолжается
			с позиции следующего символа после позиции курсора.
			Например, с флагом 'c' при повторении поиска "/abab" 
			в строке "abababababab" будет найдено только три
			соответствия, а без флага 'c' будет обнаружено пять
			соответствий.
		
								       *cpo-C*
		C	Не склеивать строки в файле сценария, которые
			начинаются с символа обратной косой черты. 
			См. |продолжение_строки|.
			
								       *cpo-d*
		d	Использование "./" в значении опции 'tags' указывает
			не на файл меток, расположенный относительно текущего
			файла, а на файл меток, расположенный относительно
			текущего каталога.

								       *cpo-D*
		D	Отмена использования CTRL-K для ввода диграфа после
			команд Обычного режима с символьным аргументом, таким
			как |r|, |f| и |t|.

								       *cpo-e*
		e	При выполнении содержимого регистра по команде ":@r"
			всегда добавлять <CR> к последней строке, даже если
			содержимое регистра не построчное. Если этот флаг не
			задан, содержимое регистра не является построчным, а
			последняя строка не заканчивается на <CR>, то
			последняя строка помещается в командную строку и может
			быть отредактирована перед вводом <CR>.
			
								       *cpo-E*
		E	Если флаг задан, то считается ошибкой использование
			команд "y", "d", "c", "g~", "gu" и "gU" над пустой
			областью. Операторы работают только в том случае,
			когда имеется хотя бы один символ, над которым должна
			быть произведена операция. Например: "y0" будет
			завершаться неудачно в первой колонке.
		
								       *cpo-f*
		f	Если флаг задан, то команда ":read" с именем файла в
			качестве аргумента будет устанавливать имя файла для
			текущего буфера в том случае, если текущий буфер ещё
			не имеет имени файла.

								       *cpo-F*
		F	Если флаг задан, то команда ":write" с именем файла в
			качестве аргумента будет устанавливать имя файла для
			текущего буфера в том случае, если текущий буфер ещё
			не имеет имени файла.

								       *cpo-g*
		g	Переход к строке 1 при использовании команды ":edit"
			без аргументов.

								       *cpo-i*
		i	Флаг указывает, что прерванное чтение файла оставляет
			его без изменений.
			
								       *cpo-j*
		j	При склеивании строк двойной пробел добавляется только
			после '.', но не после '!' или '?'. См. также
			'joinspaces'.

								       *cpo-J*
		J	В конце |предложения| должны следовать два пробела
			после '.', '!' или '?'. Символ <Tab> не
			рассматривается в качестве пробела.

								       *cpo-k*
		k	Отменяет распознавание кодов клавиш в привязках,
			сокращениях и в определения меню. Например, если
			определённая <Кнопка> приводит к выдаче кода ^[OA (где
			^[ представляет собой <Esc>, то команда ":map X ^[OA"
			приводит к определению следующих привязок для X:

				с флагом 'k':	"^[OA"	    (3 символа)
				без флага 'k':	"<Кнопка>"  (односимвольный
				                            код)
			См. также флаг '<' ниже.

								       *cpo-K*
		K	Не ожидать завершения кода клавиши, если он находится
			в середине привязки. Это нарушает работу привязок
			вроде <F1><F1>, если происходит только частичное
			чтение второй <F1> и допускает прекращение выполнения
			привязки по нажатию <F1><Esc>.

								       *cpo-l*
		l	Обратная косая черта в диапазоне [] в шаблоне поиска
			воспринимается буквально, особым значением наделяется
			только "\]". См. |/[]|.

			   с флагом 'l':  "/[ \t]"  ищет <Space>, '\' и 't'
			   без флага 'l': "/[ \t]"  ищет <Space> и <Tab>
			   
								       *cpo-L*
		L	При включённой опции 'list' 'wrapmargin', 'textwidth',
		        'softtabstop' и режим Виртуальной Замены (см. |gR|)
			считают <Tab> за два символа вместо обычного поведения
			<Tab>.

								       *cpo-m*
		m	С этим флагом отображение результатов поиска парных
			соответствий будет всегда происходить с задержкой в
			половину секунды. Без этого флага отображение
			результатов поиска парных соответствий происходит с
			задержкой в половину секунды, если далее не был введён
			какой-либо символ.
			См. |'showmatch'|.

								       *cpo-M*
		M	Без этого флага поиск парных соответствий с помощью
			"%" принимает во внимание символы обратной косой
			черты, так, что в "( \( )" и  "\( ( \)" внешние
			скобки соответствуют друг другу. С включённым флагом
			"M" команда "%" игнорирует символы обратной косой
			черты, что является Vi-совместимым поведением.

								       *cpo-n*
		n	С данным флагом колонка, которая используется для
			'number' будет также использоваться для текста длинных
			перенесённых строк.

								       *cpo-o*
		o	Отступ строки для команды поиска не запоминается при
			следующем поиске.

								       *cpo-O*
		O	Vim не будет возражать, если файл будет перезаписан,
			даже в том случае, если файл не существовал в момент
			редактирования. В Vim встроена защита на тот случай,
			если файл был неожиданно создан кем-то ещё. Vi не
			обращал внимания на это обстоятельство.

								       *cpo-p*
		p	Vi-совместимое форматирование отступов в Lisp.  Если
			флаг не задан, то используется немного
			усовершенствованный алгоритм.

								       *cpo-r*
		r	Команда повторения операции (".") использует "/" для
			повторения команды поиска, вместо использования
			действительной строки поиска.
			                                               *cpo-R*
		R       Удалять отметки из отфильтрованных строк. Без этого
		        флага отметки сохраняются, как при использовании
			команды |:keepmarks|.

								       *cpo-s*
		s	Опции для буфера устанавливаются при первом переходе в
			буфер. Такое поведение было принято в Vim version 3.0
			и является настройкой по умолчанию. Если флаг не
			задан, то установка опций происходит при создании
			буфера.

								       *cpo-S*
		S	Опции буфера всегда устанавливаются при переходе в
			буфер (кроме 'readonly', 'fileformat', 'filetype' и
			'syntax'). Это наиболее совместимая с Vi настройка.
			Значения опций устанавливаются равными значениям в
			текущем буфере. При изменении значения опции и
			переходе в другой буфер это значение копируется. В
			итоге все опции буферов ведут себя как глобальные
			опции для всех буферов.

			's'    'S'     опции буферов копируются: ~
			нет    нет     при создании буфера
			да     нет     при первом переходе в буфер (по
				       умолчанию)
			 X     да      каждый раз при переходе в буфер
			               (совместимо с Vi)
				       
								       *cpo-t*
		t	Шаблон поиска для команды метки запоминается для
			последующей команды "n". Если флаг не задан, то Vim
			лишь помещает шаблон в историю поиска, но не изменяет
			значение последнего использованного шаблона поиска.

								       *cpo-u*
		u	Отмена операций совместима с Vi. 
		        См. |отмена-два_способа|.
								       *cpo-v*
		v	Символы, удалённые при помощи <BS> остаются видимыми
			на экране в режиме Вставки. Без этого флага символы
			стираются с экрана немедленно. Если флаг задан, то
			символы остаются на экране, но вновь введённый текст
			заменяет удалённые раннее символы.

								       *cpo-w*
		w	При использовании команды "cw" применительно к пустому
			символу изменяется только один символ, а не все
			пустые символы вплоть до начала следующего слова.

								       *cpo-W*
		W	Предотвращает перезапись файла, открытого только для
			чтения. Если флаг не задан, то команда ":w!" выполняет
			перезапись открытого только для чтения файла, если это
			возможно.

								       *cpo-x*
		x	Нажатие <Esc> в командной строке приводит к выполнению
			командной строки. По умолчанию Vim при нажатии <Esc>
			оставляет режим командной строки без выполнения
			введённой команды. |c_<Esc>|

								       *cpo-y*
		y	Команда копирования может быть повторена при помощи
			".".

								       *cpo-!*
		!	Если этот флаг задан, то при повторном выполнении
			команды-фильтра используется последняя выполненная
			внешняя команда, в противном случае применяется
			последняя использованная команда-фильтр.

								       *cpo-$*
		$	При выполнении изменений в пределах одной строки не
			обновлять строку, но помещать в конце изменённого
			текста '$'. Изменённый текст будет перезаписываться
			при наборе нового текста. Строка обновляется при вводе
			любой команды, которая смещает курсор от позиции
			вставки.

								       *cpo-%*
		%	По команде "%" выполняется Vi-совместимый поиск парных
			соответствий.
			Не распознаются соответствия "#if", "#endif" и т.п.
			Не распознаются соответствия "/*" и "*/".
			Скобки внутри одинарных и двойных кавычек
			рассматриваются как обычные скобки, что может вести к
			нарушению соответствий в строках, содержащих скобку.
			Например, в строке "if (strcmp("foo(", s))" первая
			скобка не будет соответствовать последней.
			Если флаг не задан, то скобки внутри одинарных и
			двойных кавычек обрабатываются особым образом. При
			поиске соответствия за пределами кавычек всё, что
			находится внутри кавычек игнорируется. При поиске
			внутри кавычек парное соответствие будет найдено, если
			оно существует. Такое поведение полезно при
			редактировании программ на языке C.

						    *cpo-star* *cpo-звёздочка*
		*	Если этот флаг задан, то ":*" используется как ":@".
			В противном случае ":*" является синонимом ":'<,'>",
			т.е. выбор Визуальной области.
								       *cpo-<*
		<	Флаг отключает распознавание кодов специальных клавиш
		        в угловых скобках |<>| в привязках, сокращениях и
			определениях меню. Например, команда ":map X <Tab>"
			приводит к тому, что X будет привязан следующим
			образом:
			
				с флагом '<':	"<Tab>"  (5 символов)
				без флага '<':	"^I"	 (^I это настоящий
			 	                          символ <Tab>)
			См. также флаг 'k' выше.

						   *'cscopepathcomp'* *'cspc'*
'cscopepathcomp' 'cspc'	число (по умолчанию: 0)
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+cscope|}

	Опция определяет сколько компонентов пути нужно отображать в списке
	меток. См. |cscopepathcomp|.

						       *'cscopeprg'* *'csprg'*
'cscopeprg' 'csprg'	строка (по умолчанию: "cscope")
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+cscope|}

	Опция задаёт команду, которая вызывается для выполнения cscope. 
	См. |cscopeprg|.
	Эта опция не может быть изменена из |режимной_строки| или в
	|песочнице| по соображениям безопасности.

						   *'cscopequickfix'* *'csqf'*
'cscopequickfix' 'csqf' строка (по умолчанию: "")
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностями |+cscope| и |+quickfix|}

	Опция указывает на необходимость использования окна быстрого
	исправления для вывода результатов cscope. См. |cscopequickfix|.

				*'cscopetag'* *'cst'* *'nocscopetag'* *'nocst'*
'cscopetag' 'cst'	переключатель (по умолчанию: выключено)
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+cscope|}

	Если эта опция включена, то cscope применяется при работе с командами
	меток. См. |cscope-опции|.
	ЗАМЕЧАНИЕ: эта опция отключается при включении опции 'compatible'.

						   *'cscopetagorder'* *'csto'*
'cscopetagorder' 'csto'	число (по умолчанию: 0)
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+cscope|}

	Опция задаёт порядок, в котором происходит поиск по команде ":cstag".
	См. |cscopetagorder|.
	ЗАМЕЧАНИЕ: значение этой опции устанавливается равным 0 при включении
	опции 'compatible'.

					          *'cscopeverbose'* *'csverb'*
					      *'nocscopeverbose'* *'nocsverb'*
'cscopeverbose' 'csverb' переключатель (по умолчанию: выключено)
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+cscope|}

	Если эта опция включена, то Vim будет выводить сообщения при
	добавлении записей в базу данных cscope. См. |cscopeverbose|.
	ЗАМЕЧАНИЕ: эта опция отключается при включении опции 'compatible'.

						                     *'debug'*
'debug'			строка (по умолчанию: "")
			глобальная опция
			{Vi не имеет такой возможности}

	Если значение этой опции равно "msg", то сообщения об ошибках, которые
	бы в противном случае опускались, будут выводиться на экран. Это
	полезно при отладке значений опций 'foldexpr' и 'indentexpr'.

						            *'define'* *'def'*
'define' 'def'		строка (по умолчанию: "^\s*#\s*define")
			глобальная или местная по отношению к буферу опция 
			|глобальные-местные|
			{Vi не имеет такой возможности}

	Значение опции указывает на шаблон, который должен быть использован
	для поиска определений макросов. В качестве шаблона используется
	обычный шаблон, такой же как и в команде "/". Значение этой опции
	используется при выполнении таких команд, как "[i" и "[d", см. также
	|поиск_включений|. После обнаружения соответствия определённое имя
	распознаётся в соответствии со значением опции 'isident':
	
	    {соответствие 'define'}{символы, не входящие в имя}{имя
	    определения}{символ, не входящий в имя}

	В разделе |опции-обратная_косая| описывается, как использовать символ
	обратной косой черты для включения пробела или обратной косой.

	Значение по умолчанию подходит для работы с текстом программ 
	на языке C. Для C++ может быть полезно также включить объявления
	констант: >
	    
		^\(#\s*define\|[a-z]*\s*const\s*[a-z]*\)
		
<	При использовании команды ":set" необходимо удваивать символы обратной
	косой черты!

			   *'delcombine'* *'deco'* *'nodelcombine'* *'nodeco'*
'delcombine' 'deco'	переключатель (по умолчанию: выключено)
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+multi_byte|}

	Если эта опция включена при редактировании текста в Unicode, то
	кнопка стирания символа слева от позиции курсора и команда "x"
	Обычного режима удаляют каждый символ внутри составного символа по
	отдельности. В отключенном состоянии, что является значением по
	умолчанию, символы удаляются полностью со всеми составляющими сразу.
	Замечание: при включённой опции 'delcombine' команда "xx" может
	работать отлично от команды "2x"!

	Эта опция полезна при работе с текстом на арабском, иврите и других
	языках, где используются составные символы над основными символами, в
	тех случаях, когда вам требуется удалить только составной символ.

						       *'dictionary'* *'dict'*
'dictionary' 'dict'	строка (по умолчанию: "")
			глобальная или местная по отношению к буферу опция 
			|глобальные-местные|
			{Vi не имеет такой возможности}

	Значением опции является список имён файлов, разделённых запятыми,
	которые используются для поиска слов в командах дополнения ключевых
	слов |i_CTRL-X_CTRL-K|. В каждом файле должен содержаться список слов,
	либо по одному слову на строке, либо несколько слов в строке,
	разделённых каким-либо несловарным символом (предпочтительнее
	использовать пробел). Максимальная длина строки в файле должна быть не
	более 510 байтов.
	Для включения запятой в имя файла её следует предварять символом
	обратной косой черты. Пробелы после запятых игнорируются, в противном
	случае пробелы включаются в имя файла. Подробнее об использовании
	символа обратной косой черты смотрите в разделе
	|опции-обратная_косая|.

	Где можно взять списки слов?
	
	- В системе FreeBSD имеется файл "/usr/share/dict/words".
	- В архиве Simtel смотрите каталог "msdos/linguist".
	- В коллекции GNU см. "miscfiles".
	
	При добавлении или исключении имён файлов лучше использовать команды
	|:set+=| и |:set-=|, что позволяет избежать проблем в том случае, если
	в новой версии будет использовано иное значение по умолчанию.
	Символы обратной кавычки не могут быть использованы в значении этой
	опции по соображениям безопасности.

							   *'diff'* *'nodiff'*
'diff'			переключатель (по умолчанию: выключено)
			местная по отношению к окну опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+diff|}

	Опция присоединяет текущее окно к группе окон, в которых отображаются
	различия между файлами. См. |vimdiff|.

						          *'dex'* *'diffexpr'*
'diffexpr' 'dex'	строка (по умолчанию: "")
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+diff|}

	Опция содержит выражение, которое используется для получения файла
	различий в стиле ed между двумя версиями файла. См. также
	|различия-diffexpr|.
	Значение этой опции не может быть изменено из |режимной_строки| или в
	|песочнице| по соображениям безопасности.

						           *'dip'* *'diffopt'*
'diffopt' 'dip'		строка (по умолчанию: "filler")
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+diff|}

	Опция содержит настройки для режима просмотра различий между файлами.
	Её значение может содержать перечисленные ниже элементы, ни один из
	которых не является обязательным. Элементы должны быть разделены
	запятыми.

		filler		Показывать строки заполнения для синхронизации
				содержимого окна с другим окном, в котором
				имеются дополнительные строки. Этот элемент
				наиболее полезен, когда окна расположены рядом
				и включена опция 'scrollbind'.

		context:{n}	Использовать контекст {n} строк между
				изменением и складкой, которая содержит
				неизменённые строки. Если этот элемент не
				задан, то используется контекст 6 строк. 
				См. |складки-diff|.
				
		icase		Игнорировать изменения регистра символов в
				тексте. "A" и "a" считаются одним и тем же
				символом. Если значение опции 'diffexpr'
				является пустой строкой, то включение этого
				элемента приводит к добавлению ключа "-i".

		iwhite		Игнорировать изменения в количестве пробелов.
				Если значение опции 'diffexpr' является пустой
				строкой, то включение этого элемента приводит
				к добавлению ключа "-b". Обратитесь к
				документации по команде "diff", чтобы понять
				что именно делает этот ключ. Указание данного
				ключа должно приводить к игнорированию
				пробелов на хвосте строки, но не предваряющих
				строку пробелов.

	Примеры: >

		:set diffopt=filler,context:4
		:set diffopt=
		:set diffopt=filler
<
				     *'digraph'* *'dg'* *'nodigraph'* *'nodg'*
'digraph' 'dg'		переключатель (по умолчанию: выключено)
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+digraphs|}

	Опция включает возможность ввода диграфов в режиме Вставки при помощи
	последовательности {симв1} <BS> {симв2}. См. |диграфы|.
	ЗАМЕЧАНИЕ: эта опция отключается при включении опции 'compatible'.

						         *'directory'* *'dir'*
'directory' 'dir'	строка (по умолчанию на Amiga: ".,t:",
				 на MS-DOS и Win32: ".,c:\tmp,c:\temp"
				 в Unix: ".,~/tmp,/var/tmp,/tmp")
			глобальная опция
			
	Опция содержит список каталогов для своп-файлов, разделённых запятыми.

	- Своп-файл создаётся в первом каталоге в списке, где это возможно.
	- Пустое значение опции указывает, что своп-файл не используется (при
	  этом восстановление в случае сбоя становится невозможным!).
	- Каталог "." указывает, что своп-файл помещается в том же каталоге,
	  что и редактируемый файл. В Unix имя файла предваряется точкой,
	  чтобы он не выводился по команде показа содержимого каталога. В
	  MS-Windows устанавливается "скрытый" атрибут, а имя предваряется
	  точкой в том случае, если это возможно.
	- Каталог, начинающийся с символов "./" (или ".\" в MS-DOS и т.п.),
	  указывает на размещение своп-файла относительно редактируемого
	  файла. Предваряющая имя каталога точка "." заменяется в этом случае
	  на путь к редактируемому файлу.
	- В Unix и Win32, если имя каталога заканчивается двойным разделителем
	  пути, то имя своп-файла создаётся из имени редактируемого файла с
	  заменой всех путевых разделителей на символ '%', что позволяет
	  обеспечить уникальность имени своп-файла в каталоге.
	- Пробелы после запятых игнорируются, но все остальные пробелы
	  считаются частью имени каталога. Чтобы задать имя каталога, которое
	  начинается с пробела, предваряйте его символом обратной косой
	  черты.
	- Чтобы включить в состав имени каталога запятую, её необходимо
	  предварять обратной косой чертой.
	- Имя каталога может заканчиваться на ':' или '/'.
	- На место переменных окружения подставляется их значение
	  |подстановка_переменных_окружения|.
	- Следует использовать символ '\' с осторожностью: перед пробелом
	  следует указывать одну обратную косую, а для получения самой
	  обратной косой она должна вводиться дважды (подробности см. в
	  разделе |опции-обратная_косая|). Например: >
	
	  :set dir=c:\\tmp,\ каталог\\,с\\,запятыми,\\\ каталог\ с\ пробелами
	    
<	- Для обратной совместимости с Vim версии 3.0 символ '>' в начале
	  опции удаляется.
	  
	Рекомендуется использовать "." в качестве первого элемента списка. В
	этом случае открытие одного и того же файла для редактирования дважды
	приводит к выводу предупреждения. Использование "/tmp" в Unix не
	рекомендуется, т.к. при перезагрузке вы можете потерять своп-файл. Во
	многих случаях содержимое "/var/tmp" не очищается при перезагрузке и
	является более предпочтительным значением. Однако, этот каталог может
	содержать большое количество файлов среди которых легко потерять
	своп-файл. Именно поэтому прежде всего проверяется каталог "tmp" в
	вашем домашнем каталоге.
	При добавлении или исключении имён файлов лучше использовать команды
	|:set+=| и |:set-=|, что позволяет избежать проблем в том случае, если
	в новой версии будет использовано иное значение по умолчанию.
	Значение этой опции не может быть изменено из |режимной_строки| или в
	|песочнице| по соображениям безопасности.
	{Vi: временный файл по умолчанию помещается в каталог "/tmp"}

					                    *'display'* *'dy'*
'display' 'dy'		строка (по умолчанию: "")
			глобальная опция
			{Vi не имеет такой возможности}			

	Опция изменяет способ отображения текста. Её значением является
	разделённый запятыми список флагов:

	lastline	Этот флаг указывает, что в окне должно отображаться
			максимально возможное количество символов последней
			строки. Если флаг не присутствует в значении опции, то
			последняя строка текста, которая не умещается в окне,
			заменяется строками, в начале которых выводится символ
			"@".
	uhex		Вместо вывода ^C и ~C на месте непечатных символов
			отображается шестнадцатеричное значение в форме <xx>.

						       *'eadirection'* *'ead'*
'eadirection' 'ead'	строка (по умолчанию: "both")
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+vertsplit|}			

	Опция задаёт режим применения опции 'equalalways':
	
		ver	по вертикали, ширина окон не изменяется
		hor	по горизонтали, высота окон не изменяется
		both	изменяется и ширина, и высота окон

			   *'ed'* *'edcompatible'* *'noed'* *'noedcompatible'*
'edcompatible' 'ed'	переключатель (по умолчанию: выключено)
			глобальная опция
			
	Во включённом состоянии опция заставляет флаги 'g' и 'c' команды
	":substitute" вести себя как переключатели. Подробнее об этом см. в
	разделе |сложные_изменения|. См. также справку по опции 'gdefault'.
	Включение этой опции не рекомендуется!

					           *'encoding'* *'enc'* *E543*
'encoding' 'enc'	строка (по умолчанию: "latin1" или значение переменной
			окружения $LANG)
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+multi_byte|}

	Опция задаёт кодировку символов, которая используется в Vim. Эта
	кодировка применяется к тексту в буферах, регистрах, строках в
	выражениях, к тексту, который сохраняется в файле viminfo, и т.д.
	Иными словами, она задаёт набор символов, с которыми может работать
	Vim. Список возможных значений этой опции приводится в разделе
	|кодировки-имена|.

	ЗАМЕЧАНИЕ: Изменение этой опции не приводит к изменению кодировки
	существующего в Vim текста. Мультибайтный текст при изменении значения
	этой опции может быть повреждён. Обычно эта опция должна оставаться
	без изменений, либо задаваться при запуске Vim. См. также
	|мультибайт|.
	
	ЗАМЕЧАНИЕ: В GTK+ 2 крайне рекомендуется устанавливать значение опции
	'encoding' равным "utf-8". Несмотря на то, что в Vim предприняты все
	возможные усилия для того, чтобы обеспечить нормальную работу с
	различными значениями опции 'encoding', "utf-8" является естественным
	выбором для этой платформы и позволяет избежать лишней нагрузки по
	перекодированию текста. "utf-8" не является значением кодировки по
	умолчанию только потому, что в различных консольных версиях и версиях
	с графическим интерфейсом такой выбор мог бы привести к неожиданному
	поведению, а также для того, чтобы предотвратить изменение кодировки
	вновь создаваемых файлов без ведома пользователя (в том случае, если
	значением опции 'fileencodings' является пустая строка).

	Кодировка текста для отдельных файлов может отличаться от значения
	опции 'encoding'. В этом случае кодировка задаётся значением опции
	'fileencoding'. Преобразование кодировок выполняется при помощи
	iconv() или согласно значению опции 'charconvert'.

	В обычных условиях значение опции 'encoding' соответствует значению
	текущей локали системы. Если Vim способен распознавать настройки
	окружения, то это значение будет выставлено по умолчанию. Если
	значение 'encoding' не соответствует значению текущей локали, то для
	преобразования набранного и отображаемого текста следует правильно
	настроить значение опции 'termencoding'. См. |кодировки-таблица|.

	При изменении значения этой опции создаётся автокомандное событие
	|EncodingChanged|, которое позволяет правильно настроить необходимые
	шрифты.

	Значение этой опции, если оно задано, преобразуется в нижний регистр
	символов, поэтому допустимо также использование символов в верхнем
	регистре. Символы подчёркивания преобразуются в символы '-'. Если
	название кодировки распознаётся редактором, то оно преобразуется к
	стандартному имени для этой кодировки. Так, "Latin-1" становится
	"latin1", "ISO_88592" становится "iso-8859-2", а "utf8" становится
	"utf-8".

	Замечание: если кодировка не может быть определена, то используется
	"latin1". Такая настройка нормально работает только при редактировании
	файлов в той же самой кодировке! Если фактическая кодировка символов
	не "latin1", то вам следует убедиться, что значения опций
	'fileencoding' и 'fileencodings' являются пустыми строками. При
	необходимости выполнения преобразований переключайтесь на
	использование utf-8.

	При использовании "unicode", "ucs-2" или "ucs-4" Vim использует для
	внутренних операций utf-8. Это незаметно при редактировании файлов, но
	имеет значение, когда записывается |файл_viminfo|. Кроме того, Vim
	предполагает, что терминал также использует utf-8. Поэтому, установка
	значения опции 'encoding' равным одному из вышеуказанных значений
	вместо utf-8 имеет смысл только для работы с файлами при пустом
	значении опции 'fileencoding'.

	Если значение опции 'encoding' соответствует кодировке Unicode, а
	опция 'fileencodings' не настроена, то значение по умолчанию для опции
	'fileencodings' изменяется.

			       *'endofline'* *'eol'* *'noendofline'* *'noeol'*
'endofline' 'eol'	переключатель (по умолчанию: включено)
			местная по отношению к буферу опция
			{Vi не имеет такой возможности}

	Если при записи файла данная опция выключена, а опция 'binary'
	включена, то символ <EOL> в последней строке файла добавляться не
	будет. Эта опция автоматически включается в начале редактирования
	нового файла, если файл не имеет символа <EOL> в последней строке. В
	противном случае опция автоматически выключается. В большинстве
	случаев изменять значение этой опции нет никакой необходимости. Если
	опция 'binary' выключена, то значение этой опции не используется при
	записи файла, а если опция 'binary' включена, то опция используется
	для сохранения информации о наличии символа <EOL> в последней строке
	файла, чтобы при записи файла эта информация была корректно
	восстановлена. Однако, вы можете при желании изменить значение этой
	опции вручную.

			     *'equalalways'* *'ea'* *'noequalalways'* *'noea'*
'equalalways' 'ea'	переключатель (по умолчанию: включено)
			глобальная опция
			{Vi не имеет такой возможности}

	Если эта опция включена, то после разделения или закрытия окна все
	окна автоматически приобретают одинаковый размер; в противном случае
	при разделении окна текущее окно уменьшается в размере и размер
	остальных окон остаётся без изменений, а при закрытии окна
	дополнительные строки отдаются окну, которое располагается после
	данного окна (в соответствии со значениями опций 'splitbelow' и
	'splitright').
	При совместном использовании окон, разделённых по горизонтали и по
	вертикали, вычисляется минимальный размер окна. В этом случае некоторые
	окна могут иметь и больший размер, если для этого имеется свободное
	пространство. Опция 'eadirection' задаёт направление, в котором
	происходит изменение размера. Изменения высоты окна можно избежать при
	помощи соответствующей настройки опции 'winfixheight'.

						           *'equalprg'* *'ep'*
'equalprg' 'ep'		строка (по умолчанию: "")
			глобальная или местная по отношению к буферу опция 
			|глобальные-местные|
			{Vi не имеет такой возможности}

	Опция задаёт внешнюю программу, которая применяется при работе команды
	"=". Если значением опции является пустая строка, то применяется
	встроенный механизм форматирования ('lisp', 'cindent' или
	'indentexpr').
	При обработке значения опции выполняется подстановка переменных
	окружения, см. |подстановка_переменных_окружения|. Об использовании
	пробелов и символов обратной косой черты см. в разделе
	|опции-обратная_косая|.
	Эта опция не может быть изменена из |режимной_строки| или в
	|песочнице| по соображениям безопасности.

			       *'errorbells'* *'eb'* *'noerrorbells'* *'noeb'*
'errorbells' 'eb'	переключатель (по умолчанию: выключено)
			глобальная опция
			
	Опция управляет выдачей сигнала (с использованием системного динамика
	или при помощи моргания экрана) при появлении сообщений об ошибках.
	Эта опция влияет только на сообщения об ошибках; независимо от её
	значения сигнал будет выдаваться в ситуациях, когда ошибка не
	сопровождается выводом сообщения (например, при нажатии <Esc> в
	Обычном режиме). О настройке режима выдачи сигнала (при помощи звука,
	моргания экрана или полное отключение сигнала) см. в справке по опции
	'visualbell'.

						          *'errorfile'* *'ef'*
'errorfile' 'ef'	строка (по умолчанию на Amiga:   "AztecC.Err",
				   на других платформах: "errors.err")
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+quickfix|}

	Опция задаёт имя файла ошибок для режима быстрого исправления 
	(см. |:cf|).
	При использовании ключа командной строки "-q" значение опции
	'errorfile' устанавливается равным следующему за ключом аргументу. 
	См. также |-q|.
	Эта опция НЕ используется при работе с командой ":make", для этого
	существует отдельная опция 'makeef'.
	При обработке значения опции выполняется подстановка переменных
	окружения, см. |подстановка_переменных_окружения|. Об использовании
	пробелов и символов обратной косой черты см. в разделе
	|опции-обратная_косая|.
	Эта опция не может быть изменена из |режимной_строки| или в
	|песочнице| по соображениям безопасности.

						       *'errorformat'* *'efm'*
'errorformat' 'efm'	строка (значение по умолчанию очень длинное)
			глобальная или местная по отношению к буферу опция 
			|глобальные-местные|
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+quickfix|}
			
	Описание формата строки в файле ошибок в стиле scanf 
	(см. |формат_ошибок|).

				     *'esckeys'* *'ek'* *'noesckeys'* *'noek'*
'esckeys' 'ek'		переключатель (по умолчанию в режиме Vim: включено, 
				       в режиме совместимости с Vi: выключено)
			глобальная опция
			{Vi не имеет такой возможности}

	Если эта опция включена, то функциональные клавиши, начинающиеся с
	символа <Esc> распознаются в режиме Вставки. Если эта опция выключена,
	то функциональные клавиши и кнопки управления курсором не могут быть
	использованы в режиме Вставки, если они начинаются с символа <Esc>.
	При этом одиночный символ <Esc> распознаётся немедленно, а не после
	задержки в одну секунду. Вместо выключения этой опции можно также
	использовать изменение значений опций 'timeoutlen' и 'ttimeoutlen'.
	Обратите внимание, что даже если опция 'esckeys' выключена, то
	организация привязок возможна, хотя кнопки управления курсором по
	умолчанию работать не будут.
	ЗАМЕЧАНИЕ: значение опции устанавливается равным принятому по
	умолчанию в режиме совместимости с Vi при включении опции 'compatible'
	и равным принятому по умолчанию в режиме Vim при отключении опции
	'compatible'.

						        *'eventignore'* *'ei'*
'eventignore' 'ei'	строка (по умолчанию: "")
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+autocmd|}

	Значением опции являются имена автокомандных событий, которые должны
	игнорироваться.
	Если значением опции является строка "all", то будут игнорироваться
	все автокомандные события и автокоманды выполняться не будут.
	В противном случае значение опции представляет собой список имён,
	разделённых запятыми. Например: >
	
	    :set ei=WinEnter,WinLeave
<
				 *'expandtab'* *'et'* *'noexpandtab'* *'noet'*
'expandtab' 'et'	переключатель (по умолчанию: выключено)
			местная по отношению к буферу опция
			{Vi не имеет такой возможности}

	В режиме Вставки при включённой опции 'expandtab' для вставки символа
	<Tab> используется соответствующее количество пробелов. Пробелы, кроме
	того, используются в отступах, которые вставляются по командам '<' и
	'>', а также при включённой опции 'autoindent'. Для вставки настоящего
	символа табуляции при включённой опции 'expandtab' используйте
	CTRL-V<Tab>. См. также |:retab| и |вставка-expandtab|.
	ЗАМЕЧАНИЕ: Эта опция выключается при включении опции 'compatible'.

					   *'exrc'* *'ex'* *'noexrc'* *'noex'*
'exrc' 'ex'		переключатель (по умолчанию: выключено)
			глобальная опция
			{Vi не имеет такой возможности}

	Во включённом состоянии опция позволяет выполнять чтение файлов
	.vimrc, .exrc и .gvimrc в текущем каталоге. Вам следует также обдумать
	необходимость включения опции 'secure' при включении опции 'exrc',
	подробности см. в разделе |инициализация|. Использование местных
	файлов .exrc, .vimrc или .gvimrc является потенциальной уязвимостью в
	безопасности, поэтому пользоваться данной возможностью следует
	осторожно!
	См. также |.vimrc| и |графический_интерфейс-инициализация|.
	Эта опция не может быть изменена из |режимной_строки| или в
	|песочнице| по соображениям безопасности.

				              *'fileencoding'* *'fenc'* *E213*
'fileencoding' 'fenc'	строка (по умолчанию: "")
			местная по отношению к буферу опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+multi_byte|}

	Опция задаёт кодировку символов для файла в данном буфере.
	Если значение опции 'fileencoding' отличается от значения опции
	'encoding', то при чтении и записи файла выполняются необходимые
	преобразования кодировки.
	Если значением опции 'fileencoding' является пустая строка, то
	используется значение опции 'encoding' и преобразования при чтении и
	записи файла не выполняются.
	
		ПРЕДУПРЕЖДЕНИЕ: Преобразования кодировки символов могут
		приводить к потере информации! Если значением опции 'encoding'
		является "utf-8", то преобразования скорее всего выполняются
		таким образом, что обратное преобразование приводит к тому же
		самому тексту. Однако, в случае, если опция 'encoding' имеет
		какое-либо другое значение, отличное от "utf-8", некоторые
		символы могут быть утрачены!
		
	Возможные значения этой опции рассматриваются в справке по опции
	'encoding'. Кроме того, можно указывать и другие значения, если они
	могут быть обработаны движком преобразований кодировок символов, 
	см. |мультибайт-преобразования|.
	При чтении файла значение опции 'fileencoding' выбирается из списка в
	значении опции 'fileencodings'. Чтобы прочитать файл в определённой
	кодировке установки значения опции 'fileencoding' может оказаться
	недостаточно. В этих случаях используйте ключ |++enc|.
	
	Добавление приставок "8bit-" и "2byte-" в данном случае не оказывает
	никакого влияния -- они просто игнорируются редактором. При установке
	значения опции оно преобразуется в нижний регистр символов, что
	позволяет использовать названия кодировок и в верхнем регистре. Все
	символы подчёркивания "_" преобразуются в символ дефиса "-". Если имя
	обнаружено в списке возможных значений опции 'encoding', то оно будет
	заменено стандартным именем кодировки. Например, "ISO8859-2"
	заменяется на "iso-8859-2".
	Если значение этой опции не является пустой строкой, то сразу же после
	начала редактирования файла включается опция 'modified', поскольку
	файл будет отличаться от файла при сохранении. Если вы изменяете
	значение опции из режимной строки, то вам возможно захочется отключить
	опцию 'modified', чтобы избежать подобного поведения.
	Эта опция не может быть изменена, если отключена опция 'modifiable'.

						 	                *'fe'*
	ЗАМЕЧАНИЕ: В версиях раннее Vim 6.0 эта опция ошибочно задавала
	кодировку для всех текстов в Vim. Теперь этой цели служит опция
	'encoding'. Старое короткое имя опции 'fe' больше не применяется.

					           *'fileencodings'* *'fencs'*
'fileencodings' 'fencs'	строка (по умолчанию: "ucs-bom" или
				"ucs-bom,utf-8,latin1", если значением опции
				'encoding' является кодировка Unicode)
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+multi_byte|}

	Значением опции является список кодировок символов, которые
	рассматриваются редактором в качестве кандидатур при назначении
	кодировки в начале редактирования существующего файла. После прочтения
	файла Vim пытается использовать первую кодировку в списке. В случае
	обнаружения ошибки предпринимается попытка использовать вторую
	кодировку из списка. Если соответствующая кодировка работает с данным
	файлом нормально, то её имя устанавливается в значении опции
	'fileencoding'. Если ни одна из кодировок в списке не может быть
	использована, то значение опции 'fileencoding' устанавливается равным
	пустой строке, что равноценно использованию кодировки, заданной в
	значении опции 'encoding'.

		ПРЕДУПРЕЖДЕНИЕ: Преобразования кодировки символов могут
		приводить к потере информации! Если значением опции 'encoding'
		является "utf-8" (или другой вариант Unicode), то
		преобразования скорее всего выполняются таким образом, что
		обратное преобразование приводит к тому же самому тексту.
		Однако, в случае, если опция 'encoding' имеет какое-либо
		другое значение, некоторые символы могут быть утрачены!

	При работе с пустым файлом или файлом, который содержит только символы
	ASCII, подойдёт практически любая кодировка, поэтому в этом случае
	используется первый элемент списка в значении опции 'fileencodings'
	(кроме "ucs-bom", которая требует наличия отметки порядка байтов BOM).
	Если вам необходимо использовать в таких ситуациях какую-либо другую
	кодировку, то можно организовать выполнение соответствующих проверок
	при помощи автокомандного события BufReadPost. Например: >

		au BufReadPost * if search('\S', 'w') == 0 |
			\ set fenc=iso-2022-jp | endif
			
<	В нашем примере значение опции 'fileencoding' устанавливается равным
	"iso-2022-jp", если файл не содержит непробельных символов.

        Обратите внимание, что опция 'fileencodings' не используется для
	нового файла, а значение опции 'fileencoding' в этом случае всегда
	является пустой строкой. Это означает, что несуществующему файлу может
	быть назначена кодировка, отличающаяся от кодировки пустого файла.
	
	Специальное значение "ucs-bom" применяется для выполнения проверки
	наличия Unicode BOM (отметка порядка байтов Unicode) в самом начале
	файла. Это значение не должно быть помещено в список после "utf-8" или
	другой кодировки Unicode, иначе проверка осуществляться не будет.
	8-битные кодировки, например "latin1", должны быть указаны в конце
	списка, т.к. иначе Vim не сможет обнаружить ошибку и эта кодировка
	будет приниматься всегда.

	НЕПРАВИЛЬНЫЕ ЗНАЧЕНИЯ:		ЧТО НЕПРАВИЛЬНО:
		latin1,utf-8		всегда будет использоваться "latin1"
		utf-8,ucs-bom,latin1	в файле utf-8 BOM распознаваться не
					будет
		cp1250,latin1		всегда будет использоваться "cp1250"
		
	Если значение опции 'fileencodings' представляет собой пустую строку,
	то значение опции 'fileencoding' не изменяется.
	Список возможных значений рассматривается в справке по опции
	'fileencoding'.
	Изменение этой опции вступает в силу при чтении очередного файла.

					                 *'fileformat'* *'ff'*
'fileformat' 'ff'	строка (по умолчанию в MS-DOS, MS-Windows, OS/2: "dos",
				по умолчанию в Unix: "unix",
				по умолчанию на Macintosh: "mac")
			местная по отношению к буферу опция
			{Vi не имеет такой возможности}

	Опция задаёт значение символа конца строки <EOL> для текущего буфера,
	которое используется при чтении файла в буфер и записи буфера в файл:

	    dos	    <CR> <NL>
	    unix    <NL>
	    mac	    <CR>

	При использовании "dos" CTRL-Z в конце файла игнорируется.
	См. также |файл-форматы| и |файл-чтение|.

	Кодировка символов в файле рассматривается в справке по опции
	'fileencoding'.
	При включённой опции 'binary' значение опции 'fileformat'
	игнорируется, а операции ввода/вывода с файлами выполняются так, как
	если бы значение опции было "unix".
	Эта опция автоматически изменяется в начале редактирования файла, если
	значение опции 'fileformats' не является пустой строкой, а опция
	'binary' выключена.
	Если значение этой опции не является пустой строкой, то сразу же после
	начала редактирования файла включается опция 'modified', поскольку
	файл будет отличаться от файла при сохранении.
	Эта опция не может быть изменена, если отключена опция 'modifiable'.
	Для обратной совместимости: если значением опции является "dos", то
	включается опция 'textmode', в противном случае опция 'textmode'
	выключается.

					               *'fileformats'* *'ffs'*
'fileformats' 'ffs'	строка (по умолчанию:
				Vim+Vi	MS-DOS, MS-Windows OS/2: "dos,unix",
				Vim	Unix: "unix,dos",
				Vim	Mac: "mac,unix,dos",
				Vi	Cygwin: "unix,dos",
				Vi	остальные системы: "")
			глобальная опция
			{Vi не имеет такой возможности}
			
	Опция сообщает редактору список возможных форматов конца строки
	(<EOL>), которые могут быть применены в начале редактирования нового
	буфера или при чтении файла в существующий буфер:

	- Пустое значение указывает, что формат всегда определяется значением,
	  указанным в опции 'fileformat'. Автоматическое определение в этом
	  случае отключается.
	- Если значение опции задано единственным именем, то при открытии
	  нового буфера всегда применяется указанный формат. При этом
	  происходит изменение значения опции 'fileformat' в соответствии с
	  указанным в этой опции значением. При чтении файла в существующий
	  буфер всегда применяется значение, указанное в опции 'fileformats',
	  независимо от того, каким является текущее значение опции
	  'fileformat' для данного буфера.
	- Если в значении этой опции указано несколько имён, разделённых
	  запятыми, то выполняется автоматическое определение <EOL> при чтении
	  файла. В начале редактирования файла проверка формата <EOL>
	  выполняется следующим образом:

	  1. Если все строки в файле заканчиваются на символы <CR><NL>, а
	     значение опции 'fileformats' содержит "dos", то значение опции
	     'fileformat' изменяется на "dos".
	  2. Если обнаруживается строка, оканчивающаяся на <NL>, а значение
	     опции 'fileformats' содержит "unix", то значение опции
	     'fileformat' изменяется на "unix". Обратите внимание, что в
	     данном случае выполняется поиск символа <NL> без предшествующего
	     ему <CR>, и если это условие выполняется, то значение "unix"
	     предпочитается значению "dos".
	  3. Если значение опции 'fileformats' содержит "mac", то значение
	     опции 'fileformat' изменяется на "mac".
	     Иными словами, "mac" выбирается только в том случае, если
	     значение "unix" отсутствует в списке или если в файле отсутствуют
	     символы <NL> и в списке возможных форматов отсутствует значение
	     "dos", либо если в файле отсутствует последовательность символов
	     <CR><NL>.
	     Кроме того, если сначала было выбрано значение "unix", но первый
	     символ <CR> встречается перед первым символом <NL>, а в тексте
	     присутствует больше символов <CR>, чем символов <NL>, то
	     значение опции 'fileformat' устанавливается равным "mac".
	  4. Если в результате описанных выше действий значение опции
	     'fileformat' всё ещё не установлено, то используется первое имя
	     из списка значений опции 'fileformats'.

	  То же самое происходит и при чтении файла в существующий буфер,
	  однако, если при этом значение опции 'fileformat' для данного файла
	  выглядит подходящим, то значение опции не изменяется.

	При включенной опции 'binary' значение опции 'fileformats' не
	используется.

	В системах, которые используют DOS-подобные символы окончания строки
	<EOL> (<CR><NL>), при чтении файлов сценариев по команде ":source" и
	файлов vimrc может происходить автоматическое определение формата
	файла:

	- Если значение опции 'fileformats' пустое, то автоматическое
	  определение отключается и используется формат "dos".
	- Если в значении опции 'fileformats' указано одно или несколько имён,
	  то выполняется автоматическое определение, основанное на первом
	  символе <NL> в файле: если перед ним встречается символ <CR>, то
	  используется формат "dos", в противном случае используется формат
	  "unix".
	
	См. также |файл-форматы|.
	Для обратной совместимости: если значением опции является пустая
	строка или указано только одно значение (запятая в значении опции
	отсутствует), то опция 'textauto' отключается, в противном случае
	опция 'textauto' будет включена.
	ЗАМЕЧАНИЕ: значение опции устанавливается равным принятому по
	умолчанию в режиме совместимости с Vi при включении опции 'compatible'
	и равным принятому по умолчанию в режиме Vim при отключении опции
	'compatible'.

					                   *'filetype'* *'ft'*
'filetype' 'ft'		строка (по умолчанию: "")
			местная по отношению к буферу опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+autocmd|}

	При включении этой опции срабатывает автокомандное событие FileType.
	При этом выполняются все автокоманды, соответствующие значению данной
	опции. Таким образом, значение 'filetype' используется вместо имени
	файла.
	При этом, опция не обязательно отражает тип текущего файла. Обычно её
	значение изменяется при определении типа файла. Чтобы включить
	автоматическое определение типа файла нужно воспользоваться командой
	":filetype on" |:filetype|.
	Изменение этой опции может быть особенно полезным, если оно
	выполняется из режимной строки, например, в тех случаях, когда тип
	файла не может быть определён автоматически. Например, для файла IDL: >
	
		/* vim: set filetype=idl : */
<	
	См. также |FileType| и |типы_файлов|.
	Не путайте эту опцию с опцией 'osfiletype', которая используется для
	отражения типа файла, сохранённого в самом файле.
	Эта опция не копируется в новый буфер, независимо от наличия флага 's'
	или 'S' в значении 'cpoptions'.

						         *'fillchars'* *'fcs'*
'fillchars' 'fcs'	строка (по умолчанию: "vert:|,fold:-")
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностями |+windows| и |+folding|}

	Опция задаёт символы, которые используются для заполнения строк
	состояния и вертикальных разделителей.
	Значение опции представляет собой список элементов, разделённых
	запятыми:

	  элемент	по умолчанию	значение элемента ~
	  stl:c		' ' или '^'	строка состояния текущего окна
	  stlnc:c	' ' или '-'	строка состояния остальных окон
	  vert:c	'|'		вертикальные разделители |:vsplit|
	  fold:c	'-'		заполнение закрытой складки, 
					см. 'foldtext'
	  diff:c	'-'		отображение удалённых строк при
					использовании опции 'diff'

	Любой не указанный явно элемент принимает значение по умолчанию. Для
	"stl" и "stlnc" используется пробел при наличии подсветки синтаксиса,
	либо '^' и '-' в противном случае.

	Пример: >
	
	    :set fillchars=stl:^,stlnc:-,vert:\|,fold:-,diff:-	    
<	
	Данное значение похоже на значение по умолчанию, но описанные выше
	символы '^' и '-' используются даже при наличии подсветки синтаксиса.

	Для подсветки элементов интерфейса используются следующие группы:

	  элемент	группа подсветки ~
	  stl:c		StatusLine		|подсветка-StatusLine|
	  stlnc:c	StatusLineNC		|подсветка-StatusLineNC|
	  vert:c	VertSplit		|подсветка-VertSplit|
	  fold:c	Folded			|подсветка-Folded|
	  diff:c	DiffDelete		|подсветка-DiffDelete|

					 *'fkmap'* *'fk'* *'nofkmap'* *'nofk'*
'fkmap' 'fk'		переключатель (по умолчанию: выключено)		*E198*
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+rightleft|}

	Если эта опция включена, то раскладка клавиатуры будет соответствовать
	кодировке для языка фарси.
	Обычно для переключения этой опции используется CTRL-_ в режиме
	Вставки при включённой опции 'allowrevins', |i_CTRL-_|. См. также
	|farsi.txt|.

						         *'foldclose'* *'fcl'*
'foldclose' 'fcl'	строка (по умолчанию: "")
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+folding|}

	Если значением опции является строка "all", то складка будет
	закрываться, когда курсор находится вне складки на уровне выше, чем
	заданный значением опции 'foldlevel'. Эта опция может оказаться
	полезной, если вам захочется автоматически закрывать складки при
	выходе из них.

						        *'foldcolumn'* *'fdc'*
'foldcolumn' 'fdc'	число (по умолчанию: 0)
			местная по отношению к окну опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+folding|}

	В случае, если значение опции отлично от 0, рядом с окном будет
	показана колонка заданной ширины, в которой отражаются раскрытые и
	закрытые складки. Максимальное значение для этой опции равно 12.
	См. |складки|.

			     *'foldenable'* *'fen'* *'nofoldenable'* *'nofen'*
'foldenable' 'fen'	переключатель (по умолчанию: включено)
			местная по отношению к окну опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+folding|}
			
	Если опция находится в выключенном состоянии, то все складки будут
	открыты. Изменение значения этой опции может быть использовано для
	быстрого переключения между просмотром всего текста полностью с
	открытыми складками и просмотром текста с открытыми и закрытыми
	складками (в том числе открытыми и зарытыми вручную). Значение опции
	может быть изменено на противоположно при помощи команды |zi|. При
	выключении опции 'foldenable' колонка складок будет очищаться.
	Опция автоматически включается по командам, которые создают новую
	складку или закрывают складки. См. |складки|.

						          *'foldexpr'* *'fde'*
'foldexpr' 'fde'	строка (по умолчанию: "0")
			местная по отношению к окну опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностями |+folding| и |+eval|}
			
	Опция используется для хранения выражения, которое применяется в том
	случае, если значением опции 'foldmethod' является "expr". Выражение
	вычисляется для каждой строки и возвращает уровень её складки. 
	См. также |складки-выражения| и |вычисления-песочница|.

						        *'foldignore'* *'fdi'*
'foldignore' 'fdi'	строка (по умолчанию: "#")
			местная по отношению к окну опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+folding|}
			
	Опция используется только в том случае, когда значением опции
	'foldmethod' является "indent". Для строк, начинающихся с символов,
	заданных в значении опции 'foldignore' будет приниматься значение
	уровня складки соответствующее значению уровня складки соседних строк.
	Пробелы перед указанными символами не оказывают влияния. Используемое
	по умолчанию значение "#" хорошо подходит при работе с исходными
	текстами программ на языке C. См. также |складки-отступы|.

						         *'foldlevel'* *'fdl'*
'foldlevel' 'fdl'	число (по умолчанию: 0)
			местная по отношению к окну опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+folding|}
			
	Опция устанавливает уровень складок: складки с более высоким уровнем,
	чем значение данной опции, будут закрыты.
	Установка значения этой опции равным нулю приводит к закрытию всех
	складок. С увеличением значения опции количество закрытых складок
	уменьшается.
	Значение этой опции может быть изменено при помощи команд |zm|, |zM| и
	|zR|.
	См. |складки-уровень_складок|.

						   *'foldlevelstart'* *'fdls'*
'foldlevelstart' 'fdls'	число (по умолчанию: -1)
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+folding|}

	Опция задаёт значение опции 'foldlevel' в начале редактирования нового
	буфера в окне. Её полезно использовать для закрытия всех складок в
	файле в начале редактирования (при значении 0), закрытия некоторых
	складок (при значении от 1) или открывания всех складок (при 
	значении 99).
	Изменение значения опции 'foldlevel' происходит до чтения и разбора
	режимной строки, поэтому значения в режимной строке могут отменять
	эффект данной опции. Кроме того, при редактировании файла в
	|режиме_отображения_различий| значение данной опции также
	игнорируется, а все складки будут поначалу находиться в закрытом
	состоянии.
	Изменение значения опции 'foldlevel' происходит также до выполнения
	автокоманд BufReadPre, что позволяет автокоманде изменять значение
	опции 'foldlevel' для определённых файлов.
	Если значением этой опции является отрицательное число, то оно не
	используется.

						 *'foldmarker'* *'fmr'* *E536*
'foldmarker' 'fmr'	строка (по умолчанию: "{{{,}}}")
			местная по отношению к окну опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+folding|}

	Опция задаёт символьные маркеры для начала и конца складки, которые
	применяются, если значением опции 'foldmethod' является строка
	"marker". При указании значения этой опции обязательно должна быть
	включена запятая, которая разделяет начальный и конечный маркеры.
	Маркер является буквальной строкой (использование регулярных выражений
	было бы слишком неэффективным). См. |складки-маркеры|.

						        *'foldmethod'* *'fdm'*
'foldmethod' 'fdm'	строка (по умолчанию: "manual")
			местная по отношению к окну опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+folding|}

	Опция задаёт метод образования складок для текущего окна. Список
	возможных значений:

	|складки-ручной_способ|	manual	Складки создаются вручную.
	|складки-jncnegs|	indent	Складка формируется строками с
					  одинаковыми отступами.
	|складки-выражения|	expr	Уровень складки для строки задаётся
					  значением опции 'foldexpr'.
	|складки-маркеры|	marker	Складки задаются с использованием
					  маркеров.
	|складки-синтаксис|	syntax	Складки задаются в соответствии с
					  правилами подсветки синтаксиса.
	|складки-diff|		diff	В складки помещаются неизменённые
					  фрагменты текста.

						      *'foldminlines'* *'fml'*
'foldminlines' 'fml'	число (по умолчанию: 1)
			местная по отношению к окну опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+folding|}

	Опция задаёт минимальное количество экранных строк, при котором
	складка будет отображаться в закрытом состоянии, в том числе для
	складок, закрытых вручную.
	Обратите внимание, что опция влияет только на отображение складки.
	После применения команды "zc" для закрытия складки, отображающейся
	открытой по причине меньшего, чем значение опции 'foldminlines'
	количества содержащихся строк, повторное применение команды "zc" может
	привести к закрытию внешней складки.

						       *'foldnestmax'* *'fdn'*
'foldnestmax' 'fdn'	число (по умолчанию: 20)
			местная по отношению к окну опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+folding|}

	Опция назначает максимальное количество вложений складок для методов
	"indent" и "syntax". Опция позволяет избежать создания слишком
	большого количества складок. Использование значения, большего, чем 20,
	не работает, поскольку встроенное ограничение количества вложений в
	складках соответствует 20.

						          *'foldopen'* *'fdo'*
'foldopen' 'fdo'	строка (по умолчанию: "block,hor,mark,percent,
					       quickfix,search,tag,undo")
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+folding|}

	Опция указывает группы команд, выполнение которых приводит к открытию
	складки, если после выполнения команды курсор помещается внутри
	закрытой складки. Значением опции является список элементов,
	разделённых запятыми.

		элемент		команды ~
		all		все команды
		block		"(", "{", "[[", "[{" и т.п.
		hor		команды горизонтального перемещения курсора:
		                  "l", "w", "fx", и т.п.
		insert		все команды режима Вставки
		jump		команды перехода: "G", "gg" и т.п..
		mark		команды прыжков к отметке: "'m", CTRL-O и т.п.
		percent		"%"
		quickfix	":cn", ":crew", ":make" и т.п.
		search		команды поиска по шаблону: "/", "n", "*", 
				  "gd" и т.п. (кроме шаблонов поиска в
				  командах ":")
		tag		переходы к меткам: ":ta", CTRL-T и т.п.
		undo		команды отмены или повторного выполнения: "u"
		                  и CTRL-R

	Если команда выполняется из привязки, то значение опции не
	используется. Чтобы достигать аналогичного эффекта, к привязке следует
	добавлять команду |zv|.
	Значение опции также не используется, если команда перемещения
	используется в качестве оператора (например, "dl" или "y%"). Пр этом
	оператор будет включать в качестве области выполнения всю закрытую
	складку целиком.
	Обратите внимание, что вертикальные перемещения не используются,
	поскольку иначе было бы крайне сложно выполнить перемещение к закрытой
	складке.
	В режиме вставки складки, в которых находится курсор, будут всегда
	открываться при вставке текста.
	Чтобы закрыть складки, следует выполнить переназначение опции
	'foldlevel' при помощи команды |zx| или установить значение опции
	'foldclose' равным строке "all".

						          *'foldtext'* *'fdt'*
'foldtext' 'fdt'	строка (по умолчанию: "foldtext()")
			местная по отношению к окну опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+folding|}

	Опция содержит выражение, которое используется для задания текста,
	отображаемого на месте закрытой складки. 
	См. |складки-текст_складки|.

					              *'formatoptions'* *'fo'*
'formatoptions' 'fo'	строка (по умолчанию в режиме Vim: "tcq", 
				по умолчанию в режиме совместимости с Vi: 
				"vt")
			{Vi не имеет такой возможности}

        Опция представляет собой последовательность символов, описывающих
	особенности автоматического форматирования текста, см. |fo-таблица|.
	Форматирование не применяется при включённой опции 'paste' (в этом
	случае редактор ведёт себя так, как если бы значением опции
	'formatoptions' была пустая строка). Для удобочитаемости между
	символами можно вставлять запятые.
	Чтобы избежать проблем с добавлением флагов, рекомендуется использовать
	особенности команды ":set": "+=" и "-=". Подробнее об этом читайте 
	в разделе |добавление_флага_к_опции|.
	ЗАМЕЧАНИЕ: значение опции устанавливается равным принятому по
	умолчанию в режиме совместимости с Vi при включении опции 'compatible'
	и равным принятому по умолчанию в режиме Vim при отключении опции
	'compatible'.

						          *'formatprg'* *'fp'*
'formatprg' 'fp'	строка (по умолчанию: "")
			глобальная опция
			{Vi не имеет такой возможности}

	Опция используется для задания имени внешней программы, которая
	применяется для форматирования строк, выделенных по команде "gq".
	Программа должна быть фильтром, то есть принимать исходные данные со
	стандартного потока ввода и выводить результат на стандартный поток
	вывода. Примером такой программы служит программа "fmt", входящая в
	поставку Unix-систем. Если данная опция является пустой строкой, то
	используется встроенная функция форматирования, см. |C-отступы|. При
	разборе значения опции выполняется |подстановка_переменных_окружения|.

	Информация об использовании символа обратной косой черты для включения
	пробела или обратной косой приводится в разделе |опции-обратная_косая|.
    
	Значение этой опции не может быть изменено из |режимной_строки| или в
	|песочнице| по соображениям безопасности.

				   *'gdefault'* *'gd'* *'nogdefault'* *'nogd'*
'gdefault' 'gd'		переключатель (по умолчанию: выключено)
			глобальная опция
			{Vi не имеет такой возможности}
			
	Если эта опция находится во включенном состоянии, то флаг 'g' в
	команде ":substitute" будет включаться по умолчанию, что приводит к
	замене всех соответствий в строке вместо первого. При указании флага
	'g' в команде ":substitute" происходит переключение между заменой всех
	соответствий и заменой первого соответствия. См. |сложные_изменения|.

		команда	       'gdefault' вкл.	   'gdefault' выкл.	~
		:s///		заменяется всё	    заменяется первое
		:s///g		заменяется первое   заменяется всё
		:s///gg		заменяется всё	    заменяется первое

	ЗАМЕЧАНИЕ: Эта опция отключается при включении опции 'compatible'.

						        *'grepformat'* *'gfm'*
'grepformat' 'gfm'	строка (по умолчанию: "%f:%l%m,%f  %l%m")
			глобальная опция
			{Vi не имеет такой возможности}
			
	Опция задаёт формат для распознавания вывода команды ":grep".
	Значение опции является строкой в стиле scanf, использующей тот же
	формат, что и опция 'errorformat', см. |формат_ошибок|.

						            *'grepprg'* *'gp'*
'grepprg' 'gp'		строка (по умолчанию: "grep -n ",
				      в Unix: "grep -n $* /dev/null",
				     в Win32: "findstr /n" or "grep -n",
				      на VMS: "SEARCH/NUMBERS ")
			глобальная или местная по отношению к буферу опция 
			|глобальные-местные|
			{Vi не имеет такой возможности}

	Опция задаёт программу, которая вызывается по команде ":grep". Опция
	может содержать символы '%' и '#', вместо которых подставляются те же
	значения, что и при использовании этих символов в командной строке.
	Допустимо также указывать заглушку "$*", вместо которой могут быть
	указаны ключи командной строки. При разборе значения опции выполняется
	|подстановка_переменных_окружения|. Информация об использовании
	символа обратной косой черты для включения пробела или обратной косой
	приводится в разделе |опции-обратная_косая|.

	Если ваша версия программы "grep" понимает ключ "-H", то этим можно
	воспользоваться, чтобы команда ":grep" нормально работала с
	единственным файлом: >
    
		:set grepprg=grep\ -nH
<	
	См. также раздел |:make_makeprg|. Большинство комментариев, которые
	приводятся в этом разделе, также применимы и к опции 'grepprg'.
	Значение по умолчанию для Win32 "findstr /n", если программа
	"findstr.exe" обнаружена в системе; в противном случае значением по
	умолчанию является "grep -n".
	Значение этой опции не может быть изменено из |режимной_строки| или в
	|песочнице| по соображениям безопасности.
	
			     *'guicursor'* *'gcr'* *E545* *E546* *E548* *E549*
'guicursor' 'gcr'	строка	(по умолчанию: "n-v-c:block-Cursor/lCursor,
					ve:ver35-Cursor,
					o:hor50-Cursor,
					i-ci:ver25-Cursor/lCursor,
					r-cr:hor20-Cursor/lCursor,
					sm:block-Cursor
					-blinkwait175-blinkoff150-blinkon175",
				для MS-DOS и консоли Win32:
					"n-v-c:block,o:hor50,i-ci:hor15,
					r-cr:hor30,sm:block")
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в сборке с графическим интерфейсом, а
			также в MS-DOS и консоли Win32}
			
	Эта опция указывает редактору, как должен выглядеть курсор в различных
	режимах. В версии с графическим интерфейсом опция обладает
	максимальными возможностями. В MS-DOS и в консоли Win32 можно изменять
	только высоту курсора. Опция позволяет задавать форму курсора либо
	путём задания блокового курсора, либо путём указания процентной
	величины от полного вертикального или горизонтального курсора.

	Значением опции служит список элементов, разделённых запятыми. Каждый
	элемент состоит из списка режимов и списка аргументов:

	список_режимов:список_аргументов,список_режимов:список_аргументов,..

	Список режимов представляет собой список нижеследующих значений,
	разделённых дефисами:

		n	Обычный режим
		v	Визуальный режим
		ve	Визуальный режим со значением опции 'selection' равным
			"exclusive" (то же, что и 'v', если не задано)
		o	режим Ожидания ввода оператора
		i	режим Вставки
		r	режим Замены
		c	Обычный режим командной строки (режим добавления)
		ci	режим Вставки в Командной строке
		cr	режим Замены в Командной строке
		sm	режим отображения соответствия в режиме Вставки
		a	все режимы
		
	Список аргументов также представляет собой список элементов,
	разделённых дефисами:

		hor{N}	горизонтальная линия, {N} процентов от высоты символа
		ver{N}	вертикальная линия, {N} процентов от ширины символа
		block	блоковый курсор, занимающий полностью высоту и ширину
			одного символа
			[должен быть задан только один из трёх вышеуказанных
			аргументов]

		blinkwait{N}		    *cursor-blinking* *курсор-мигание*
		blinkon{N}
		blinkoff{N}
			эти аргументы задают временные интервалы для мигания
			курсора: blinkwait указывает на задержку перед началом
			мигания курсора, blinkon указывает время, которое
			курсор отображается на экране, а blinkoff задаёт
			время, которое курсор не отображается на экране. Все
			временные интервалы задаются в миллисекундах. Если
			одно из значений равно 0, то курсор не мигает. По
			умолчанию используется значение
			"blinkwait700-blinkon400-blinkoff250". Если один из
			аргументов опущен, то используется значение по
			умолчанию. Таким образом, по умолчанию мигание курсора
			включено. Чтобы отключить мигание курсора, можно
			использовать аргумент "blinkon0". Курсор начинает
			мигать только в том случае, когда Vim ожидает ввода,
			но не во время выполнения команды.
			См. также раздел |xterm-мигание|, где рассматривается
			возможность мигания курсора в xterm.
		{имя_группы}
			имя группы подсветки синтаксиса, которая задаёт цвет и
			шрифт курсора.
		{имя_группы}/{имя_группы}
			Двойная группа подсветки синтаксиса. Первая группа
			используется, если не применяются языковые привязки
			клавиш, а вторая -- если они применены. См. также
			|язык-привязки|.

	Примеры отдельных элементов в значении опции:

	   n-c-v:block-nCursor	В Обычном режиме, режиме Командной строки и в
				визуальном режиме используется блоковый курсор
				с цветами подсветки, заданными в группе
				"nCursor".
	   i-ci:ver30-iCursor-blinkwait300-blinkon200-blinkoff150
				В режимах Вставки и вставки в Командной строке
				используется 30% вертикальный курсор с цветами
				подсветки, заданными в группе "iCursor".
				Скорость мигания курсора задана чуть быстрее
				обычного.

	Режим 'a' несколько отличается от других. С его помощью могут быть
	установлены аргументы для всех режимов, но при этом не происходит
	сброс незаданных аргументов к значениям по умолчанию. Например, для
	отключения мигания курсора во всех режимах можно использовать
	"a:blinkon0".

	Примеры цветовой подсветки курсора: >
	    :highlight Cursor gui=reverse guifg=NONE guibg=NONE
	    :highlight Cursor gui=NONE guifg=bg guibg=fg
<
					                   *'guifont'* *'gfn'*
						   *E235* *E596* *E610* *E611*
'guifont' 'gfn'		строка (по умолчанию: "")
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в сборке с графическим интерфейсом}

	Значением опции является список шрифтов, которые используются при
	запуске редактора в режиме с графическим интерфейсом. В простейшем
	случае значением опции может быть единственное имя шрифта. Если шрифт
	не может быть найден в системе, то Vim выдаст сообщение об ошибке.
	Список шрифтов используется для указания альтернативных вариантов,
	которые применяются, если предыдущий указанный в списке шрифт не
	обнаружен. Отдельные шрифты в списке разделяются запятыми.
	Если значение опции 'guifontset' не является пустой строкой, то опция
	'guifont' не используется. Пробелы после запятых в значении опции
	игнорируются. Чтобы включить запятую в состав имени шрифта, она должна
	предваряться символом обратной косой черты. Кроме того, символ
	обратной косой черты должен предварять символ пробела и сам символ
	обратной косой черты, если они встречаются в имени шрифта. См. также
	|опции-обратная_косая|. Например: >

	    :set guifont=Screen15,\ 7x13,font\\,with\\,commas

<	Это значение приводит к тому, что Vim будет пытаться сначала
        использовать шрифт "Screen15", затем, в случае, если этот шрифт не
	найден, "7x13", и, в крайнем случае, шрифт "font,with,commas".
	В графическом интерфейсе GTK+ 2 имя шрифта выглядит следующим 
	образом: >

	    :set guifont=Andale\ Mono\ 11

<	Это всё, что требуется. Указание XLFD (строки описания логического
        шрифта) больше не принимается.

								        *E236*
	Обратите внимание, что шрифты должны быть моноширинными (все символы
	шрифта должны иметь одинаковую ширину).
	Для предварительного просмотра шрифта в X11 следует пользоваться
	программой "xfontsel". Список всех доступных шрифтом можно посмотреть
	с помощью программы "xlsfonts". 
	В Win32, GTK и Photon можно использовать команду >
	
	    :set guifont=*
<	
	которая приводит к выдаче системного диалога выбора шрифта.
	Если ни один из указанных шрифтов не может быть загружен, то Vim
	оставит действующие установки без изменения. При указании пустого
	списка шрифтов Vim будет пытаться использовать другие настройки
	(например, в X используется ресурс Vim.font), а если и это не приводит
	к успешному результату, то редактор использует встроенные значения по
	умолчанию (для X это "7x13"). В значении опции следует указывать
	обычные начертания шрифтов. Vim будет пытаться обнаружить
	соответствующие жирные и наклонные начертания самостоятельно.

	В графическом интерфейсе Win32:		                 *E244* *E245*
	
	- можно задавать в имени шрифта следующие опции:
	
		hXX - высота XX (в пунктах, можно указывать значение с
		      плавающей точкой)
		wXX - ширина XX (в пунктах, можно указывать значение с
		      плавающей точкой)
		b   - жирный
		i   - наклонный
		u   - подчёркнутый
		s   - перечёркнутый
		cXX - набор символов XX. Разрешёнными наборами символов
		      являются: ANSI, ARABIC, BALTIC, CHINESEBIG5, DEFAULT,
		      EASTEUROPE, GB2312, GREEK, HANGEUL, HEBREW, JOHAB, MAC,
		      OEM, RUSSIAN, SHIFTJIS, SYMBOL, THAI, TURKISH,
		      VIETNAMESE ANSI и BALTIC.

	  Для разделения опций используется символ ':'.
	  
	- Вместо пробела можно использовать '_', что позволяет избежать
	  применения символа обратной косой черты для экранирования пробела.
	  
	- Примеры: >
	
	    :set guifont=courier_new:h12:w5:b:cRUSSIAN
	    :set guifont=Andale_Mono:h7.5:w4.5
<
	См. также |шрифт-размеры|.

					                *'guifontset'* *'gfs'*
					    *E250* *E252* *E234* *E597* *E598*
'guifontset' 'gfs'	строка (по умолчанию: "")
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с поддержкой графического интерфейса с особенностью
			|+xfontset|}
			{возможность отсутствует в GTK+ 2 GUI}

	Опция может быть использована для указания двух и более шрифтов,
	которые должны использоваться в редакторе. Первый шрифт применяется
	для английского языка, второй -- для какого-либо специального языка.
	Подробнее см. раздел |xfontset|.
	Использование значения этой опции, отличного от пустой строки, также
	предполагает, что все имена шрифтов будут рассматриваться как имя
	шрифтового набора, в том числе и те шрифты, которые применяются в
	качестве значения аргумента "font" в команде |:highlight|.
	Шрифты должны соответствовать текущей локали. Если шрифт не
	соответствует набору символов текущей локали, то изменение значения
	опции 'guifontset' завершается неудачно.
	Обратите внимание на различия между опциями 'guifont' и 'guifontset':
	в опции 'guifont' имена в списке являются альтернативными шрифтами, из
	которых для использования в редакторе выбирается один. В значении
	опции 'guifontset' вся строка целиком, включая запятые, является одним
	набором шрифтов. Задание нескольких альтернативных шрифтовых наборов
	невозможно.
	Нижеследующий пример работает на многих системах X11: >
	
		:set guifontset=-*-*-medium-r-normal--16-*-*-*-c-*-*-*
<
				  *'guifontwide'* *'gfw'* *E231* *E533* *E534*
'guifontwide' 'gfw'	строка (по умолчанию: "")
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в сборке с графическим интерфейсом}

	Если значение этой опции не является пустой строкой, то оно
	используется для задания списка шрифтов с двойной шириной символов.
	Отдельные шрифты в списке разделяются запятыми. Редактор будет
	использовать первый шрифт в списке, который будет обнаружен в системе.
	Замечание: ширина символа в таких шрифтах должна быть ровно вдвое
	больше, чем в шрифте, заданном при помощи опции 'guifont' при той же
	высоте.

	Во всех версиях с графическим интерфейсом, кроме GTK+ 2:

	опция 'guifontwide' используется только в том случае, если значение
	опции 'encoding' равно "utf-8", а значение опции 'guifontset' является
	пустой строкой или задано неправильно.
	Если значение опции 'guifont' не является пустой строкой и указанный в
	нём шрифт обнаружен, то при пустой опции 'guifontwide' Vim будет
	пытаться самостоятельно обнаружить соответствующий шрифт с двойной
	шириной символов с автоматическим изменением значения опции
	'guifontwide'.

	Только в графическом интерфейсе GTK+ 2:		    *guifontwide_gtk2*

	если значение опции 'guifontwide' установлено правильно, то оно всегда
	применяется для шрифтов с двойной шириной символов, даже если значение
	опции 'encoding' не соответствует строке "utf-8".
	Vim не предпринимает попыток автоматически устанавливать значение
	опции 'guifontwide'. Если значение 'guifontwide' является пустой
	строкой, то шрифт для символов, недоступных в шрифте, заданном с
	помощью 'guifont', выбирается Pango/Xft. Таким образом, нет
	необходимости изменять значение опции 'guifontwide', если вас
	устраивает значение, которое выбрано Pango/Xft.

						       *'guiheadroom'* *'ghr'*
'guiheadroom' 'ghr'	число (по умолчанию: 50)
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в графическом интерфейсе GTK и X11}

	Опция задаёт число пикселов, которое будет вычитаться из высоты экрана
	при размещении на нём окна программы. Значение опции должно быть
	изменено до запуска графического интерфейса, например в файле
	|gvimrc|. Если значение опции равно 0, то окно будет использовать
	полностью всю высоту экрана. Положительные значения опции позволяют
	оставить указанное число пикселов для дополнительных элементов окна, а
	отрицательные значения приводят к созданию окна, которое по высоте
	больше, чем высота экрана.

						         *'guioptions'* *'go'*
'guioptions' 'go'	строка (по умолчанию: "gmrLtT"   (MS-Windows),
					      "agimrLtT" (GTK, Motif и Athena)
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в сборке с графическим интерфейсом}

	Эта опция работает только в версиях Vim с поддержкой графического
	интерфейса. Её значением является последовательность букв, при помощи
	которых задаются компоненты и опции графического интерфейса, которые
	используются в редакторе.
	Чтобы избежать проблем с добавлением флагов, рекомендуется использовать
	особенности команды ":set": "+=" и "-=". Подробнее об этом читайте 
	в разделе |добавление_флага_к_опции|.

	В значении опции допускаются следующие буквы:
	
							        *guioptions_a*
	  'a'	Автоматическое выделение: при включении данного флага в
		значение опции 'guioptions' Vim пытается стать владельцем
		глобального буфера выделения в системе отображения окон при
		переходе в Визуальный режим. Это приводит к тому, что
		Визуально выделенный текст становится доступным для вклейки
		как в других приложениях, так и в самом Vim. При завершении
		Визуального режима, в том числе по причине выполнения операции
		над выделенным текстом или после выполнения вклейки текста,
		выделенный фрагмент автоматически копируется в регистр
		выделения "*. Таким образом, даже после завершения Визуального
		режима выделенный фрагмент всё ещё доступен для вклейки в
		других приложениях.
		    Если этот флаг не задан, то Vim не будет предпринимать
		попыток завладеть глобальным буферов выделения, кроме случаев,
		когда это было потребовано явным образом при выполнении
		операции копирования или удаления в регистр "*. То же самое
		относится и к безрежимному выделению.
		   
	  'A'	Автоматическое выделение при выполнении безрежимного
		выделения. Этот флаг работает так же, как и 'a', но только
		применительно к безрежимному выделению.

	        'guioptions'  Визуал. автовыделение  безрежимное автовыделение~
		     ""		        -			 -
		     "a"		да			да
		     "A"		-			да
		     "aA"		да			да

	  'c'	Использование консольных диалогов вместо всплывающих окон для
	        выполнения простых операций выбора.
		
	  'f'	Работа на переднем плане: не использовать вызов fork() для
	        отделения графического интерфейса от оболочки, в которой был
		запущен редактор. Эта опция полезна при запуске редактора из
		программ, которые должны ожидать завершения его работы
		(например, в почтовой программе). С другой стороны, для
		запуска графического интерфейса можно использовать "gvim -f"
		или ":gui -f", что позволяет добиваться тех же результатов.
		См. также раздел справки |графический_интерфейс-fork|.
	  
		Замечание: этот флаг должен быть установлен в сценарии запуска
		редактора vimrc, т.к. к моменту чтения файла gvimrc вызов
		fork() уже может произойти.

	  'i'	Использовать значок Vim.  В GTK с KDE такой значок используется
		в левом верхнем углу окна. Из-за ограничений, накладываемых
		X11 в не-GTK окружении, значок будет чёрно-белым.
		О том, как добиться использования цветного значка, читайте в
		разделе |X11-значок|.

	  'm'	Флаг включает отображение меню.
	  
	  'M'	Если этот флаг включен, то системное меню
		"$VIMRUNTIME/menu.vim" считываться не будет. Обратите
		внимание, что этот флаг должен быть добавлен в значение
		'guioptions' в файле .vimrc, до того, как включается
		распознавание типа файлов и синтаксиса (на момент выполнения
		сценария загрузки .gvimrc системное меню может быть уже
		загружено; к загрузке меню также приводит выполнение команд
		":syntax on" и ":filetype on").
		
	  'g'	Затенённые элементы меню: флаг позволяет отображать неактивные
		элементы меню серым цветом. Если флаг 'g' отсутствует в
		значении опции 'guioptions', то неактивные элементы меню не
		отображаются вовсе. Исключение из этого правила составляет
		Athena, где неактивные элементы меню всегда отображаются серым
		цветом.
		
	  't'	Флаг включает отрывные меню. Такая возможность в настоящее
		время предоставлена в графических интерфейсах Win32, GTK+,
		Motif и Athena.

	  'T'	Флаг включает инструментальную панель. В настоящий момент
		такая возможность имеется в графических интерфейсах Win32,
		GTK+, Motif и Athena.

	  'r'	Полоса прокрутки справа всегда присутствует на экране.
	  
	  'R'	Полоса прокрутки справа присутствует только в том случае, если
		окно разделено по вертикали.

	  'l'	Полоса прокрутки слева всегда присутствует на экране.

	  'L'	Полоса прокрутки слева присутствует только в том случае, если
		окно разделено по вертикали.

	  'b'	Горизонтальная полоса прокрутки (внизу) всегда присутствует на
		экране. Её размер зависит от самой длинной видимой на экране
		строки или от строки в позиции курсора, если в значении опции
		включен флаг 'h'. 
		См. |графический_интерфейс-горизонтальная_прокрутка|.

	  'h'	Ограничивает размер полосы горизонтальной прокрутки до длины
	        строки, в которой находится курсор. Это позволяет уменьшить
		объём вычислений.
		См. |графический_интерфейс-горизонтальная_прокрутка|.

	Вы можете включить полосы прокрутки слева И справа, если вам так
	больше нравится.

	Подробнее см. раздел |графический_интерфейс-полосы_прокрутки|.

	  'v'	Флаг указывает на использование вертикального расположения
		кнопок в диалогах. Если флаг не задан, то по мере возможности
		используется горизонтальное расположение кнопок, однако, в том
		случае, когда кнопки не помещаются в окне диалога при
		горизонтальном расположении, будет всё равно использоваться
		вертикальное расположение.

	  'p'	Использование обратных вызовов для указателя в графическом
		интерфейсе X11. Некоторые оконные менеджеры требуют включения
		этого флага. Если курсор не мигает или не становится пустым в
		необходимый момент, попробуйте включить данный флаг. Установка
		этого флага должна происходить до запуска графического
		интерфейса, поэтому наиболее разумным будет его добавление к
		значению 'guioptions' в файле gvimrc. Добавление или удаление
		этого флага после запуска графического интерфейса не оказывает
		никакого влияния.

	  'F'	Добавление информационной строки сообщений внизу окна.
		Возможность доступна только в Motif. См. также раздел справки
		|графический_интерфейс-строка_сообщений|.

						       *'guipty'* *'noguipty'*
'guipty'		переключатель (по умолчанию: включено)
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в сборке с графическим интерфейсом}

	Только при работе в графическом интерфейсе: если опция находится во
	включенном состоянии, то для операций ввода/вывода с командами
	оболочки Vim будет пытаться открывать псевдо-tty. См. также раздел
	справки |графический_интерфейс-pty|.

					                   *'helpfile'* *'hf'*
'helpfile' 'hf'		строка (по умолчанию в MSDOS: 
                                                    "$VIMRUNTIME\doc\help.txt"
				в других системах: "$VIMRUNTIME/doc/help.txt")
			глобальная опция
			{Vi не имеет такой возможности}

	Опция задаёт имя для основного файла справки. Все файлы справочника
	должны быть в одном каталоге. Кроме того, используются все подкаталоги
	с именем "doc" в каталогах, указанных в значении опции 'runtimepath'.

	При обработке значения опции выполняется подстановка переменных
	окружения, см. |подстановка_переменных_окружения|. Например:
	"$VIMRUNTIME/doc/help.txt". Если переменная $VIMRUNTIME не задана, то
	также проверяется и значение переменной $VIM. См. также разделы
	|$VIMRUNTIME| и |опции-обратная_косая|, где разбирается использование
	пробелов и символов обратной косой черты при задании значений опций.
	Эта опция не может быть изменена из |режимной_строки| или в
	|песочнице| по соображениям безопасности.

						         *'helpheight'* *'hh'*
'helpheight' 'hh'	число (по умолчанию: 20)
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+windows|}
			
	Опция используется для задания минимальной начальной высоты окна
	справки, если оно открывается по команде ":help". Окно справки при
	открытии имеет высоту, равную половине высоты текущего окна, или
	высоту, равную высоте других окон, если включена опция 'ea'. В случае,
	если высота окна справки оказывается меньше значения, определённого
	опцией 'helpheight', то высота окна справки устанавливается равной
	этому значению. Для отключения такого поведения опции 'helpheight'
	можно назначить значение 0.

						          *'helplang'* *'hlg'*
'helplang' 'hlg'	строка (по умолчанию: пустая строка или язык
			сообщений)
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+multi_lang|}

        Разделённый запятыми список языков. Vim использует первый язык, на
	котором есть соответствующий файл справки. В крайнем случае всегда
	используется английский язык. Вы можете включить в значение опции
	"en", если предпочитаете всегда использовать справку на английском
	языке вместо другого языка, однако при этом будет выполняться только
	поиск в метках, определённых для файлов справки другого языка, а не в
	английском справочнике.
	
	Пример: >
	
		:set helplang=de,it
<	
	В данном случае выполняется поиск немецкой справки, затем, если это не
	увенчалось успехом, итальянской, и, наконец, поиск будет проведён в
	английском справочнике.

	При использовании команд |CTRL-]| и ":help!" в неанглийском файле
	справки, Vim будет пытаться найти метку на данном языке, перед тем как
	использовать данную опцию.
	См. также раздел |справка-перевод_на_другие_языки|.

				     *'hidden'* *'hid'* *'nohidden'* *'nohid'*
'hidden' 'hid'		переключатель (по умолчанию: выключено)
			глобальная опция
			{Vi не имеет такой возможности}

	Если эта опция находится в выключенном состоянии, то буфер будет
	выгружаться из памяти, когда Vim получает задание его |оставить|. Если
	данная опция находится во включенном состоянии, то буфер становится
	"скрытым". Конечно, если буфер продолжает отображаться в другом окне,
	то он не будет скрыт. Команды, которые позволяют перемещаться по
	списку буферов, могут в некоторых случаях приводить к сокрытию буфера
	несмотря на то, что опция 'hidden' выключена: это происходит, если
	буфер содержит несохранённые изменения, опция 'autowrite' выключена
	или запись невозможна, и в команде применяется флаг '!'. См. также
	|windows.txt|.
	На время выполнения одной команды эта опция включается по команде
	":hide {команда}", см. |:hide|.
	
	ПРЕДУПРЕЖДЕНИЕ: Если у вас есть несохранённые изменения в скрытых
	буферах, то о них легко забыть. Будьте осторожны при использовании
	команд ":q!" и ":qa!".

						          *'highlight'* *'hl'*
'highlight' 'hl'	строка (по умолчанию (одной строкой):
				     "8:SpecialKey,@:NonText,d:Directory,
				     e:ErrorMsg,i:IncSearch,l:Search,m:MoreMsg,
				     M:ModeMsg,n:LineNr,r:Question,
				     s:StatusLine,S:StatusLineNC,c:VertSplit
				     t:Title,v:Visual,w:WarningMsg,W:WildMenu,
				     f:Folded,F:FoldColumn,A:DiffAdd,
				     C:DiffChange,D:DiffDelete,T:DiffText,
				     >:SignColumn")
			глобальная опция
			{Vi не имеет такой возможности}

	Эта опция используется для настройки режимов подсветки для различных
	ситуаций. Её значением является список парных символьных параметров,
	разделённых запятыми. Первый символ в каждой паре указывает на
	ситуацию, в которой применяется данный режим подсветки, второй символ
	определяет используемый режим. Возможны следующие ситуации:

	|подсветка-SpecialKey|	 8  Специальные и метасимволы, выводимые по
	                            команде ":map"
	|подсветка-NonText|	 @  Символы '~' и '@' в конце окна и символы,
				    используемые в опции 'showbreak'
	|подсветка-Directory|	 d  Имена каталогов в списках, выводимых по
				    команде CTRL-D (в режиме командной строки)
				    и другие специальные элементы в списках.
	|подсветка-ErrorMsg|	 e  Сообщения об ошибках
			         h  (устаревшее, игнорируется)
	|подсветка-IncSearch|	 i  Подсветка 'incsearch'
	|подсветка-Search|	 l  Подсветка по шаблону для последней команды
				    поиска (см. 'hlsearch')
	|подсветка-MoreMsg|	 m  |продолжение_следует|
	|подсветка-ModeMsg|	 M  Режим (например, "-- ВСТАВКА --")
	|подсветка-LineNr|	 n  Номер строки для команд ":number" и ":#"
	|подсветка-Question|	 r  Приглашение |нажмите-enter| и вопросы
				    да/нет
	|подсветка-StatusLine|	 s  Строка состояния в текущем окне,
	                            см. |строка_состояния|
	|подсветка-StatusLineNC| S  Строки состояния в остальных окнах
	|подсветка-Title|	 t  Заголовки для вывода команд ":set all",
				    ":autocmd" и т.п.
	|подсветка-VertSplit|	 c  Колонка, разделяющая окна по вертикали
	|подсветка-Visual|	 v  Визуальный режим
	|подсветка-VisualNOS|	 V  Визуальный режим в случаях, когда Vim "не
				    владеет выделением". Применяется только в
				    графическом интерфейсе X11
				    |графический_интерфейс-X11| и в 
			            xterm (см. |xterm-буфер_обмена|).
	|подсветка-WarningMsg|	 w  Предупреждения
	|подсветка-WildMenu|	 W  Меню соответствий введённому шаблону, 
				    см. справку по опции 'wildmenu'
	|подсветка-Folded|	 f  Строка, выводимая на месте закрытых
				    складок
	|подсветка-FoldColumn|	 F  'foldcolumn'
	|подсветка-SignColumn|   >  колонка, используемая для |значков|

	В качестве режима могут использоваться следующие значения:

		r	инверсный режим	(элементы termcap "mr" и "me")
		i	курсив		(элементы termcap "ZH" и "ZR")
		b	жирный		(элементы termcap "md" и "me")
		s	выделенный	(элементы termcap "so" и "se")
		u	подчёркнутый	(элементы termcap "us" и "ue")
		n	без подсветки
		-	без подсветки
		:	применять указанную группу подсветки

	В остальных ситуациях используется принятое по умолчанию значение.
	Если вам необходимо изменить значение режимов, то пример можно найти в
	разделе справки |dos-цвета|.
	При использовании режима ':' после двоеточия необходимо указать имя
	группы подсветки синтаксиса. Группа подсветки может быть использована
	для определения любого типа подсветки, в том числе с использованием
	цвета. Информация о том, как определить группу подсветки, содержится в
	разделе справки по команде |:highlight|. Значение по умолчанию как раз
	использует различные группы подсветки для различных ситуаций. Группы
	подсветки, заданные по умолчанию, перечислены в разделе
	|подсветка-по_умолчанию|.

				 *'hlsearch'* *'hls'* *'nohlsearch'* *'nohls'*
'hlsearch' 'hls'	переключатель (по умолчанию: выключено)
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+extra_search|}

	Опция позволяет подсвечивать все соответствия шаблону, который был
	использован в последней команде поиска. Способ подсветки задаётся при
	помощи ситуации 'l' в значении опции 'highlight', по умолчанию
	используется группа подсветки "Search". Обратите внимание, что
	подсвечивается только текст, который соответствует самому шаблону,
	смещения в данном случае не применяются.
	См. также: 'incsearch' и |:match|.
	Если вам надоело смотреть на подсвеченные соответствия, то такое
	выделение можно отключить по команде |:nohlsearch|. Подсветка вновь
	будет использована сразу после выполнения следующей команды поиска.
	В том случае, когда шаблону может соответствовать конец строки, Vim
	будет пытаться подсвечивать все соответствия, однако это зависит от
	позиции начала поиска, а именно подсветка будет выполняться в том
	случае, когда текст соответствия находится в первой строки окна или
	в первой строке под закрытой складкой и ниже. Соответствие, начало
	которого приходится на предыдущую скрытую строку, подсвечиваться не
	будет.
	ЗАМЕЧАНИЕ: Эта опция отключается при включении опции 'compatible'.

						            *'history'* *'hi'*
'history' 'hi'		число (по умолчанию в режиме Vim: 20, 
			       по умолчанию в режиме совместимости с Vi: 0)
			глобальная опция
			{Vi не имеет такой возможности}
			
	Vim позволяет сохранять историю команд ":" и историю шаблонов для
	предыдущих команд поиска. Данная опция определяет размер каждой из
	историй (см. |командная_строка-редактирование|).
	ЗАМЕЧАНИЕ: значение опции устанавливается равным принятому по
	умолчанию в режиме совместимости с Vi при включении опции 'compatible'
	и равным принятому по умолчанию в режиме Vim при отключении опции
	'compatible'.
	

					 *'hkmap'* *'hk'* *'nohkmap'* *'nohk'*
'hkmap' 'hk'		переключатель (по умолчанию: выключено)
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+rightleft|}

	Опция используется для включения раскладки клавиатуры для ввода
	символов иврита. Значение опции как правило переключается в режиме
	Вставки при помощи CTRL-_ после включения опции 'allowrevins'. См.
	также |rileft.txt|.
	ЗАМЕЧАНИЕ: Эта опция отключается при включении опции 'compatible'.

				     *'hkmapp'* *'hkp'* *'nohkmapp'* *'nohkp'*
'hkmapp' 'hkp'		переключатель (по умолчанию: выключено)
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+rightleft|}
	
	Опция включает использование фонетической раскладки клавиатуры. Для её
	работы также необходимо, чтобы была включена опция 'hkmap'. Опция
	полезна для работы с языком иврит в том случае, если у вас нет
	клавиатуры с символами этого языка.
	См. также |rileft.txt|.
	ЗАМЕЧАНИЕ: Эта опция отключается при включении опции 'compatible'.

						           *'icon'* *'noicon'*
'icon'			переключатель (по умолчанию: выключено; 
                                       включено, если заголовок окна может быть
				       восстановлен)
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+title|}

	Если эта опция включена, то текст значка окна будет установлен в
	соответствии со значением опции 'iconstring' или с именем
	редактируемого в данный момент файла (если значение 'iconstring'
	является пустой строкой): при этом используется только последняя части
	путевого имени файла.
	Эта опция работает только на терминалах, которые поддерживают
	назначение значков окон (в настоящее время -- в графическом интерфейсе
	X11 и на терминалах с непустым значением опции 't_IS', которыми по
	умолчанию являются xterm и iris-ansi: на этих терминалах значение
	't_IS' берётся из встроенного termcap).
	Если при сборке Vim был определён макрос HAVE_X11, то по возможности
	будет восстанавливаться оригинальный значок, см. |X11|. Об изменении
	значка на X11 написано в разделе справки |X11-значок|.

						                *'iconstring'*
'iconstring'		строка (по умолчанию: "")
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+title|}

	Если значением опции не является пустая строка, то оно будет
	использоваться в качестве текста значка окна. Опция работает только
	при включённой опции 'icon' и только на терминалах, которые позволяют
	задавать текст значка окна (в настоящее время такими терминалами
	являются графический интерфейс X11 и терминалы с непустым значением
	опции 't_IS'). Опция не применяется в MS Windows.
	Если при сборке Vim был определён макрос HAVE_X11, то по возможности
	будет восстанавливаться оригинальный значок, см. |X11|.

	Если в значении опции содержатся элементы в стиле printf (начинающиеся
	с символа %), то будут выполняться соответствующие подстановки в
	соответствии с правилами, которые применяются для опции 'statusline'.
	Примеры возможных значений приводятся в справке по опции 'titlestring'.
	{доступно только в том случае, если Vim скомпилирован с особенностью
	|+statusline|}

			       *'ignorecase'* *'ic'* *'noignorecase'* *'noic'*
'ignorecase' 'ic'	переключатель (по умолчанию: выключено)
			глобальная опция

	Опция позволяет игнорировать регистр символов в шаблонах поиска. Её
	значение также применяется при поиске в файле меток.
	См. также 'smartcase'.
	Значение опции может быть переопределено при помощи "\c" или "\C"
	непосредственно в шаблоне, см. |/игнорировать_регистр|.

					 	    *'imactivatekey'* *'imak'*
'imactivatekey' 'imak'	строка (по умолчанию: "")
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностями |+xim| и |+GUI_GTK|}

	Опция задаёт кнопку, с помощью которой активируется метод ввода в
	X-Windows. Если значение опции задано правильно, то Vim сможет
	полностью управлять методом ввода при помощи опций 'imcmdline',
	'iminsert' и 'imsearch'.
	Опция не может быть использована для изменения кнопки, активирующей
	метод ввода. Опция предназначена для сообщения редактору Vim
	информации о том, какая именно кнопка используется для этой цели.

	Формат значения опции:
	
		[ФЛАГ_МОДИФИКАТОР-]НАЗВАНИЕ_КНОПКИ

	В качестве ФЛАГА_МОДИФИКАТОРА могут быть использованы следующие
	значения (в любом регистре символов):
	
		S	    кнопка Shift
		L	    кнопка Lock 
		C	    кнопка Control
		1	    кнопка Mod1
		2	    кнопка Mod2
		3	    кнопка Mod3
		4	    кнопка Mod4
		5	    кнопка Mod5
		
	Допускается также использовать комбинации вышеуказанных модификаторов,
	например, и "S-C-space", и "SC-space" указывают на shift+ctrl+пробел.
	Названия кнопок содержатся в <X11/keysymdef.h> и XStringToKeysym.

	Пример: >
		:set imactivatekey=S-space
		
<	"S-space" обозначает комбинацию shift+пробел, которая используется для
	активации ввода kinput2 + canna (на японском) и ami (на корейском).

				*'imcmdline'* *'imc'* *'noimcmdline'* *'noimc'*
'imcmdline' 'imc'	переключатель (по умолчанию: выключено)
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностями |+xim| и |+multi_byte_ime| или если
			доступен |глобальный_метод_ввода|}

	Если опция включена, то при переходе к редактированию командной строки
	будет всегда активироваться метод ввода, кроме случаев, когда
	осуществляется ввод шаблона для поиска (см. опцию 'imsearch').
	Включение этой опции полезно в тех случаях, когда метод ввода
	позволяет вводить английские символы напрямую, например при вводе
	акцентированных символов при помощи "мёртвых" кнопок.

			       *'imdisable'* *'imd'* *'noimdisable'* *'noimd'*
'imdisable' 'imd'	переключатель (по умолчанию: выключено, на некоторых
			системах (SGI) включено)
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностями |+xim| и |+multi_byte_ime| или если
			доступен |глобальный_метод_ввода|}

	Если эта опция включена, то метод ввода использоваться не будет. Это
	может оказаться полезным в тех ситуациях, когда метод ввода работает
	не совсем так, как требуется, и его следует отключить.
	В настоящее время эта опция включена по умолчанию только на машинах
	SGI/IRIX, но это может быть изменено в будущих версиях.

						          *'iminsert'* *'imi'*
'iminsert' 'imi'	число (по умолчанию: 0 или 2, если поддерживается
			метод ввода)
			местная по отношению к буферу опция
			{Vi не имеет такой возможности}

        Опция определяет следует ли использовать метод ввода (IM) или языковую
	раскладку (:lmap) для клавиатуры при работе в режиме Вставки.
	Допустимы следующие значения опции:

		0	:lmap и IM выключены
		1	:lmap включена, IM выключен
		2	:lmap выключена, IM включен
		
	Значение 2 доступно только в том случае, если Vim собран с
	особенностями |+multi_byte_ime|, |+xim| или если доступен
	|глобальный_метод_ввода|.

	Вы можете использовать следующую привязку для сброса значения данной
	опции в 0 при выходе из режима Вставки по нажатию кнопки <Esc>: >
	
		:inoremap <ESC> <ESC>:set iminsert=0<CR>
<	
	Это позволяет отключать :lmap и IM автоматически при выходе из режима
	Вставки.
	Обратите внимание, что значение этой опции изменяется при
	использовании команды CTRL-^ в режиме Вставки |i_CTRL-^|.
	При установке значения опции 'keymap' равным допустимому имени
	клавиатурной раскладки значение опции 'iminsert' устанавливается
	равным 1. Кроме того, это значение также используется в качестве
	аргумента для таких команд, как "r" и "f".
	Значение 0 может работать не совсем корректно в Athena и Motif в
	некоторых методах XIM. В этом случае следует отключить XIM при помощи
	опции 'imdisable'.

						          *'imsearch'* *'ims'*
'imsearch' 'ims'	число (по умолчанию: 0 или 2, если поддерживается
			метод ввода)
			местная по отношению к буферу опция
			{Vi не имеет такой возможности}

        Опция определяет следует ли использовать метод ввода (IM) или языковую
	раскладку (:lmap) для клавиатуры при вводе шаблона для поиска.
	Допустимы следующие значения опции:
	
		-1	используется значение опции 'iminsert', что позволяет
			применять при вводе шаблона для поиска поведение,
			определённое для режима Вставки
		0	:lmap и IM выключены
		1	:lmap включена, IM выключен
		2	:lmap выключена, IM включен
		

	Обратите внимание, что значение этой опции изменяется при
	использовании команды CTRL-^ в режиме Командной строки |c_CTRL-^|.
	При установке значения опции 'keymap' равным допустимому имени
	клавиатурной раскладки значение опции 'imsearch' устанавливается
	равным 1, если оно не равно -1. 
	Значение 0 может работать не совсем корректно в Athena и Motif в
	некоторых методах XIM. В этом случае следует отключить XIM при помощи
	опции 'imdisable'.

						           *'include'* *'inc'*
'include' 'inc'		строка (по умолчанию: "^\s*#\s*include")
			глобальная или местная по отношению к буферу опция 
			|глобальные-местные|
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+find_in_path|}

	Опция применяется для задания шаблона, который используется для поиска
	команды включения внешнего файла, например "#include" в тексте
	программы на языке C. Используются обычные шаблоны поиска, такие же,
	как в команде "/" (см. |шаблон|). Значение по умолчанию отвечает
	правилам синтаксиса программ на языке C. Данная опция используется при
	выполнении таких команд, как "[i", "]I", "[d" и т.д. Значение опции
	'isfname' применяется для распознавания имени файла, которое следует
	за строкой, соответствующей заданному шаблону. О включении в значение
	опции пробелов и символов обратной косой черты см. в разделе
	|опции-обратная_косая|.

						      *'includeexpr'* *'inex'*
'includeexpr' 'inex'	строка (по умолчанию: "")
			местная по отношению к буферу опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+find_in_path| или |+eval|}

	Опция используется для задания выражения, которое применяется к
	строке-значению опции 'include' для получения имени файла. Эта опция
	может быть полезной для замены "." на "/" в программах на языке Java:
>
		:set includeexpr=substitute(v:fname,'\\.','/','g')
		
<	Переменной "v:fname" присваивается определённое имя файла. Выражение
	вычисляется в |песочнице|.
	Эта же самая опция используется при выполнении команды |gf|, если имя
	неизменённого файла не может быть найдено. Это позволяет выполнять
	команду "gf" по отношению к имени после выражения 'include'.
	Кроме того, значение опции используется в качестве |<cfile>|.

				 *'incsearch'* *'is'* *'noincsearch'* *'nois'*
'incsearch' 'is'	переключатель (по умолчанию: выключено)
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+extra_search|}

	Опция позволяет немедленно отображать результат поиска по частично
	введённому шаблону при вводе команды поиска. Строка в тексте,
	соответствующая шаблону, выделяется подсветкой. Если шаблон не
	обнаружен или задан неправильно, то в тексте ничего не выделяется.
	Поскольку при включённом состоянии данной опции экран постоянно
	обновляется, эта возможность оправдана только на быстрых терминалах.
	Обратите внимание, что хотя соответствие шаблону в тексте и выделяется
	подсветкой, фактическое позиционирование курсора в место обнаруженного
	соответствия не выполняется. Для завершения команды поиска и
	перемещения курсора к первому найденному соответствию по прежнему
	необходимо ввести <CR>. Режим подсветки описывается флагом ситуации
	'i' в значении опции 'highlight'. См. также справку по опции
	'hlsearch'.
	ЗАМЕЧАНИЕ: Эта опция отключается при включении опции 'compatible'.

						       *'indentexpr'* *'inde'*
'indentexpr' 'inde'	строка (по умолчанию: "")
			местная по отношению к буферу опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+cindent| или |+eval|}

	Опция задаёт выражение, которое используется для вычисления
	необходимой величины отступа для строки. Это выражение используется
	при создании новой строки, при выполнении оператора |=|, а также в
	режиме Вставки в соответствии со значением опции 'indentkeys'. Если
	значение опции не является пустой строкой, то оно имеет приоритет над
	значениями опций 'cindent' и 'smartindent'.
	При включённой опции 'paste' значение данной опции для выполнения
	отступов не используется.
	При вычислении выражения используется переменная |v:lnum|, значением
	которой является номер строки, для которой вычисляется величина
	отступа. Курсор также помещается в эту строку при вычислении выражения
	(однако его можно перемещать).
	Выражение должно возвращать количество пробелов, составляющих отступ
	строки, либо значение "-1", которое указывает на необходимость
	сохранения текущего отступа (для выполнения отступа используется
	'autoindent').
	При вычислении величины отступа могут быть полезны такие функции, как
	|indent()|, |cindent()| и |lispindent()|.
	Вычисление выражения, заданного в данной опции, не должно иметь
	побочных эффектов! Так, выражение не должно изменять текст, перемещать
	курсор в другое окно и т.п. Положение курсора после выполнения функции
	всегда восстанавливается, так что оно может быть изменено. Как
	правило, в качестве значения этой опции выступает вызов функции: >

		:set indentexpr=GetMyIndent()
<	
	Сообщения об ошибках при вычислении выражения будут подавляться, если
	в значении опции 'debug' не содержится "msg".
	См. |отступы-выражения|, а также |вычисления-песочница|.
	ЗАМЕЧАНИЕ: Значение этой опции устанавливается равным пустой строке
	при включении опции 'compatible'.

						       *'indentkeys'* *'indk'*
'indentkeys' 'indk'	строка (по умолчанию: "0{,0},:,0#,!^F,o,O,e")
			местная по отношению к буферу опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+cindent|}

	Опция содержит список кнопок, нажатие которых в режиме Вставки
	приводит к изменению отступа текущей строки. Значение опции оказывает
	влияние только в том случае, когда значением опции 'indentexpr' не
	является пустая строка. Формат значения опции идентичен применяемому в
	опции 'cinkeys', см. |indentkeys-формат|.
	См. также |C-отступы| и |отступы-выражения|.

			       *'infercase'* *'inf'* *'noinfercase'* *'noinf'*
'infercase' 'inf'	переключатель (по умолчанию: выключено)
			местная по отношению к буферу опция
			{Vi не имеет такой возможности}

	Опция управляет изменением регистра символов при выполнении
	автодополнения по ключевым словам (см. |вставка-автодополнение|). Если
	эта опция включена, то при включённой опции 'ignorecase' будет
	выполняться подстройка регистра символов дополняемого слова. Если
	введённый текст содержит символ в нижнем регистре в той позиции, где в
	соответствующем ключевом слове используется символ в верхнем регистре,
	то при дополнении будет использоваться символ в нижнем регистре. Если
	в введённом тексте не содержится букв в нижнем регистре, а в
	соответствующем ключевом слове используются символы в нижнем регистре,
	то дополнение выполняется с использованием символов верхнего регистра.

			       *'insertmode'* *'im'* *'noinsertmode'* *'noim'*
'insertmode' 'im'	переключатель (по умолчанию: выключено)
			глобальная опция
			{Vi не имеет такой возможности}

	Опция настраивает Vim таким образом, что режим Вставки становится
	режимом по умолчанию. Это позволяет использовать Vim в качестве
	безрежимного редактора. Данная опция используется в |evim|. При работе
	в режиме Вставки могут быть полезными следующие команды и приёмы:
    
	- Кнопки курсора используются для перемещения по тексту.
	- Команда CTRL-O используется для выполнения одной команды Обычного
	  режима |i_CTRL-O|).  В том случае, если речь идёт о привязке, она
	  будет выполняться так, как если бы опция 'insertmode' была бы
	  выключена. Обычный режим сохраняется до тех пор, пока не будет
	  завершена отработка привязки.
	  
								    *i_CTRL-L*
	- Команда CTRL-L используется для выполнения нескольких команд
	  Обычного режима. Возврат в режим Вставки происходит по нажатию
	  кнопки <Esc>. 

	При включении опции 'insertmode' происходят следующие изменения:
	
	- в начале редактирования файла Vim переходит в режим Вставки.
	- <Esc> в режиме Вставки не работает и приводит к выдаче звукового
	  сигнала.
	- <Esc> в Обычном режиме переводит Vim в режим Вставки.
	- CTRL-L в режиме Вставки воспринимается как команда временного
	  перехода в Обычный режим. Символ CTRL-L при её вводе в текст не
	  вставляется.
	                                                            *i_CTRL-Z*
	- CTRL-Z в режиме Вставки переводит Vim в фоновый режим выполнения,
	  см. |CTRL-Z|.
	  
	В то же время, если символ <Esc> используется в привязке, то его
	поведение будет точно таким же, как и при выключенной опции
	'insertmode'. Это сделано для того, чтобы обеспечить выполнение
	одних и тех же привязок независимо от значения данной опции.
	При выполнении команд при помощи |:normal|, значение опции 'insertmode'
	не используется.
	
	ЗАМЕЧАНИЕ: Эта опция отключается при включении опции 'compatible'.

						           *'isfname'* *'isf'*
'isfname' 'isf'		строка (по умолчанию для MS-DOS, Win32 и OS/2:
			     "@,48-57,/,\,.,-,_,+,,,#,$,%,{,},[,],:,@-@,!,~,="
			     на AMIGA: "@,48-57,/,.,-,_,+,,,$,:"
			     на VMS: "@,48-57,/,.,-,_,+,,,#,$,%,<,>,[,],:,;,~"
			     на OS/390: "@,240-249,/,.,-,_,+,,,#,$,%,~,="
			     на других системах: 
			                      "@,48-57,/,.,-,_,+,,,#,$,%,~,=")
			глобальная опция
			{Vi не имеет такой возможности}
			
	Символы, которые содержатся в значении этой опции, включаются в имена
	файлов и путевые имена. Имена файлов используются в таких командах,
	как "gf", "[i" и т.п., а также в файле меток. Кроме того, символы,
	входящие в значение этой опции, могут быть переданы в |шаблоне| при
	помощи "\f". 
	Мультибайтные символы со значениями от 256 и больше всегда включаются
	в качестве символов имён файлов. Данная опция служит только для
	настройки символов со значениями до 255. 
	В UTF-8 также включаются символы от 0xa0 до 0xff.

	Следует заметить, что на системах, использующих в качестве разделителя
	компонентов путевого имени обратную косую черту, Vim предпринимает всё
	возможное, чтобы обеспечить работу этого символа так, как этого
	ожидает пользователь. Однако, сделать это довольно непросто, поскольку
	в Vi символ обратной косой всегда использовался для экранирования
	специальных символов. В таких системах Vim не будет удалять обратную
	косую перед символом, входящим в набор символов имён файлов, однако на
	Unix и других подобных системах символ обратной косой черты будет
	удаляться. Символы '&' и '^' не включаются в набор символов по
	умолчанию, поскольку они имеют специальное значение для cmd.exe.

	Значение этой опции представляет собой список независимых частей,
	разделённых запятыми. Каждая часть может задавать либо одиночный
	символ, либо диапазон значений. Диапазон представляет собой два
	символьных номера, разделённых дефисом '-'. Символьные номера могут
	быть выражены числами в диапазоне от 0 до 255 или самими символами
	(кроме цифровых символов). Например:

		"_,-,128-140,#-43"	(включает символы '_' и '-', а также
					символы в диапазоне от 128 до 140 и от
					'#' до 43)

	В случае, если часть значения начинается с символа '^', символы из
	следующего за ним диапазона исключаются из набора символов,
	используемых в именах файлов. Всё значение опции целиком разбирается в
	порядке слева направо, поэтому исключаемые диапазоны символов следует
	помещать после включаемых диапазонов. Чтобы включить в набор символов
	сам символ '^', его следует помещать последним символом в значении
	опции или в конце диапазона. Например:

		"^a-z,#,^"	(исключить символы от 'a' до 'z', включить '#'
				и '^')
		
	Символ '@' передаёт все символы, которые при использовании в качестве
	аргумента функции isalpha() приводят к возврату значения TRUE. Как
	правило это символы от 'a' до 'z' и от 'A' до 'Z', а также символы с
	акцентами. Чтобы включить в набор сам символ '@', следует использовать
	конструкцию "@-@". Например:

		"@,^a-z"	Все алфавитные символы, кроме символов в
				нижнем регистре
		"a-z,A-Z,@-@"	Все буквы плюс символ '@'
		
	Запятая может быть включена в набор, если её поместить в том месте,
	где должен находится символьный номер. Например:

		"48-57,,,_"	Цифры, запятая и символ подчёркивания
		
	Для исключения запятой следует предварять её символом '^'. Например:

		" -~,^,,9"	Все символы от пробела до '~', исключая
				запятую, и символ <Tab>

	О включении в значение опции пробелов и символов обратной косой черты
	см. в разделе |опции-обратная_косая|.

						           *'isident'* *'isi'*
'isident' 'isi'		строка (по умолчанию на MS-DOS, Win32 и OS/2:
					   "@,48-57,_,128-167,224-235"
				на других системах: "@,48-57,_,192-255")
			глобальная опция
			{Vi не имеет такой возможности}
			
	Символы, перечисленные в значении данной опции, включаются в набор
	символов, допустимых для использования в качестве имён. Имена
	используются при распознавании переменных окружения и при поиске
	соответствий после строк, соответствующих шаблону, который задаётся
	опцией 'define'. Кроме того, символы имён могут передаваться в
	|шаблоне| при помощи элемента "\i". Подробное описание формата
	значения данной опции приводится в справке по опции 'isfname'.
	
	Внимание: изменение значения данной опции может привести к нарушению
	распознавания переменных окружения. Например, если в значение опции
	включить символ "/", то при разборе "$HOME/.viminfo" возникнут
	проблемы. Вместо изменения значения данной опции следует рассмотреть
	возможность изменения опции 'iskeyword'.
	
						         *'iskeyword'* *'isk'*
'iskeyword' 'isk'	строка (по умолчанию в режиме Vim на MS-DOS и Win32:
					           "@,48-57,_,128-167,224-235"
				на других системах: "@,48-57,_,192-255"
				по умолчанию в режиме совместимости с Vi: 
				                   "@,48-57,_")
			местная по отношению к окну опция
			{Vi не имеет такой возможности}

	Ключевые слова используются во многих командах поиска и распознавания:
	"w", "*", "[i" и т.д.  Они также могут быть выражены элементом "\k" в
	|шаблоне|. Описание формата значения данной опции приводится в справке
	по опции 'isfname'. В программах на языке C можно использовать
	значение "a-z,A-Z,48-57,_,.,-,>".
	В файлах справки значение опции устанавливается таким образом, что в
	набор символов ключевых слов включаются все непробельные печатные
	символы, кроме '*', '"' и '|' (чтобы команда CTRL-] могла обеспечить
	переход к справке по ключевому слову).
	При включённой опции 'lisp' символ '-' всегда включается в набор
	символов, допустимых в ключевых словах.
	ЗАМЕЧАНИЕ: значение опции устанавливается равным принятому по
	умолчанию в режиме совместимости с Vi при включении опции 'compatible'
	и равным принятому по умолчанию в режиме Vim при отключении опции
	'compatible'.

						           *'isprint'* *'isp'*
'isprint' 'isp'		строка (по умолчанию в MS-DOS, Win32, OS/2 и 
                                на Macintosh: "@,~-255"; 
				на других системах: "@,161-255")
			глобальная опция
			{Vi не имеет такой возможности}
			
	Символы, входящие в набор, заданный данной опцией, отображаются на
	экране напрямую. В |шаблоне| они могут быть выражены при помощи
	элемента "\p". Символы в диапазоне от пробела (ASCII 32) до '~' (ASCII
	126) всегда отображаются на экране напрямую, даже если они не входят в
	список значений опции 'isprint' или явно исключены из набора. Описание
	формата значения данной опции содержится в справке по опции 'isfname'.

	Непечатные символы отображаются на экране при помощи пары символов:
	
		  0 -  31	"^@" - "^_"
		 32 - 126	всегда одиночные символы
		   127		"^?"
		128 - 159	"~@" - "~_"
		160 - 254	"| " - "|~"
		   255		"~?"

	Если кодировка символов, указанная в опции 'encoding', является
	кодировкой Unicode, то запрещённые байты в диапазоне от 128 до 255
	отображаются в виде <xx>, где xx это шестнадцатеричное значение байта.
	Если в значении опции 'display' содержится "uhex", то все непечатные
	символы отображаются в виде <xx>.
	Для подсветки непечатных символов используется группа NonText 
	(см. раздел справки |подсветка-NonText|).
	
	Мультибайтные символы со значением от 256 и более всегда считаются
	печатными. Данная опция описывает только символы в диапазоне до 255.
	Если символ является печатным, но не может быть отображён, поскольку
	отсутствует в текущем шрифте, то вместо него будет показан символ
	замены. 
	Непечатные символы Unicode и символы с нулевой шириной отображаются в
	виде <xxxx>. В редакторе Vim отсутствует опция для определения таких
	символов.

			       *'joinspaces'* *'js'* *'nojoinspaces'* *'nojs'*
'joinspaces' 'js'	переключатель (по умолчанию: включено)
			глобальная опция
			{Vi не имеет такой возможности}
			
	Опция (во включённом состоянии) позволяет вставлять два пробела после
	'.', '?' и '!' по команде склейки строк. Если опция 'cpoptions'
	включает флаг 'j', то два пробела вставляются только после 
	символа '.', а в остальных случаях вставляется только один пробел.
	ЗАМЕЧАНИЕ: Эта опция при включении опции 'compatible' будет
	автоматически включена.

							               *'key'*
'key'			строка (по умолчанию: "")
			местная по отношению к буферу опция
			{Vi не имеет такой возможности}

	Опция используется для хранения ключа (пароля) для шифрования и
	дешифрования текущего буфера. Подробнее см. раздел |шифрование|.
	Внимание: не следует изменять значение этой опции вручную, так как
	символы введённого пароля будут отображаться на экране и кто-то может
	их подсмотреть. Гораздо лучше использовать команду |:X|. Вместе с тем,
	вы вполне можете присваивать этой опции пустую строку: >
	
		:set key=
		
<	Получить значение данной опции по команде ":set key" или "echo &key"
	невозможно. Это сделано для защиты пароля от посторонних глаз, но в то
	же время это означает и то, что вы не сможете попросить Vim напомнить
	вам значение этой опции, после того как она была изменена. Будьте
	осторожны, чтобы не допустить опечаток при вводе пароля!

					             *'keymap'* *'kmp'* *E544*
'keymap' 'kmp'		строка (по умолчанию: "")
			местная по отношению к буферу опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+keymap|}

	Опция задаёт имя раскладки клавиатуры. См. также раздел справки
	|мультибайт-раскладка_клавиатуры|.
	Если в качестве значения данной опции будет использовано известное
	Vim имя раскладки клавиатуры, то в качестве побочного эффекта
	происходит установка значения опции 'iminsert' равным 1, что приводит
	к включению указанной раскладки. Кроме того, значение опции 'imsearch'
	также устанавливается равным 1, если до этого оно не было равно -1.

					                   *'keymodel'* *'km'*
'keymodel' 'km'		строка (по умолчанию: "")
			глобальная опция
			{Vi не имеет такой возможности}

	Опция содержит список слов, разделённых запятыми, которые используются
	для включения специальных возможностей кнопок. Допустимы следующие
	значения:

	   startsel	Нажатие специальных кнопок совместно с клавишей
			<Shift> приводит к началу выделения (в Визуальном
			режиме или в режиме Выделения, в зависимости от
			присутствия флага "key" в значении опции
			'selectmode').
	   stopsel	Нажатие специальной кнопки без клавиши <Shift>
			приводит к завершению режима выделения.
	

	В данном случае "специальными кнопками" называются кнопки перемещения
	курсора, <End>, <Home>, <PageUp> и <PageDown>.
	Значение опции 'keymodel' изменяется при выполнении команды |:behave|.

					                 *'keywordprg'* *'kp'*
'keywordprg' 'kp'	строка (по умолчанию: "man" или "man -s",  
				в DOS: ":help", в OS/2: "view /", 
				на VMS: "help")
			глобальная или местная по отношению к буферу опция 
			|глобальные-местные|
			{Vi не имеет такой возможности}

	Опция задаёт программу, которая вызывается по команде |K|. При разборе
	значения выполняется подстановка переменных окружения, как это описано
	в разделе |подстановка_переменных_окружения|. В качестве значения
	опции можно также использовать ":help", что позволяет обеспечить
	доступ к справочнику Vim (следует заметить, что в более ранних версиях
	команда "K" выполняла доступ к справочнику по умолчанию в тех случаях,
	когда в качестве глобального значения данной опции использовалась
	пустая строка, однако такое использование опции является устаревшим).

	При использовании значения "man" Vim автоматически выполняет перевод
	числа-аргумента, использованного с командой "K", в номер раздела
	системного справочника. То же самое относится и к значению "man -s": в
	данном случае "-s" будет удаляться, если число-аргумент не задано.
	О включении в значение опции пробелов и символов обратной косой черты
	см. в разделе |опции-обратная_косая|.

	Пример: >
	
		:set keywordprg=man\ -s
<	
	Эта опция не может быть изменена из |режимной_строки| или в
	|песочнице| по соображениям безопасности.

					    *'langmap'* *'lmap'* *E357* *E358*
'langmap' 'lmap'	строка (по умолчанию: "")
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+langmap|}

	Эта опция позволяет переключать клавиатуру в специальный языковой
	режим. При вводе текста в режиме Вставки символы вставляются напрямую.
	В режиме команд опция 'langmap' обеспечивает перевод символов к
	оригинальному значению. Это позволяет выполнять команды Обычного
	режима без переключения раскладки клавиатуры.
	Данная опция представляет собой полную противоположность опции
	'keymap', которая отвечает за раскладку в режиме Вставки.
	Опция работает только для 8-битных символов. Значение опции 'langmap'
	может быть задано с использованием мультибайтных символов, например
	в кодировке UTF-8, но при этом будут использоваться только младшие 
	8 бит каждого символа.

	Пример (для русского языка):		   *русская_раскладка_langmap*
>
	    :set langmap=ФИСВУАПРШОЛДЬТЩЗЙКЫЕГМЦЧНЯ;ABCDEFGHIJKLMNOPQRSTUVWXYZ,фисвуапршолдьтщзйкыегмцчня;abcdefghijklmnopqrstuvwxyz

<	Пример (меняет местами z и y в командах): >

	    :set langmap=zy,yz,ZY,YZ
<
	Значение опции 'langmap' представляет собой список парных
	компонентов, разделённых запятыми. Каждый компонент может быть задан в
	одном из двух допустимых форматов:

	1.  Список пар, в которых за исходным символом немедленно следует
	    значение, в которое должен быть переведён этот символ. Например:
	    "aA", "aAbBcC".
	2.  Список исходных символов, точка с запятой ';' и соответствующий
	    список символов, в которые должны быть переведены исходные
	    символы. Пример: "abc;ABC"
	    
	Пример: "aA,fgh;FGH,cCdDeE"

	Специальные символы должны предваряться символом обратной косой черты.
	К специальным символам относятся ";", "," и сам символ обратной косой.

	Возможности, предоставляемые данной опцией, позволяют вводить команды
	Vim без переключения между раскладками клавиатуры. Символы вашего
	языка будут восприниматься как обычные латинские символы в
	соответствии с таблицей, заданной в значении данной опции, в следующих
	случаях:

	 o в Обычном/Визуальном режиме (команды, имена буферов и регистров,
	   пользовательские привязки)
	 o в режиме Вставки/Замены: имена регистров после ввода CTRL-R
	 o в режиме Вставки/Замены: привязки
	 
	Символы, которые вводятся в режиме командной строки, никак не
	затрагиваются настройками данной опции. Обратите внимание, что
	значение данной опции может быть изменено в любой момент, что
	позволяет переключать раскладки между различными языками и
	кодировками. Чтобы не вводить значение данной опции каждый раз, когда
	в этом возникает необходимость, можно воспользоваться привязками.

					                   *'langmenu'* *'lm'*
'langmenu' 'lm'		строка (по умолчанию: "")
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностями |+menu| и |+multi_lang|}

        Опция задаёт язык, на котором будут отображаться меню. Её значением
	является имя файла перевода меню, который должен находиться в каталоге
	"lang" в пути, заданном в значении опции 'runtimepath': >
	
		"lang/menu_" . &langmenu . ".vim"
		
<	(без пробелов).  Например, чтобы использовать меню на русском языке,
	независимо от значения переменной окружения $LANG, воспользуйтесь
	следующей командой: >

		:set langmenu=ru_RU.KOI8-R
	
<	Если значением опции 'langmenu' является пустая строка, то
	используется значение переменной |v:lang|.

	Если переменной $LANG на вашей системе присвоено значение, отражающее
	выбор национального языка, но вы хотите использовать при работе с
	редактором английские меню, то этого можно добиться с помощью команды:
>
		:set langmenu=none
<	
	Эта опция должна быть задана до загрузки меню, включения определения
	типа файла или подсветки синтаксиса. После загрузки меню изменение
	значения этой опции не имеет эффекта, но вы можете выполнить следующие
	операции: >
	
		:source $VIMRUNTIME/delmenu.vim
		:set langmenu=de_DE.ISO_8859-1
		:source $VIMRUNTIME/menu.vim
<	
	Предупреждение: при этом все меню, определённые пользователем, будут
	удалены!

					                 *'laststatus'* *'ls'*
'laststatus' 'ls'	число (по умолчанию: 1)
			глобальная опция
			{Vi не имеет такой возможности}

	Значение этой опции влияет на обстоятельства, при которых в последнем
	окне будет отображаться строка состояния:

		0: строка состояния не отображается
		1: строка состояния отображается в том случае, когда имеется
		   хотя бы два окна
		2: строка состояния отображается всегда
		
	Пользоваться несколькими окнами удобнее, если строка состояния
	включена, но каждая строка состояния занимает экранную строку.
	См. |строка_состояния|.

			       *'lazyredraw'* *'lz'* *'nolazyredraw'* *'nolz'*
'lazyredraw' 'lz'	переключатель (по умолчанию: выключено)
			глобальная опция
			{Vi не имеет такой возможности}
			
	При включённой опции 'lazyredraw', экран не обновляется во время
	выполнения макросов, регистров и других команд, которые не вводятся
	непосредственно с клавиатуры. Кроме того, откладывается обновление
	заголовка окна. Для насильного обновления экрана используйте команду
	|:redraw|. 

			       *'linebreak'* *'lbr'* *'nolinebreak'* *'nolbr'*
'linebreak' 'lbr'	переключатель (по умолчанию: выключено)
			местная по отношению к окну опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+linebreak|}

	Если опция включена, то Vim будет переносить длинные строки на
	символе, который включён в значение опции 'breakat' вместо последнего
	символа, который умещается на экране. В отличие от опций 'wrapmargin'
	и 'textwidth' при переносе строки не происходит вставки символа <EOL>
	в файл, т.е. перенос затрагивает только отображение строки на экране,
	а не содержимое файла. Значение опции 'showbreak' может быть
	использовано для индикации перенесённых строк специальным символом,
	отображаемым в начале таких строк. Данная опция не используется при
	выключенной опции 'wrap' или включённой опции 'list'. 
	Обратите внимание, что количество пробелов, отображаемое на месте
	символов <Tab> после символа <EOL>, как правило, не соответствует
	истине.

						              *'lines'* *E593*
'lines'			число (по умолчанию: 24 или высота окна терминала)
			глобальная опция

	Количество строк, отображаемых на экране. 
	Обычно устанавливать значение этой опции вручную не требуется: это
	выполняется редактором автоматически при инициализации терминала. Если
	Vim запущен в режиме графического интерфейса или в окне с изменяемыми
	размерами, то изменение данной опции приводит к изменению размеров
	окна. Если вы желаете изменять размер только при работе с графическим
	интерфейсом, то соответствующую команду для изменения значения данной
	опции следует помещать в файле сценария запуска |gvimrc|. 
	
	Vim сам ограничивает количество строк в соответствии с доступным
	размером экрана. Чтобы получить максимально высокое окно, можно
	воспользоваться командой
>
	        :set lines=999
<       
	Если вы видите меньше строк, чем должно быть, проверьте значение опции
	'guiheadroom'.
	
	Если при изменении значения данной опции Vim окажется не в состоянии
	изменить физическое количество строк на экране, то это может привести
	к появлению мусора.

						         *'linespace'* *'lsp'*
'linespace' 'lsp'	число (по умолчанию: 0, 
			       1 в графическом интерфейсе Win32)
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в графическом интерфейсе}
			
	Опция задаёт количество пикселов, которые вставляются между строками.
	Данная настройка полезна в том случае, если шрифт использует полную
	высоту символа, из-за чего строки касаются друг друга. При
	использовании значений опции, отличных от нуля, появляется место для
	выполнения подчёркивания.

						           *'lisp'* *'nolisp'*
'lisp'			переключатель (по умолчанию: выключено)
			местная по отношению к буферу опция
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+lispindent|}

	Опция включает режим Lisp: При вводе <Enter> в режиме Вставки, отступ
	для следующей строки устанавливается в соответствии со стандартами
	языка Lisp. То же самое происходит и по командам "cc" и "S". Для
	включения данного режима также следует включить опцию 'autoindent'.
	Флаг 'p' в списке значений опции 'cpoptions' позволяет переключать
	метод вычисления отступа между Vi-совместимым и более качественным.
	См. также справку по опции 'lispwords'.
	Символ '-' включён в набор ключевых символов. Если значение опции
	'equalprg' не задано, то вместо вызова внешней программы при
	использовании оператора "=" применяется тот же самый алгоритм
	вычисления отступа строки.
	Данная опция не используется при включённой опции 'paste'.

	{Vi работает с этой опцией несколько иначе}

						          *'lispwords'* *'lw'*
'lispwords' 'lw'	строка (значение по умолчанию очень длинное)
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+lispindent|}

	Опция содержит список слов, влияющих на вычисление отступов в режиме
	Lisp. Слова разделяются запятыми.
	См. также |'lisp'|.

						           *'list'* *'nolist'*
'list'			переключатель (по умолчанию: выключено)
			местная по отношению к окну опция

	Опция включает режим Списка: символы табуляции отображаются в виде
	CTRL-I, конец строки отображается в виде $. Этот режим полезен для
	отображения различий между символами табуляции и пробелами и для
	наглядного отображения пробельных символов на хвосте строки.
	Обратите внимание, что данный режим влияет на режим форматирования
	текста (установленный при помощи опции 'textwidth' или 'wrapmargin'),
	если значение опции 'cpoptions' содержит флаг 'L'. Об изменении
	символов, которые используются для отображения табуляции в этом
	режиме, читайте в справке по опции 'listchars'.

						         *'listchars'* *'lcs'*
'listchars' 'lcs'	строка (по умолчанию: "eol:$")
			глобальная опция
			{Vi не имеет такой возможности}
			
	Опция позволяет задавать символы, которые используются в режиме списка
	'list'. Значение опции представляет собой список разделённых запятыми
	настроек.

	  eol:c		Символ, отображаемый в конце каждой строки. Если
			символ не задан, то конец строки в режиме списка не
			отображается.
	  tab:xy	Пара символов, которая используется для отображения
			символа табуляции. Первый символ используется один
			раз, второй символ повторяется до тех пор, пока не
			будет заполнено пространство, которое занято символом
			табуляции. Например, установка "tab:>-" позволяет
			отображать символ табуляции, который занимает четыре
			пробела, в виде ">---". Если не задано, то символ
			табуляции отображается в виде ^I.
	  trail:c	Символ, который используется для отображения хвостовых
			пробелов в конце строки. Если не задан, то
			хвостовые пробелы не отображаются.
	  extends:c	Символ, который отображается в последней колонке при
			выключенной опции 'wrap', если строка продолжается за
			пределами правой границы окна.
	  precedes:c	Символ, который отображается в первой колонке при
			выключенной опции 'wrap', если в строке имеются
			символы, расположенные за пределами левой границы
			экрана.

	Символы ':' и ',' не должны использоваться в качестве значений для
	данной опции. Если значением опции 'encoding' является "utf-8", то в
	качестве значений данной опции можно использовать символы UTF-8, в
	противном случае позволяется использовать только печатные символы.

	Примеры: >
	
	    :set lcs=tab:>-,trail:-
	    :set lcs=tab:>-,eol:<
	    :set lcs=extends:>,precedes:<
<	
	Для "eol", "extends" и "precedes" используется группа подсветки
	"NonText", а для "tab" и "trail" -- группа подсветки "SpecialKey".

			   *'lpl'* *'nolpl'* *'loadplugins'* *'noloadplugins'*
'loadplugins' 'lpl'	переключатель (по умолчанию: включено)
			глобальная опция
			{Vi не имеет такой возможности}

	Если данная опция включена, то при запуске редактора выполняется
	|загрузка_модулей|. Эта опция может быть отключена в сценарии запуска 
	редактора |vimrc| для предотвращения загрузки модулей.
	Обратите внимание, что данная опция также отключается, если редактор
	запускается с ключом командной строки "-u NONE" или "--noplugin"
	(см. |-u|, |--noplugin|).

						         *'magic'* *'nomagic'*
'magic'			переключатель (по умолчанию: включено)
			глобальная опция

	Опция изменяет специальные символы, которые используются в шаблонах
	поиска. См. |шаблон|.
	ЗАМЕЧАНИЕ: Во избежание проблем с переносимостью шаблонов старайтесь
	всегда держать данную опцию включённой. Выключение данной опции может
	понадобиться только при работе со старыми сценариями Vi. Во всех
	остальных ситуациях составляйте шаблоны в расчёте на то, что опция
	'magic' находится во включённом состоянии.

						            *'makeef'* *'mef'*
'makeef' 'mef'		строка (по умолчанию: "")
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+quickfix|}

	Опция задаёт имя файла ошибок для вывода команды |:make| 
	(см. |:make_makeprg|) и команды |:grep|.
	Если значением опции является пустая строка, то в качестве файла
	ошибок используется временный файл, автоматически создаваемый
	редактором. Если в имени файла присутствуют символы "##", то они
	заменяются неким числом, чтобы имя файла было уникальным. Это
	позволяет гарантировать, что команда ":make" не станет перезаписывать
	уже существующий файл.
	Данная опция НЕ используется при работе команды ":cf". Подробнее 
	см. справку по опции 'errorfile'. 
	При обработке значения опции выполняется подстановка переменных
	окружения, см. |подстановка_переменных_окружения|. Об использовании
	пробелов и символов обратной косой черты см. в разделе
	|опции-обратная_косая|.
	Эта опция не может быть изменена из |режимной_строки| или в
	|песочнице| по соображениям безопасности.

						            *'makeprg'* *'mp'*
'makeprg' 'mp'		строка (по умолчанию: "make", на VMS: "MMS")
			глобальная или местная по отношению к буферу опция 
			|глобальные-местные|
			{Vi не имеет такой возможности}

	Опция задаёт программу, которая используется при выполнении команды
	":make", см. |:make_makeprg|. Значение опции может содержать символы
	'%' и '#', которые используются так же, как и в командной строке.
	При обработке значения опции выполняется подстановка переменных
	окружения, см. |подстановка_переменных_окружения|. Об использовании
	пробелов и символов обратной косой черты см. в разделе
	|опции-обратная_косая|. Обратите внимание, что символ '|' должен
	экранироваться дважды: сначала для команды ":set", а затем при разборе
	самой команды. Например, при использовании программы-фильтра
	"myfilter", опция может быть задана примерно так: >

	    :set makeprg=gmake\ \\\|\ myfilter
<	
        Для включения аргументов в состав опции следует пользоваться
	последовательностью символов "$*". Эти символы включаются в значение в
	месте появления аргументов и могут быть использованы неоднократно.
	Например: >
	
	    :set makeprg=latex\ \\\\nonstopmode\ \\\\input\\{$*}
<
	Эта опция не может быть изменена из |режимной_строки| или в
	|песочнице| по соображениям безопасности.

						        *'matchpairs'* *'mps'*
'matchpairs' 'mps'	строка (по умолчанию: "(:),{:},[:]")
			местная по отношению к буферу опция
			{Vi не имеет такой возможности}

	Опция задаёт наборы парных символов, по которым команда |%| выполняет
	перемещения внутри текста. В текущей версии допускается использование
	только одиночных символов в каждой паре, а сами символы не должны
	совпадать друг с другом. Символы разделяются двоеточием, а пары
	отделяются друг от друга запятой. Например, чтобы включить в набор
	парных символов '<' и '>' (полезно для HTML): >
	
		:set mps+=<:>
<	
	Несколько более экзотический пример, который позволяет перемещаться
	между символами '=' и ';' в операторе присваивания в языках C и Java: 
>
		:au FileType c,cpp,java set mps+==:;
<
	Более продвинутый способ использования команды "%" предлагает модуль
	matchit.vim в каталоге $VIMRUNTIME/macros, см. |matchit-установка|.

						         *'matchtime'* *'mat'*
'matchtime' 'mat'	число (по умолчанию: 5)
			глобальная опция
			{Vi не имеет такой возможности}
			{возможность имеется в Nvi}

	Опция задаёт время, в десятых долях секунды, во время которого
	отображается парная скобка, при включённой опции 'showmatch'.
	Обратите внимание, что время задаётся не в миллисекундах, как
	большинство других опций, имеющих дело с временными интервалами, а в
	десятых долях секунды. Это сделано для совместимости с Nvi.

						      *'maxfuncdepth'* *'mfd'*
'maxfuncdepth' 'mfd'	число (по умолчанию: 100)
			глобальная опция
			{Vi не имеет такой возможности}

	Опция задаёт максимальное число вложений для вызовов пользовательских
	функций, что позволяет избежать бесконечной рекурсии. При
	использовании рекурсивной функции с большим числом вложений может
	понадобиться изменить значение 'maxfuncdepth', однако имейте в виду,
	что увеличение этого значения приводит к увеличению потребности
	редактора в объёме свободной памяти. См. также |:function|.

						*'maxmapdepth'* *'mmd'* *E223*
'maxmapdepth' 'mmd'	число (по умолчанию: 1000)
			глобальная опция
			{Vi не имеет такой возможности}

	Максимальное число выполнения привязок, при превышении которого
	привязка приводит к выдаче используемого символа. Опция позволяет
	избежать бесконечных привязок, вроде ":map x y" и ":map y x", однако
	она не влияет на привязки типа ":map g wg", поскольку в данном случае
	перед символом привязки используется другой символ, 'w'. См. также
	|привязки_кнопок|.

						             *'maxmem'* *'mm'*
'maxmem' 'mm'		число (по умолчанию: от 256 до 5120 (в зависимости от
			       системы) или половина доступной памяти)
			глобальная опция
			{Vi не имеет такой возможности}

	Максимальное количество памяти (в килобайтах), которое используется
	для одного буфера. При превышении заданного в значении данной опции
	ограничения происходит выделение дополнительной памяти за счёт
	освобождения памяти в других областях. Максимально возможное значение
	данной опции составляет 2000000, что соответствует работе без
	ограничения памяти. См. также справку по опции 'maxmemtot'.

						         *'maxmemtot'* *'mmt'*
'maxmemtot' 'mmt'	число (по умолчанию: от 2048 до 10240 (в зависимости
			       от системы) или половина доступной памяти)
			глобальная опция
			{Vi не имеет такой возможности}

	Максимальное количество памяти (в килобайтах), которое доступно для
	всех буферов вместе. Максимально возможное значение данной опции
	2000000, что соответствует работе без ограничения памяти. См. также
	справку по опции 'maxmem'.

						         *'menuitems'* *'mis'*
'menuitems' 'mis'	число (по умолчанию: 25)
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+menu|}

	Опция задаёт максимальное количество элементов в меню. Это значение
	используется в меню, которые создаются из списка элементов, например
	меню "Буферы". Изменение этой опции не имеет прямого эффекта, т.к.
	меню должно быть сначала обновлено.

				   *'modeline'* *'ml'* *'nomodeline'* *'noml'*
'modeline' 'ml'		переключатель (по умолчанию в режиме Vim: включено, 
				       в режиме совместимости с Vi: выключено)
			местная по отношению к буферу опция

						         *'modelines'* *'mls'*
'modelines' 'mls'	число (по умолчанию: 5)
			глобальная опция
			{Vi не имеет такой возможности}

	При включённой опции 'modeline' опция 'modelines' задаёт количество
	строк, которые проверяются на предмет наличия команд изменения
	значений опций. При выключенной опции 'modeline' или значении опции
	'modelines' равным нулю ни одна строка проверяться не будет. 
	См. |режимная_строка|.
	
	ЗАМЕЧАНИЕ: значение опции 'modeline' устанавливается равным принятому
	по умолчанию в режиме совместимости с Vi при включении опции
	'compatible' и равным принятому по умолчанию в режиме Vim при
	отключении опции 'compatible'.

			       *'modifiable'* *'ma'* *'nomodifiable'* *'noma'*
'modifiable' 'ma'	переключатель (по умолчанию: включено)
			местная по отношению к буферу опция
			{Vi не имеет такой возможности}		         *E21*
			
	В выключенном состоянии опция указывает, что содержимое буфера не
	может быть изменено. При этом также невозможно изменение значений
	опций 'fileformat' и 'fileencoding'.
	Опция может быть отключена при запуске Vim с помощью ключа командной
	строки |-M|.

				 *'modified'* *'mod'* *'nomodified'* *'nomod'*
'modified' 'mod'	переключатель (по умолчанию: выключено)
			местная по отношению к буферу опция
			{Vi не имеет такой возможности}
			
	При включённом состоянии данной опции буфер считается изменённым.
	Опция включается автоматически в следующих случаях:

	1. При внесении изменений в текст по сравнению с моментом выполнения
	   последней операции записи. При выполнении |отмены| команды для
	   возврата к первоначальному варианту текста опция выключается.
	   Однако, отмена изменений, внесённых до момента последней записи
	   буфера, приводит к повторному включению данной опции, поскольку
	   текст в буфере в этом случае будет отличаться от сохранённого
	   варианта.
	2. При изменении значения опции 'fileformat' или 'fileencoding' по
	   сравнению с первоначальным значением, которое было установлено при
	   чтении файла или в момент последнего сохранения буфера на диск.
	   Команда ":set nomodified" приводит к изменению первоначальных
	   значений этих опций на текущие с одновременным выключением опции
	   'modified'.
	
	Если значением опции 'buftype' является строка "nowrite" или "nofile",
	то значение данной опции будет игнорироваться (хотя оно и может быть
	изменено).

						           *'more'* *'nomore'*
'more'			переключатель (по умолчанию в режиме Vim: включено, 
				       в режиме совместимости с Vi: выключено)
			глобальная опция
			{Vi не имеет такой возможности}

	Вывод длинных списков на экран может быть приостановлен, если данная
	опция находится во включённом состоянии. При этом на экран выводится
	сообщение |продолжение_следует|. Если опция выключена, то вывод
	выполняется без остановок.
	ЗАМЕЧАНИЕ: значение опции устанавливается равным принятому по
	умолчанию в режиме совместимости с Vi при включении опции 'compatible'
	и равным принятому по умолчанию в режиме Vim при отключении опции
	'compatible'.

						              *'mouse'* *E538*
'mouse'			строка (по умолчанию: "", "a" в режиме графического
				интерфейса, в MS-DOS и Win32)
			глобальная опция
			{Vi не имеет такой возможности}

	Опция используется для включения поддержки мыши и работает только на
	некоторых терминалах (xterm, MS-DOS, Win32 (см. |win32-мышь|), qnx
	pterm, консоль Linux с gpm). Подробнее об использовании мыши в
	графическом интерфейсе см. |графический_интерфейс-мышь|. 

	Поддержка мыши может быть включена для различных режимов:

		n	Обычный режим
		v	Визуальный режим
		i	режим Вставки
		c	режим Командной строки
		h	все вышеперечисленные режимы при редактировании файла
			справки
		a	все вышеперечисленные режимы
		r	для приглашений |нажмите-enter| и
			|продолжение_следует|
		A	автоматическое выделение в Визуальном режиме

	Как правило мышь включается для всех четырёх режимов при помощи
	команды >

		:set mouse=a
<	
	Мышь в графическом интерфейсе может быть использована для безрежимного
	выделения даже если она выключена в данной опции. При этом перемещения
	текстового курсора не происходит.

	См. |использование_мыши|, а также справку по опции 'clipboard'.

	Замечание: при включении мыши на терминале операции копирования и
	вклейки текста будут использовать регистр "*, если Vim имеет доступ к
	серверу X. В этом случае, чтобы использовать мышь в стиле xterm,
	необходимо одновременно с нажатием кнопок мыши удерживать кнопку
	<shift> на клавиатуре. См. справку по опции 'clipboard'.

		       *'mousefocus'* *'mousef'* *'nomousefocus'* *'nomousef'*
'mousefocus' 'mousef'	переключатель (по умолчанию: выключено)
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только при работе в графическом интерфейсе}

	Опция позволяет автоматически активировать окно, в котором находится
	курсор мыши. При изменении раскроя окон или смещении фокуса активного
	окна каким-либо другим способом, курсор мыши перемещается в активное
	окно. По умолчанию данная опция выключена, поскольку при использовании
	меню фокус активного окна может быть нечаянно изменён, если курсор
	мыши переходит при этом в другое окно, что не всегда желательно.

			         *'mousehide'* *'mh'* *'nomousehide'* *'nomh'*
'mousehide' 'mh'	переключатель (по умолчанию: включено)
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только при работе в графическом интерфейсе}

	Опция позволяет убирать курсор мыши с экрана во время ввода символов с
	клавиатуры. При перемещении мыши курсор восстанавливается на экране.

						     *'mousemodel'* *'mousem'*
'mousemodel' 'mousem'	строка (по умолчанию "extend", 
			        на MS-DOS и Win32: "popup")
			глобальная опция
			{Vi не имеет такой возможности}

	Опция задаёт модель мыши. Значение опции в основном соответствует
	действиям, которые производятся при нажатии правой кнопки мыши:

	   extend	Правая кнопка мыши используется для расширения
			выделенного фрагмента текста. Именно так мышь работает
			в xterm.
	   popup	При нажатии правой кнопки мыши вызывается контекстное
			меню. Для расширения выделенного фрагмента текста
			используется совместное нажатие левой кнопки мыши и
			кнопки <Shift> на клавиатуре. Таким образом мышь
			работает в Microsoft Windows.
	   popup_setpos То же, что и "popup", но при этом курсор перемещается
			в позицию, где произошло нажатие кнопки мыши. При этом
			выбранная операция применяется к выбранному объекту.
			Если нажатие кнопки мыши происходит внутри выделенного
			фрагмента, то курсор не перемещается, а операция
			применяется к этому фрагменту. Это, конечно же,
			подразумевает, что при нажатии правой кнопки мыши за
			пределами выделенного фрагмента происходит выход из
			Визуального режима.

	Обзор действий, которые выполняются при нажатии кнопок мыши в
	различных моделях:

	мышь			extend			popup(_setpos) ~
	нажатие левой кнопки	перемещение курсора	перемещение курсора
	перемещение с нажатой	
	левой кнопкой           начало выделения	начало выделения
	нажатие левой кнопки
	совместно с <shift>     поиск слова             расширение выделения
	нажатие правой кнопки   расширение выделения    вызов контекстного
	                                                меню (с перемещением
							курсора)
	перемещение с нажатой
	правой кнопкой          расширение выделения    -
	нажатие средней кнопки  вклейка текста          вклейка текста

        При использовании модели "popup" нажатие правой кнопки мыши приводит к
	вызову контекстного меню. Контекстное меню должно быть заранее
	определено, как это описано в разделе |контекстное_меню|.

	Обратите внимание, что привязки позволяют выполнить дальнейшую
	настройку значений кнопок мыши, см. раздел справки
	|графический_интерфейс-мышь-привязки|. Однако, привязки НЕ
	используются для безрежимного выделения (поскольку это обрабатывается
	непосредственно процедурами графического интерфейса).

	Значение опции 'mousemodel' изменяется при выполнении команды
	|:behave|.

					      *'mouseshape'* *'mouses'* *E547*
'mouseshape' 'mouses'	строка (по умолчанию: "i:beam,r:beam,s:updown,
                                sd:cross,m:no,ml:up-arrow,v:rightup-arrow"
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+mouseshape|}

	Опция задаёт внешний вид курсора мыши в различных режимах. Значением
	опции является список парных элементов, разделённых запятыми, похожий
	на значение опции 'guicursor'. Каждый элемент состоит из списка
	режимов/позиций и списка аргументов:

		список_режимов:внешний_вид,список_режимов:внешний_вид,..

	Список режим составляется из нижеследующих режимов и позиций, которые
	разделяются дефисом:

			В обычном окне: ~
			
		n	Обычный режим
		v       Визуальный режим
		ve	Визуальный режим при значении опции 'selection' равном
		        "exclusive" (то же, что и 'v', если не задано)
		o	Режим ожидания ввода оператора
		i	Режим Вставки
		r	Режим Замены

			В остальных местах: ~

		c	Добавление в командной строке
		ci	Вставка в командной строке
		cr	Замена в командной строке
		m	При выводе приглашений |нажмите-enter| и
			|продолжение_следует|
		ml	То же, но при нахождении курсора в последней строке
		e	В любом режиме, если курсор находится снизу от
			последнего окна
		s	В любом режиме, если курсор находится на строке
			состояния
		sd	В любом режиме, во время перемещения строки состояния
		vs	В любом режиме, если курсор находится на вертикальном
			разделителе окон
		vd	В любом режиме, во время перемещения вертикального
			разделителя окон
		a	В любой позиции

	Внешний вид курсор может быть задан одним из нижеследующих значений:
	
	платформа   имя		    внешний вид ~
	w x	    arrow	    Обычный курсор мыши
	w x	    blank	    Курсор не отображается (осторожно!)
	w x	    beam	    Текстовый I-курсор
	w x	    updown	    Стрелки вверх-вниз
	w x	    leftright	    Стрелки влево-вправо
	w x	    busy	    Курсор, отображающий занятость системы
	w x	    no		    Курсор, отображающий отсутствие ввода
	  x	    udsizing	    Курсор изменения вертикальных размеров
	  x	    lrsizing	    Курсор изменения горизонтальных размеров
	  x	    crosshair	    Курсор, напоминающий большое тонкое
					перекрестие +
	  x	    hand1	    Чёрная рука
	  x	    hand2	    Белая рука
	  x	    pencil	    Карандаш
	  x	    question	    Большой знак вопроса ?
	  x	    rightup-arrow   Стрелка вправо вверх
	w x	    up-arrow	    Стрелка вверх
	  x	    <число>	    любой курсор X11 по номеру (см.
					X11/cursorfont.h)

	В колонке "платформа" 'w' указывает, что данный внешний вид курсора
	доступен в Win32, а 'x' указывает, что внешний вид доступен в X11.

	Во всех остальных режимах, не указанных выше, используется обычный
	курсор мыши. Если заданный внешний вид не доступен, то также
	используется обычный курсор.
	
	Например, команда >
	
		:set mouseshape=s:udsizing,m:no
<	
	заставляет курсор мыши принимать форму курсора изменения вертикальных
	размеров над строками состояния и форму курсора отсутствия ввода при
	выводе приглашения |нажмите-enter| (поскольку нажатие мыши в данном
	состоянии не имеет никакого эффекта).

						      *'mousetime'* *'mouset'*
'mousetime' 'mouset'	число (по умолчанию: 500)
			глобальная опция
			{Vi не имеет такой возможности}

	Опция применяется только в режиме графического интерфейса, на MS-DOS,
	Win32 и в Unix xterm. Она задаёт максимальный интервал времени в
	миллисекундах между двумя нажатиями кнопки мыши, в течение которого
	второе нажатие мыши будет фиксироваться как двойное нажатие.

							  *'nrformats'* *'nf'*
'nrformats' 'nf'	строка (по умолчанию: "octal,hex")
			местная по отношению к буферу опция
			{Vi не имеет такой возможности}

	Опция определяет систему счисления, которую Vim будет использовать при
	выполнении команд CTRL-X и CTRL-A для добавления и вычитания;
	подробнее об этих командах можно прочитать в разделе справочника
	|CTRL-A|.

	alpha	Если включено в значение опции, то Vim будет увеличивать и
		уменьшать соответствующие одиночные алфавитные символы. Это
		может быть полезно для списков, которые используют алфавитные
		указатели, например a), b) и т.д.

	octal	Если включено в значение опции, то Vim будет рассматривать
		числа, начинающиеся с нуля, как восьмеричные. Например:
		применение команды CTRL-A к строке "007" приводит к получению
		строки "010".
		
	hex	Если включено в значение опции, то числа, начинающиеся с "0x"
		или "0X" будут рассматриваться редактором в качестве
		шестнадцатеричных. Например: применение команды CTRL-X к
		строке "0x100" приводит к получению строки "0x0ff".

	Числа, которые начинаются с цифры в диапазоне от 1 до 9 всегда
	считаются десятичными. То же самое происходит и в том случае, когда
	число не распознаётся в качестве восьмеричного или шестнадцатеричного.

				       *'number'* *'nu'* *'nonumber'* *'nonu'*
'number' 'nu'		переключатель (по умолчанию: выключено)
			местная по отношению к окну опция

	Опция позволяет выводить перед каждой строкой её порядковый номер.
	Если в значении опции 'cpoptions' отсутствует флаг 'n', то длинные
	перенесённые строки не будут использовать колонку нумерации строк для
	вывода текста (так происходит по умолчанию, если опция 'compatible'
	выключена). Если длинная перенесённая строка не начинается с первого
	символа, то перед номером строки отображаются знаки '-'.
	О настройке подсветки номера строки см. раздел справки
	|подсветка-LineNr|.
	
					         *'osfiletype'* *'oft'* *E366*
'osfiletype' 'oft'	строка (по умолчанию на RISC-OS: "Text",
				в остальных случаях: "")
			местная по отношению к буферу опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+osfiletype|}

	На некоторых операционных системах сохраняется дополнительная
	информация о файлах, помимо имени, времени создания и прав доступа.
	Данная опция может содержать такого рода информацию, в зависимости от
	используемой операционной системы. Значение этой опции как правило
	изменяется при загрузке файла в редактор и используется для сохранения
	типа файла при записи.
	Данная опция может оказывать влияние на поиск соответствий шаблонам в
	автокомандах, см. |автокоманды-тип_файла_в_разных_системах|.

						       *'paragraphs'* *'para'*
'paragraphs' 'para'	строка (по умолчанию: "IPLPPPQPP LIpplpipbp")
			глобальная опция
			
	Опция задаёт макросы nroff для отбивки параграфов. Каждый макрос
	представляет собой пару символов (см. |перемещения-по_объектам|).

						         *'paste'* *'nopaste'*
'paste'			переключатель (по умолчанию: выключено)
			глобальная опция
			{Vi не имеет такой возможности}

	Опция позволяет включать режим Вклейки текста. Этот режим оказывается
	полезным, если вам необходимо скопировать или вырезать фрагмент текста
	из одного приложения и вклеить его в Vim. Включение данной опции
	позволяет избежать некоторых непредусмотренных последствий.
	Включение этой опции полезно при использовании Vim на тех терминалах,
	которые не позволяют редактору различать вклеенный текст и текст
	набранный с клавиатуры. В режиме графического интерфейса Vim
	самостоятельно определяет, когда происходит вклейка текста, и как
	правило сам способен выполнить эту операцию правильно без изменения
	значения опции 'paste'. То же самое можно сказать и о тех терминалах,
	на которых Vim сам обрабатывает нажатие кнопок мыши.

	При включении опции 'paste' (в том числе в тех случаях, когда данная
	опция уже находилась во включённом состоянии), происходят следующие
	вещи:

		- отключаются привязки для режимов Вставки и Командной строки
		- отключаются сокращения
		- значение опции 'textwidth' устанавливается равным 0
		- значение опции 'wrapmargin' устанавливается равным 0 
		- опция 'autoindent' выключается
		- опция 'smartindent' выключается
		- значение опции 'softtabstop' устанавливается равным 0
		- опция 'revins' выключается
		- опция 'ruler' выключается
		- опция 'showmatch' выключается
		- опция 'formatoptions' используется таким образом, как если
		  бы её значением была пустая строка

	Нижеперечисленные опции сохраняют своё значение, но не оказывают
	влияния:

		- 'lisp'
		- 'indentexpr'
		- 'cindent'
			
	ЗАМЕЧАНИЕ: Если при включённой опции 'paste' начать редактировать
	новый файл, то автокоманды и настройки режимной строки могут изменить
	значения вышеперечисленных опций, что может впоследствии привести к
	проблемам. В таких случаях не повредит снова включить опцию 'paste'.
	При отключении опции 'paste' упомянутые выше опции восстанавливают
	свои значения на момент перед включением опции 'paste'. Отключение уже
	выключенной опции 'paste' не оказывает никакого влияния. Поскольку при
	включённой опции 'paste' привязки не работают, для настройки
	переключения состояния опции 'paste' по какой-либо кнопке следует
	пользоваться опцией 'pastetoggle'.

						        *'pastetoggle'* *'pt'*
'pastetoggle' 'pt'	строка (по умолчанию: "")
			глобальная опция
			{Vi не имеет такой возможности}

	Значение опции, если оно не является пустой строкой, задаёт
	последовательность кнопок, которая переключает значение опции 'paste'.
	Установка значения данной опции аналогична применению команды >
	
	    :map {кнопки} :set invpaste<CR>
	    
<	Здесь {кнопки} являются значением опции 'pastetoggle'.
	Различие между использованием опции и применением указанной выше
	команды заключается в том, что опция будет работать даже в том случае,
	когда включена опция 'paste'. Последовательность кнопок, заданная в
	данной опции, будет работать как в Обычном режиме, так и в режиме
	Вставки, но не в режиме Командной строки.
	Поскольку привязки проверяются в первую очередь, они могут
	переопределять значение опции 'pastetoggle'. Однако, при включённой
	опции 'paste' привязки игнорируются в режиме Вставки, поэтому возможно
	выполнение следующих команд: >

	    :map <F10> :set paste<CR>
	    :map <F11> :set nopaste<CR>
	    :imap <F10> <C-O>:set paste<CR>
	    :imap <F11> <nop>
	    :set pastetoggle=<F11>
	    
<	Приведённые команды позволяют включать режим Вклейки по нажатию <F10>
	и прекращать его по нажатию <F11>. Обратите внимание, что ввод <F10> в
	режиме вклейки приводит к вставке "<F10>" в текст, поскольку в режиме
	Вклейки все символы вставляются в текст как есть, за исключением
	последовательности, заданной в значении опции 'pastetoggle'.

						         *'pex'* *'patchexpr'*
'patchexpr' 'pex'	строка (по умолчанию: "")
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+diff|}

	Опция задаёт выражение, которое вычисляется для применения заплатки к
	файлу и создания на её основе новой версии файла. См. раздел справки
	|различия-patchexpr|.

						   *'patchmode'* *'pm'* *E206*
'patchmode' 'pm'	строка (по умолчанию: "")
			глобальная опция
			{Vi не имеет такой возможности}

	Если значение опции не является пустой строкой, то Vim сохраняет
	наиболее старую версию файла. Это может быть полезно, если Vim
	используется для исправления файлов в наборе исходных текстов
	программы для сохранения оригинальных вариантов файлов в
	неприкосновенности. Копия оригинала сохраняется только когда запись
	файла осуществляется впервые. Имя оригинальной копии файла
	представляет собой имя файла с добавлением окончания, заданного
	значением опции 'patchmode'.  Значение данной опции должно начинаться
	с точки, например можно использовать строку вроде ".orig". Чтобы
	описанный процесс создания копии оригинала мог быть реализован,
	значение опции 'backupdir' не должно быть пустой строкой (необходимо
	обеспечить возможность создания резервной копии файла, поскольку
	именно резервная копия переименовывается в файл, содержащий
	оригинальную версию, после успешной записи новой версии файла). Если
	резервная копия файла не существует, то будет создан пустой файл.
	Копия оригинального файла не создаётся, если имя соответствует
	шаблону, заданному значением опции 'backupskip'. При использовании
	'patchmode' для сжатых файлов указанное в значении данной опции
	расширение добавляется в конце файла (например, "file.gz.orig"),
	поэтому данный файл не всегда может быть правильно опознан системой
	как сжатый файл.
	
					  *'path'* *'pa'* *E343* *E345* *E347*
					
'path' 'pa'		строка (по умолчанию в Unix:   ".,/usr/include,,"
				   на OS/2:	       ".,/emx/include,,"
				   на других системах: ".,,")
			глобальная или местная по отношению к буферу опция 
			|глобальные-местные|
			{Vi не имеет такой возможности}

	Значением данной опции является список каталогов, в которых
	осуществляется поиск при выполнении |gf|, [f, ]f, ^Wf, |:find| и
	других команд, если соответствующий файл имеет относительный путь
	(т.е. путь не начинается с символа '/'). Каталоги, перечисленные в
	значении опции 'path' могут быть иметь как относительные, так и
	абсолютные пути. 

	- Имена каталогов отделяются запятыми: >
    
		:set path=.,/usr/local/include,/usr/include
<	
	- Для обеспечения обратной совместимости с версией 3.0 для разделения
	  имён каталогов также могут быть использованы пробелы. Чтобы включить
	  пробел в имя каталога, его следует экранировать при помощи символа
	  обратной косой черты, которую в сою очередь также следует
	  экранировать: >

		:set path=.,/dir/with\\\ space

<	- Для включения в имя каталога запятой, её следует предварять символом
	  обратной косой черты: >

		:set path=.,/dir/with\\,comma

<	- Для выполнения поиска относительно каталога, в котором находится
	  текущий файл, используйте точку: >

		:set path=.

<	- Для выполнения поиска в текущем каталоге используйте пустую строку,
	  заключённую между двумя запятыми: >

		:set path=,,

<	- Имя каталога может заканчиваться на ':' или '/'.

	- При изменении значения опции выполняется подстановка переменных
	  окружения, см. |подстановка_переменных_окружения|.

	- Модуль |netrw.vim| позволяет в качестве путей использовать URL.
	  Например, при добавлении к значению опции "http://www.vim.org",
	  можно будет выполнять команду ":find index.html".
	  
	- Организация нисходящего и восходящего поиска в дереве каталогов
	  выполняется следующим образом:

	  1) "*" соответствует любой последовательности символов, например: >
	  
		:set path=/usr/include/*
<	     
	     соответствует всем подкаталогам в /usr/include, исключая сам
	     каталог /usr/include.
	      >
		:set path=/usr/*c
		
<	     этой настройке соответствуют в частности каталоги /usr/doc и
	     /usr/src.

	  2) "**" соответствует поддереву, которое может содержать до 100
	     каталогов. Например: >

		:set path=/home/user_x/src/**
		
<	     соответствует всему поддереву каталогов, расположенных в
	     "/home/usr_x/src".

	  3) Если путь заканчивается символом ';', то этот путь является
	     отправным для восходящего поиска.

	  Дополнительная информация и правила синтаксиса для задания путей
	  поиска файлов приводится в разделе справочника |файл-поиск|.
	  {доступно только в том случае, если Vim скомпилирован с особенностью
	  |+path_extra|}
	  
	- Следует быть аккуратным с символами '\'. Чтобы получить в значении
	  опции символ обратной косой, необходимо набирать два таких символа:
	  >
		:set path=.,c:\\include
		
<	  либо использовать вместо него символ '/': >
		:set path=.,c:/include

<	Не забывайте указывать в качестве одного из значений ".", иначе вы не
	сможете искать файлы в том же каталоге, что и текущий файл!
	Максимальная длина пути ограничивается операционной системой и, как
	правило, составляет 256 или 1024 символа.
	Чтобы проверить, все ли включённые файлы найдены в каталогах, заданных
	в значении опции 'path', используйте команду |:checkpath|.
	При добавлении или удалении каталогов лучше всего использовать команды
	|:set+=| и |:set-=|, поскольку это позволяет избежать проблем, если
	новых версиях будет использовано иное значение по умолчанию. Для
	удаления текущего каталога используйте команду >

		:set path-=
		
<	Для добавления текущего каталога используйте команду >

		:set path+=

<	Для использования переменных окружения вам может потребоваться
	изменить значение разделителя компонентов пути. Например, для
	добавления значения переменной $INCL, в котором каталоги перечислены
	через символ точки с запятой, можно применить команду >

		:let &path = &path . "," . substitute($INCL, ';', ',', 'g')

<	Вы можете заменять символ ';' на ':' или любой другой разделитель,
	который используется в вашем случае. Обратите внимание, что если $INCL
	содержит запятые или пробелы, то такой приём не сработает.

		       *'preserveindent'* *'pi'* *'nopreserveindent'* *'nopi'*
'preserveindent' 'pi'	переключатель (по умолчанию: выключено)
			местная по отношению к буферу опция
			{Vi не имеет такой возможности}

	Опция позволяет по возможности максимально сохранять структуру
	существующих отступов при изменении отступа текущей строки. Обычно
	отступ заменяется серией символов табуляции, после которых следует
	необходимое количество пробелов (если опция 'expandtab' выключена, в
	противном случае используются только пробелы). При включении данной
	опции при создании отступа будет сохраняться максимально возможное
	количество существующих символов, а дополнительные символы табуляции
	или пробелы добавляются при необходимости.
	ЗАМЕЧАНИЕ: При использовании команды ">>" несколько раз в результате
	отступ может состоять из сочетания пробелов и символов табуляции, что
	не всегда может быть желательно.
	ЗАМЕЧАНИЕ: Опция 'preserveindent' отключается при включении опции
	'compatible'. См. также справку по опции 'copyindent'.
	Для замены пробелов на символы табуляции используйте команду |:retab|.

					             *'previewheight'* *'pvh'*
'previewheight' 'pvh'	число (по умолчанию: 12)
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностями |+windows| и |+quickfix|}

	Опция задаёт высоту окна предварительного просмотра по умолчанию. Её
	значение используется при выполнении |:ptag| и ряда других команд.
	Кроме того, значение опции используется при выполнении команды
	|CTRL-W_}| без явно указанного числа.

					 *'previewwindow'* *'nopreviewwindow'*
					              *'pvw'* *'nopvw'* *E590*
'previewwindow' 'pvw'	переключатель (по умолчанию: выключено)
			местная по отношению к окну опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностями |+windows| и |+quickfix|}

	Опция определяет, что данное окно является окном предварительного
	просмотра. Данная опция может быть включена только у одного окна.
	Обычно значение этой опции изменяется не напрямую, а при помощи команд
	|:ptag|, |:pedit| и т.д.

						      *'printdevice'* *'pdev'*
'printdevice' 'pdev'	строка (по умолчанию: пустая строка)
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+printer|}

	Опция задаёт название принтера, на который производится печать при
	использовании команды |:hardcopy| с восклицательным знаком (!),
	позволяющим пропустить окно выбора принтера. В Win32 имя принтера
	должно быть задано в точности так же, как оно представлено в
	стандартном окне выбора принтера.
	Если значением данной опции является пустая строка, то Vim будет
	использовать для выполнения команды ":hardcopy!" принтер, выбранный в
	системе в качестве основного.

					     *'printencoding'* *'penc'* *E620*
'printencoding' 'penc'	строка (по умолчанию: пустая строка, за исключением:
				 	      Windows, OS/2: cp1252,
					      Macintosh: mac-roman,
					      VMS: dec-mcs,
					      HPUX: hp-roman8,
					      EBCDIC: ebcdic-uk)
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностями |+printer| и |+postscript|}

	Опция задаёт кодировку символов, используемую при печати документа из
	Vim. Её значение указывает на файл с таблицей кодировки, который
	должен быть помещён в каталог "print" в одном из каталогов, указанных
	в значении опции 'runtimepath'.

	Эта опция может принимать любое значение, описанное в разделе
	справочника |кодировки-имена|. Все известные имена автоматически
	приводятся к стандартным именам кодировок Vim, как об этом подробно
	излагается в справке по опции 'encoding'. Имена кодировок, которые не
	могут быть распознаны Vim, приводятся к нижнему регистру символов с
	заменой всех символов подчёркивания на дефисы ('-').

	Если значением опции 'printencoding' является пустая строка или Vim не
	может найти файл с таблицей кодировки, то для поиска этого файла будет
	использовано значение опции 'encoding' (если Vim скомпилирован с
	особенностью |+multi_byte| и значение этой опции соответствует
	8-битной кодировке).

	Если значение опции 'encoding' соответствует мультибайтной кодировке,
	то Vim попытается выполнить перевод символов в кодировке принтера при
	печати (если значением 'printencoding' является пустая строка, то
	будет выполняться преобразование в кодировку latin1).
	Перевод в кодировку, отличную от latin1, требует, чтобы Vim был
	скомпилирован с особенностью |+iconv|. При невозможности выполнения
	преобразования символов в кодировку принтера, печать будет прервана.
	Все символы, которые не могут быть преобразованы в данную кодировку,
	заменяются символами перевёрнутого вопросительного знака.

	Для поддержки принятых на Mac, VMS, HPUX и EBCDIC кодировок по
	умолчанию вместе с Vim поставляется четыре соответствующих файла с
	таблицами кодировок. На платформах Windows и OS/2 по умолчанию
	используется кодовая страница 1252.

						       *'printexpr'* *'pexpr'*
'printexpr' 'pexpr'	строка (по умолчанию: см. ниже)
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностями |+printer| и |+postscript|}

	Опция содержит выражение, которое вычисляется при печати файла
	PostScript, который создаётся по команде ":hardcopy".
	Для хранения имени файла, созданного для отправки на печать,
	используется переменная |v:fname_in|.
	Аргументы команды ":hardcopy" хранятся в переменной |v:cmdarg|.
	Выражение должно содержать команду удаления файла после печати. При
	возникновении ошибки печати выражение должно возвращать отличное от
	нуля число, а если печать закончилась успешно, то должно возвращаться
	нулевое значение или пустая строка.
	В системах MS-Windows и VMS по умолчанию используется команда "lpr": >

	    system('lpr' . (&printdevice == '' ? '' : ' -P' . &printdevice)
		. ' ' . v:fname_in) . delete(v:fname_in) + v:shell_error
<
	В MS-Windows по умолчанию файл копируется на устройство печати,
	заданное при помощи опции 'printdevice': >

	    system('copy' . ' ' . v:fname_in . ' "' . &printdevice . '"')
			. delete(v:fname_in)
<
	На VMS по умолчанию происходит отправка файла на заданное устройство
	печати: >

	    system('print' . (&printdevice == '' ? '' : ' /queue=' .
			&printdevice) . ' ' . v:fname_in) . delete(v:fname_in)
<
	Чтобы избежать экранирования пробелов, при изменении данной опции
	лучше всего использовать специально написанную функцию. Например: >

		:set printexpr=PrintFile(v:fname_in)
		:function PrintFile(fname)
		:  call system("ghostview " . a:fname)
		:  call delete(a:fname)
		:  return v:shell_error
		:endfunc
	
<	Имейте в виду, что некоторые программы печати могут возвращать
	управление до того, как был прочитан файл для печати. Если этот файл
	будет удалён до завершения процесса печати, то он не сможет быть
	напечатан. Обычно в таких программах имеется возможность
	автоматического удаления файла после завершения печати.
								        *E365*
	Если вычисление выражения приводит к ошибке или выражение возвращает
	отличное от нуля значение, то Vim выводит сообщение об ошибке и
	удаляет соответствующий файл для печати. В значении этой опции на
	системах, отличных от MS-Windows, используется изменение переменной
	"v:shell_error", что приводит к возврату ненулевого значения при
	неуспешном вызове функции system().
	Значение этой опции не может быть изменено из |режимной_строки| или в
	|песочнице| по соображениям безопасности.

						  *'printfont'* *'pfn'* *E613*
'printfont' 'pfn'	строка (по умолчанию: "courier")
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+printer|}

	Опция служит для задания имени шрифта, который используется при печати
	документа по команде |:hardcopy|. Формат значения опции аналогичен
	формату значения опции 'guifont', но при этом может быть задан только
	один шрифт и невозможно использовать окно выбора шрифта с помощью
	"guifont=*".
	В версии Win32 с графическим интерфейсом опция позволяет задавать
	дополнительные параметры шрифта, как в случае с опцией 'guifont'.
	На других системах можно дополнительно задавать только размер шрифта,
	при помощи ":h11", где "11" это кегль шрифта в пунктах. Если размер
	шрифта не задан, то по умолчанию он принимается равным 10 пунктам.

						   *'printheader'* *'pheader'*
'printheader' 'pheader' строка (по умолчанию: "%<%f%h%m%=Page %N")
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+printer|}

	Опция задаёт формат заголовка страницы при выводе на печать при помощи
	команды |:hardcopy|. Значение опции задаётся аналогично формату опции
	'statusline'. Если Vim скомпилирован без особенности |+statusline|, то
	значение данной опции не учитывается, а страницы выводятся на печать
	с простым заголовком по умолчанию, в котором отображается номер
	страницы.

						     *'printoptions'* *'popt'*
'printoptions' 'popt'   строка (по умолчанию: "")
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+printer|}

	Опция представляет собой список разделённых запятыми компонентов,
	которые управляют процессом печати при помощи команды |:hardcopy|.

	  left:{размер}		левое поле (по умолчанию: 10pc)
	  right:{spec}		правое поле (по умолчанию: 5pc)
	  top:{spec}		верхнее поле (по умолчанию: 5pc)
	  bottom:{spec}		нижнее поле (по умолчанию: 5pc)
				В качестве {размера} используется число, за
				которым следует название единицы измерения:
				"in" (дюймы), "pt" (пункты, 1 пункт составляет
				1/72 дюйма), "mm" (миллиметры), "pc" (проценты
				от размера страницы).
				Несколько странный пример: >
				    left:2in,top:30pt,right:16mm,bottom:3pc
				    
<				Если указана неизвестная единица измерения, то
				сообщение об ошибке не выводится и будет
				использоваться значение по умолчанию.

	  header:{число}	Количество строк, которые должны быть отведены
				под заголовок. Поскольку заголовок занимает
				только одну строку, то при задании {числа} 2
				одна строка под заголовком будет пустой.
				Формат заголовка задаётся значением опции
				'printheader'.
	  header:0		Заголовок не выводится на печать.
	  header:2 (по умолч.)	Под заголовок отводится две строки.

	  syntax:n		Не использовать подсветку синтаксиса. Печать
				в это случае выполняется быстрее. Это полезно
				при выводе на печать больших файлов.
	  syntax:y		Использовать подсветку синтаксиса.
	  syntax:a (по умолч.)	Использовать подсветку синтаксиса, если
				принтер способен воспроизводить оттенки серого
				или цвет.

	  number:y		Включать номера строк при выводе документа на
				печать.
	  number:n (по умолч.)	Номера строк выключены.

	  wrap:y (по умолч.)	Переносить длинные строки.
	  wrap:n		Обрезать длинные строки.

	  duplex:off		Односторонняя печать.
	  duplex:long (по умолч.)
				Двухсторонняя печать, если это возможно.
				Страницы сшиваются по длинной стороне листа.
	  duplex:short		Двухсторонняя печать, если это возможно.
				Страницы сшиваются по короткой стороне листа.

	  collate:y (по умолч.)	Подбор страниц: 1 2 3, 1 2 3, 1 2 3
	  collate:n		Без подбора страниц: 1 1 1, 2 2 2, 3 3 3

	  jobsplit:n (по умолч.)
				Печать всех копий в одном задании для печати.
	  jobsplit:y		Печать каждой копии в отдельном задании для
				печати. Это полезно при дополнительной
				обработке файлов для последующей фальцовки.

	  portrait:y (по умолч.)
				Портретная ориентация.
	  portrait:n		Альбомная ориентация.
	  
							         *a4* *letter*
	  paper:A4 (по умолч.)	Размер бумаги: A4
	  paper:{размер}	Размер бумаги согласно таблице:
				
				{размер}    в сантиметрах     в дюймах ~
				
				10x14	    25.4  x 35.57    10    x 14
				A3	    29.7  x 42	     11.69 x 16.54
				A4	    21	  x 29.7      8.27 x 11.69
				A5	    14.8  x 21	      5.83 x  8.27
				B4	    25	  x 35.3     10.12 x 14.33
				B5	    17.6  x 25	      7.17 x 10.12
				executive   18.42 x 26.67     7.25 x 10.5
				folio	    21	  x 33	      8.27 x 13
				ledger	    43.13 x 27.96    17    x 11
				legal	    21.59 x 35.57     8.5  x 14
				letter	    21.59 x 27.96     8.5  x 11
				quarto	    21.59 x 27.5      8.5  x 10.83
				statement   13.97 x 21.59     5.5  x  8.5
				tabloid     27.96 x 43.13    11    x 17

	  formfeed:n (по умолч.)
				Символы протяжки бумаги (0x0c) считаются
				обычными печатными символами.
	  formfeed:y		Печатать строку, содержащую символ протяжки
				бумаги, в начале новой страницы.

	Все настройки, помеченные "(по умолч.)" используются, если они не
	заданы явно. Их значения используются не всегда, особенно если для
	настройки параметров печати применяется диалоговое окно.

	Пример: >

		:set printoptions=paper:letter,duplex:off
<
				   *'readonly'* *'ro'* *'noreadonly'* *'noro'*
'readonly' 'ro'		переключатель (по умолчанию: выключено)
			местная по отношению к буферу опция

	Если данная опция находится во включённом состоянии, то запись буфера
	может быть выполнена только при указании в команде записи флага '!',
	что позволяет предохранить файл от случайной перезаписи. Опция имеет
	включённое по умолчанию значение, если Vim запущен в режиме "только
	для чтения" ("vim -R") или при запуске редактора при помощи команды
	"view".
	{Vi не имеет такой возможности:} При выполнении команды ":view" для
	нового буфера опция 'readonly' включается автоматически. После
	выполнения команды "w!" опция 'readonly' для текущего буфера
	автоматически выключается.

						         *'remap'* *'noremap'*
'remap'			переключатель (по умолчанию: включено)
			глобальная опция
			
	Опция позволяет привязкам выполняться рекурсивно. Для одновременного
	отключения этой опции на время выполнения одной команды, можно
	использовать команду ":noremap[!]".

						                    *'report'*
'report'		число (по умолчанию: 2)
			глобальная опция

	Опция задаёт порог, при котором выводится отчёт о количестве
	изменённых строк. Если число изменённых строк превышает значение опции
	'report', то такой отчёт выводится после выполнения большинства
	команд, начинающихся с ":". Если вы желаете всегда видеть этот отчёт,
	то измените значение опции 'report' на 0.
	Для команды ":substitute" вместо количества строк используется
	количество произведённых замен в тексте.

			 *'restorescreen'* *'rs'* *'norestorescreen'* *'nors'*
'restorescreen' 'rs'	переключатель (по умолчанию: включено)
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в версии для консоли Windows 95/NT}
			
	Во включённом состоянии опция позволяет восстанавливать содержимое
	экрана при выходе из редактора или при выполнении внешних команд.

	На других системах, отличных от Windows, вы можете воспользоваться
	возможностью включения или выключения опций 't_ti' и 't_te' в файле
	.vimrc. Для того, чтобы отключить восстановление экрана, введите
	команду: >

		set t_ti= t_te=	
<
	Для включения восстановления содержимого экрана (в xterm) введите
	команду: >

		set t_ti=^[7^[[r^[[?47h t_te=^[[?47l^[8
<
	(Здесь ^[ это <Esc>, для ввода введите CTRL-V <Esc>)

				       *'revins'* *'ri'* *'norevins'* *'nori'*
'revins' 'ri'		переключатель (по умолчанию: выключено)
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+rightleft|}

	Опция переключает направление ввода символов в режиме Вставки. 
	См. также раздел справки "Ввод символов в обратном направлении"
	|вставка-справа_налево|. Данная опция может переключаться в режиме
	Вставки по команде CTRL-_, если включена опция 'allowrevins'.
	ЗАМЕЧАНИЕ: Данная опция выключается при включении опции 'compatible'
	или 'paste'.

				 *'rightleft'* *'rl'* *'norightleft'* *'norl'*
'rightleft' 'rl'	переключатель (по умолчанию: выключено)
			местная по отношению к окну опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+rightleft|}

	Во включённом состоянии опция приводит к изменению направления
	символов в строке на обратное, т.е. символы в файле отображаются на
	экране построчно справа налево. При помощи этой опции становится
	доступным редактирование файлов на языках с обратным направлением
	письма, таких как иврит или арабский. Опция включается для каждого
	окна отдельно, поэтому возможно редактирование текстов, включающих
	фрагменты на нескольких	языках с разным направлением письма, или
	просмотр одного и того же файла в разных режимах, что полезно в тех
	случаях, когда файл содержит смешанный текст как в том, так и в другом
	направлении (строки могут быть показаны в разных окнах с правильным
	направлением письма). См. также |rileft.txt|.

			 *'rightleftcmd'* *'rlc'* *'norightleftcmd'* *'norlc'*
'rightleftcmd' 'rlc'	строка (по умолчанию: "search")
			местная по отношению к окну опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+rightleft|}

	Каждое слово в значении данной опции позволяет использовать ввод
	символов справа налево для группы команд в соответствующей командной
	строке:

		search		команды "/" и "?"

	Эта опция полезна для таких языков, как иврит, арабский и фарси.
	Чтобы опция 'rightleftcmd' работала необходимо также включить опцию
	'rightleft'.

					 *'ruler'* *'ru'* *'noruler'* *'noru'*
'ruler' 'ru'		переключатель (по умолчанию: выключено)
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+cmdline_info|}

	Опция используется для включения "линейки", отображающей номер строки
	и колонки, в которой находится курсор. Если на экране достаточно
	места, то в правой части линейки отображается положение	отображаемого
	на экране фрагмента текста относительно общего размера файла:

		Наверху		Если видна первая строка файла
		Внизу		Если видна последняя строка файла
		Весь файл	Если видны первая и последняя строки файла
		45%		Позиция относительно общего размера файла

	Опция 'rulerformat', если её значение задано, может определять
	информацию, которая отображается на "линейке". Каждое окно имеет
	собственную линейку. Если в окне отображается строка состояния, то
	линейка будет показана на этой строке, в противном случае линейка
	отображается в последней строке экрана. Значение опции 'statusline',
	если оно задано, имеет приоритет над значениями опций 'ruler' и
	'rulerformat'. Если количество символов, отображаемых на экране,
	отличается от количества байтов в тексте (например, из-за символов
	табуляции или наличия мультибайтных символов в тексте), то на линейке
	отображаются как номер байта в строке текста, так и номер колонки
	экрана, разделённые символом дефиса.
	Пустая строка отображается на линейке как "0-1".
	В пустом буфере номер текущей строки также отображается в виде нуля:
	"0,0-1".
	Данная опция автоматически выключается при включении опции 'paste'.
	Если вы не хотите постоянно отображать линейку на экране, но вам
	необходимо выяснить где находится курсор в текущий момент,
	воспользуйтесь командой "g CTRL-G" |g_CTRL-G|.
	ЗАМЕЧАНИЕ: Эта опция отключается при включении опции 'compatible'.

						       *'rulerformat'* *'ruf'*
'rulerformat' 'ruf'	строка (по умолчанию: пустая строка)
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+statusline|}

	Эта опция, если её значение не является пустой строкой, определяет
	набор информации, которая показывается на линейке, отображаемой при
	помощи опции 'ruler'.
	Формат значения этой опции совпадает с используемым в опции
	'statusline'.
	Ширина линейки по умолчанию составляет 17 символов. Для создания
	линейки шириной в 15 символов, поместите "%15(" в начале значения
	опции и "%)" в конце. Например: >

		:set rulerformat=%15(%c%V\ %p%%%)
<
				            *'runtimepath'* *'rtp'* *vimfiles*
'runtimepath' 'rtp'	строка (по умолчанию:
					в Unix:   "$HOME/.vim,
						  $VIM/vimfiles,
						  $VIMRUNTIME,
						  $VIM/vimfiles/after,
						  $HOME/.vim/after"
					на Amiga: "home:vimfiles,
						  $VIM/vimfiles,
						  $VIMRUNTIME,
						  $VIM/vimfiles/after,
						  home:vimfiles/after"
					на PC, OS/2: "$HOME/vimfiles,
						  $VIM/vimfiles,
						  $VIMRUNTIME,
						  $VIM/vimfiles/after,
						  $HOME/vimfiles/after"
					на Macintosh: "$VIM:vimfiles,
						  $VIMRUNTIME,
						  $VIM:vimfiles:after"
					в RISC-OS: "Choices:vimfiles,
						  $VIMRUNTIME,
						  Choices:vimfiles/after"
					на VMS:   "sys$login:vimfiles,
						  $VIM/vimfiles,
						  $VIMRUNTIME,
						  $VIM/vimfiles/after,
						  sys$login:vimfiles/after"
			глобальная опция
			{Vi не имеет такой возможности}

	Опция определяет список каталогов, в которых Vim ищет файлы для своей
	рабочей среды:

	  filetype.vim	типы файлов по имени файла |новый_тип_файла|
	  scripts.vim	типы файлов по содержимому файла
	                |сценарии_нового_типа_файла|
	  colors/	файлы цветовых схем |:colorscheme|
	  compiler/	файлы поддержки компиляторов |:compiler|
	  doc/		файлы справочника |создание_справки|
	  ftplugin/	модули типов файла |написание_модулей_типа_файла|
	  indent/	сценарии создания отступов |отступы-выражения|
	  keymap/	файлы с раскладками клавиатуры
	                |мультибайт-раскладка_клавиатуры|
	  lang/		переводы меню |:menutrans|
	  menu.vim	меню для графического интерфейса |menu.vim|
	  plugin/	сценарии модулей |написать_свой_модуль|
	  print/	вспомогательные файлы для распечатки документов
	                |postscript-кодировка|
	  syntax/	файлы с правилами синтаксиса |свой_файл_синтаксиса|
	  tutor/	файлы учебника по Vim (vimtutor) |учебник|

	  а также другие файлы, для поиска которых используется команда
	  |:runtime|.

	Значения по умолчанию в большинстве систем выбраны таким образом,
	чтобы поиск выполнялся в пяти различных местах в системе:

	1. В домашнем каталоге пользователя, где удобно хранить личные
	   настройки.
	2. В общесистемном каталоге Vim, где могут храниться настройки,
	   заданные системным администратором.
	3. В каталогах, заданных значением переменной окружения $VIMRUNTIME, 
	   где хранятся файлы, распространяемые в составе Vim.
	   
					     *after-directory* *after-каталог*
	4. В каталоге "after" в общесистемном каталоге Vim. Этот каталог может
	   использоваться системным администратором для изменения или
	   добавления файлов, распространяемых в составе Vim (необходимость в
	   этом возникает редко).
	5. В каталоге "after" в домашнем каталоге пользователя. Этот каталог
	   используется отдельным пользователем для изменения или добавления
	   файлов, распространяемых в составе Vim (необходимость в этом
	   возникает редко).

	Обратите внимание, что в отличие от опции 'path', в значении данной
	опции не допускается использование масок вроде "**". Обычные маски
	допустимы, но они могут существенно снизить скорость поиска файлов
	рабочей среды. Для повышения производительности стремитесь
	использовать как можно меньше отдельных элементов в значении данной
	опции и избегайте масок.
	См. также |:runtime|.
	
	Пример: >
	
		:set runtimepath=~/vimruntime,/mygroup/vim,$VIMRUNTIME
<	
	Команда, приведённая выше, назначает в качестве каталогов для файлов
	рабочей среды прежде всего каталог "~/vimruntime" (где хранятся личные
	настройки пользователя), затем каталог "/mygroup/vim" (в котором
	хранятся настройки, которые совместно используются группой людей), а
	затем "$VIMRUNTIME" (где хранятся файлы рабочей среды,
	распространяемые в составе Vim).
	Как правило, $VIMRUNTIME всегда должно включаться в значение данной
	опции, чтобы Vim мог использовать файлы, распространяемые в составе
	редактора. Чтобы обеспечить поиск дополнительных файлов, помимо
	распространяемых в составе редактора, можно указать дополнительный
	каталог после компонента $VIMRUNTIME.
	Эта опция не может быть изменена из |режимной_строки| или в
	|песочнице| по соображениям безопасности.

						            *'scroll'* *'scr'*
'scroll' 'scr'		число (по умолчанию: половина высоты окна)
			местная по отношению к окну опция

	Число строк для прокрутки при помощи команд CTRL-U и CTRL-D. При
	изменении размера окна значение опции устанавливается равным половине
	высоты окна. При использовании команд CTRL-U и CTRL-D с указанием
	числа, заданный параметр используется в качестве нового значения опции
	'scroll'. Для сброса значения опции к принятому по умолчанию (половина
	высоты окна), используйте команду ":set scroll=0".
	{Vi: опция работает немного иначе. Вместо строк в файле используются
	экранные строки, что приводит к другим результатам при наличии длинных
	перенесённый строк}

			     *'scrollbind'* *'scb'* *'noscrollbind'* *'noscb'*
'scrollbind' 'scb'	переключатель (по умолчанию: выключено)
			местная по отношению к окну опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+scrollbind|}

	См. также |прокрутка-синхронная|. Если данная опция находится во
	включённом состоянии, то текущее окно прокручивается вместе с другими
	окнами, для которых эта опция также включена. Опция 'scrollbind'
	полезна при просмотре различий между двумя файлами, см. справку по
	опции 'diff'.
	Механизм работы данной опции определяется значением опции
	|'scrollopt'|.
	В большинстве случаев данная опция автоматически отключается при
	разделении окна для редактирования нового файла. В частности, по
	команде ":split файл" синхронная прокрутка отключается. Для сохранения
	синхронной прокрутки при редактировании нового файла используйте
	команду ":split | edit file".

						         *'scrolljump'* *'sj'*
'scrolljump' 'sj'	число (по умолчанию: 1)
			глобальная опция
			{Vi не имеет такой возможности}

	Опция задаёт минимальное количество строк для прокрутки в ситуации,
	когда курсор выходит за границу окна (например, по команде "j").
	Значение этой опции не используется для команд прокрутки (таких как
	CTRL-E, CTRL-D). Опция полезна для тонкой настройки в тех случаях,
	когда прокрутка на вашем терминале происходит слишком медленно.
	ЗАМЕЧАНИЕ: Значение данной опции автоматически изменяется на 1 при
	включении опции 'compatible'.

						          *'scrolloff'* *'so'*
'scrolloff' 'so'	число (по умолчанию: 0)
			глобальная опция
			{Vi не имеет такой возможности}

	Опция задаёт минимальное количество строк сверху и снизу от курсора,
	что позволяет отображать контекст строки, в которой находится курсор в
	данный момент. Если значением данной опции является большое значение
	(999), то строка, в которой находится курсор, будет всегда помещаться
	в центре экрана (за исключением строк в начале и конце файла, а также
	длинных перенесённых строк).
	Аналогичная опция для горизонтальной прокрутки: 'sidescrolloff'.
	ЗАМЕЧАНИЕ: Значение данной опции автоматически изменяется на 0 при
	включении опции 'compatible'.

						         *'scrollopt'* *'sbo'*
'scrollopt' 'sbo'	строка (по умолчанию: "ver,jump")
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+scrollbind|}

	Значением опции является список слов, разделённых запятыми, которые
	определяют поведении окон с включённой опцией 'scrollbind' при
	прокрутке.
	Допустимо использование следующих слов:

	    ver		Выполняется вертикальная синхронизация окон, для
			которых включена опция 'scrollbind'
	    hor		Выполняется горизонтальная синхронизация окон, для
			которых включена опция 'scrollbind'	    
	    jump	Определяет работу со смещением между двумя окнами с
			синхронной вертикальной прокруткой. Смещение
			представляет разницу между двумя первыми строками в
			синхронизированных окнах. При выполнении прокрутки в
			одном из окон с включённой опцией 'scrollbind', другое
			окно может быть прокручено в положение до начала или
			после конца буфера. При этом величина смещения не
			изменяется, так что при повторной прокрутке такого
			окна в обратном направлении Vim попытается
			восстановить необходимые положения текста в буферах
			относительно друг друга.
			При изменении текущего окна возможны два варианта
			работы с относительным смещением:
			1. При отсутствии слова "jump" в значении опции
			   'scrollopt', относительное смещение изменяется в
			   соответствии с положением прокрутки в новом текущем
			   окне. При возврате в предыдущее окно используется
			   новое значение смещения.
			2. При наличии слова "jump" в значении данной опции,
			   все окна прокручиваются так, чтобы сохранялось
			   относительное смещение, которое используется в том
			   числе и при перемещении между окнами.

	См. также |прокрутка-синхронная|.

						         *'sections'* *'sect'*
'sections' 'sect'	строка (по умолчанию: "SHNHH HUnhsh")
			глобальная опция
			
	Опция задаёт макросы nroff, которые используются для разделения
	разделов. Каждый макрос является набором из двух символов (см. также
	|перемещения-по_объектам|). Значение по умолчанию задаёт начала
	разделов в позиции следующих макросов nroff: ".SH", ".NH", ".H",
	".HU", ".nh" and ".sh".

						*'secure'* *'nosecure'* *E523*
'secure'		переключатель (по умолчанию: выключено)
			глобальная опция
			{Vi не имеет такой возможности}

	При включённом состоянии этой опции команды оболочки и записи не могут
	быть включены в файлы ".vimrc" и ".exrc" в текущем каталоге и
	отображаются команды привязок. Опцию следует выключать только если вы
	уверены, что это не приведёт к проблемам, или если опция 'exrc'
	выключена. На Unix данная опция используется только в том случае, если
	владелец файла ".vimrc" или ".exrc" отличается от пользователя, от
	имени которого исполняется редактор. Это может быть потенциально
	опасным, если система позволяет пользователям выполнять команду
	"chown". В таком случае лучше всего включить опцию 'secure' в конце
	файла ~/.vimrc.
	Значение этой опции не может быть изменено из |режимной_строки| или в
	|песочнице| по соображениям безопасности.

						         *'selection'* *'sel'*
'selection' 'sel'	строка (по умолчанию: "inclusive")
			глобальная опция
			{Vi не имеет такой возможности}

	Данная опция влияет на поведение выделения. Она используется только в
	режиме Выделения и в Визуальном режиме.
	
	Возможны следующие значения этой опции:
	
	   значение	после строки включительно ~
	   old		   нет		да
	   inclusive	   да		да
	   exclusive	   да		нет
	   
	"после строки" означает, что курсор может быть помещён на один символ
	после выделенной строки.
	"включительно" означает, что последний символ выделения включается в
	фрагмент текста, подлежащий последующей операции. Например, если "x"
	используется для удаления выделенного фрагмента.

 	Обратите внимание, что при использовании "exclusive" и выделении от
	конца в обратном направлении, вы не можете включить в выделение
	последний символ строки, если начало выделения происходит в Обычном
	режиме, а значение опции 'virtualedit' является пустой строкой.

	Опция 'selection' включается по команде |:behave|.

						        *'selectmode'* *'slm'*
'selectmode' 'slm'	строка (по умолчанию: "")
			глобальная опция
			{Vi не имеет такой возможности}

	Опция представляет собой список разделённых запятыми слов,
	определяющих ситуации, при которых редактор переходит в режим
	Выделения вместо Визуального режима при выполнении выделения текста.
	
	Возможные значения:
	
	   mouse	при использовании мыши 
	   key		при использовании специальных кнопок совместно с
			кнопкой <Shift>
	   cmd		при использовании "v", "V" или CTRL-V
	   
	См. также |режим_выделения|.
	Опция 'selectmode' включается по команде |:behave|.

						   *'sessionoptions'* *'ssop'*
'sessionoptions' 'ssop'	строка (по умолчанию: "blank,buffers,curdir,folds,
					       help,options,winsize")
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+scrollbind|}

	Опция используется для настройки команды |:mksession|. Её значением
	является список разделённых запятыми слов. Каждое слово в значении
	управляет сохранением и восстановлением определённых вещей:

	   слово	сохранение и восстановление ~
	   
	   blank	пустые окна
	   buffers	скрытые и выгруженные буферы, в том числе не
			отображаемые в окне
	   curdir	текущий каталог
	   folds	определённые вручную складки, состояние складок
			(открытые или закрытые), местные опции, относящиеся к
			складкам
	   globals	глобальные переменные, имена которых начинаются с
			прописной буквы и содержат хотя бы одну строчную
			букву.
	   help		окно справки
	   localoptions	местные по отношению к окну опции и привязки (не
			глобальные значения для местных опций)
	   options	все опции и привязки (в том числе глобальные значения
			для местных опций)
	   resize	размеры окна Vim: 'lines' и 'columns'
	   sesdir	каталог, в котором сохраняется файл сеанса, становится
			текущим каталогом (полезно для работы над проектами,
			доступными для различных систем по сети)
	   slash	символы обратной косой черты в именах файлов
			заменяются на символы прямой косой черты
	   unix		сохранять в формате Unix (символ конца строки --
			одиночный символ <NL>), даже в том случае, если
			редактирование происходит в Windows или в DOS
	   winpos	положение окна редактора Vim
	   winsize	размеры окон

	Не следует одновременно включать в значение опции слова "curdir" и
	"sesdir".
	Если слова "curdir" и "sesdir" отсутствуют в значении опции, то имена
	файлов сохраняются в виде абсолютных путей.
	Слова "slash" и "unix" полезны при работе в Windows, когда файлы
	сеансов могут быть также использованы при работе в Unix. Unix-версия
	Vim не может работать со сценариями в формате dos, в отличие от версии
	Windows, которая способна работать с файлами сценариев в формате unix.

						        *'shell'* *'sh'* *E91*
'shell' 'sh'		строка (по умолчанию $SHELL или "sh",
				в MS-DOS и Win32: "command.com" или "cmd.exe", 
				на OS/2: "cmd")
			глобальная опция

	Имя командной оболочки для команд ! и :!. Изменение значения данной
	опции также требует внимания к значениям следующих опций: 'shelltype',
	'shellpipe', 'shellslash', 'shellredir', 'shellquote', 'shellxquote'
	и 'shellcmdflag'.
	Допускается указание дополнительных аргументов для команды вызова
	оболочки, например: "csh -f".
	О включении пробелов и символов обратной косой черты в значение опции
	читайте в разделе |опции-обратная_косая|.
	При задании значения данной опции выполняется
	|подстановка_переменных_окружения|.
	Если имя командной оболочки содержит пробелы, то вам может
	потребоваться использовать кавычки. Например: >

		:set shell=\"c:\program\ files\unix\sh.exe\"\ -f
		
<	Обратите внимание на символ обратной косой черты перед каждым символом
	кавычки, который необходим, поскольку символ кавычки используется в
	командах Vim в качестве символа начала комментария, а также перед
	каждым пробелом (чтобы избежать преждевременного завершения значения
	опции). Также обратите внимание, что аргумент команды оболочки "-f" не
	помещается внутри кавычек, поскольку он не является частью имени
	команды. Заметим также, что Vim автоматически распознаёт символы
	обратной косой черты, являющиеся разделителем в путевом имени файла.
	В 32-битном режиме Dos (DJGPP) можно использовать переменную окружения
	$DJSYSFLAGS для изменения параметров выполнения внешних команд.
	Подробнее об этом смотрите в файле libc.inf в составе DJGPP.
	На MS-Windows необходимо включать расширение исполняемого файла, если
	этим расширением является ".com". Иначе говоря, в качестве значения
	данной опции следует указывать "command.com" или "4dos.com", поскольку
	"command" и "4dos" в некоторых случаях может не сработать (например,
	при использовании команд-фильтров).
	По неизвестным причинам при использовании "4dos.com" текущий каталог
	изменяется на "C:\". Чтобы избежать такого поведения можно
	использовать примерно такой вариант настройки: >
	
		:set shell=command.com\ /c\ 4dos
<		
	Значение этой опции не может быть изменено из |режимной_строки| или в
	|песочнице| по соображениям безопасности.

						     *'shellcmdflag'* *'shcf'*
'shellcmdflag' 'shcf'	строка (по умолчанию: "-c", 
				в MS-DOS и Win32, если значение опции 'shell'
				не содержит подстроки "sh": "/c")
			глобальная опция
			{Vi не имеет такой возможности}

	Опция используется для указания аргумента, который передаётся команде
	вызова оболочки для выполнения команд "!" и ":!"; например, "bash.exe
	-c ls" или "command.com /c dir". В MS-DOS-подобных системах значение
	данной опции по умолчанию устанавливается в соответствии со значением
	опции 'shell', чтобы уменьшить необходимость изменения значения этой
	опции пользователем. На OS/2 данная опция не используется (EMX
	самостоятельно определяет необходимое значение). О включении пробелов
	и символов обратной косой черты в значение опции читайте в разделе
	|опции-обратная_косая|. См. также |dos-оболочка|.
	Значение этой опции не может быть изменено из |режимной_строки| или в
	|песочнице| по соображениям безопасности.

						          *'shellpipe'* *'sp'*
'shellpipe' 'sp'	строка (по умолчанию: ">", "| tee", "|& tee" или 
			        "2>&1| tee")
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+quickfix|}

	Опция используется для указания строки, которая заставляет оболочку
	помещать вывод команды ":make" в файл ошибок. См. также
	|:make_makeprg|. О включении пробелов и символов обратной косой черты
	в значение опции читайте в разделе |опции-обратная_косая|. 
	Имя временного файла может быть при необходимости представлено в виде
	"%s" (если %s не указано в значении данной опции, то имя файла
	добавляется автоматически).
	На Amiga и MS-DOS значением по умолчанию является ">". Вывод
	сохраняется в файле напрямую и не отображается на экране.
	В Unix значением по умолчанию является "| tee". Стандартный поток
	вывода stdout компилятора сохраняется в файле и отображается на
	экране. Если значение опции 'shell' равно "csh" или "tcsh", то после
	выполнения операции инициализации значение данной опции по умолчанию
	изменяется на "|& tee". Если значение опции 'shell' равно "sh", "ksh",
	"zsh" или "bash", то значение данной опции по умолчанию
	устанавливается равным "2>&1| tee". Это приводит к тому, что в файл
	ошибок также сохраняется и стандартный поток ошибок stderr.
	Инициализация значения данной опции выполняется после чтения файла
	".vimrc" и всех остальных инициализаций, поэтому при изменении
	значения опции 'shell' происходит также и изменение значения опции
	'shellpipe', если оно не было явным образом задано раннее.
	Если значение опции 'shellpipe' устанавливается равным пустой строке,
	то перенаправление вывода программы, вызываемой по команде ":make",
	производиться не будет. Такой вариант может оказаться полезным, если
	опция 'makeprg' задаёт программу, которая выполняет запись
	непосредственно в файл, заданный значением опции 'makeef'. Если вы
	хотите избежать перенаправления вывода, но вам необходимо задать имя
	файла, указанное в значении опции 'makeef', то установите значение
	опции 'shellpipe' равным одиночному пробелу. При этом необходимо
	помнить, что пробел следует экранировать при помощи символа обратной
	косой черты:":set sp=\ ". В будущих версиях для работы
	программ-фильтров может быть использовано перенаправление по трубе и
	эта опция перестанет быть необходимой (по крайней мере в Unix).
	Значение этой опции не может быть изменено из |режимной_строки| или в
	|песочнице| по соображениям безопасности.

						        *'shellquote'* *'shq'*
'shellquote' 'shq'	строка (по умолчанию: ""; 
		                в MS-DOS и Win32, если значение опции 'shell'
				содержит подстроку "sh": "\"")
			глобальная опция
			{Vi не имеет такой возможности}

	Опция задаёт символы, которые используются в качестве кавычек,
	окружающих команду, которая передаётся оболочке при выполнении команд
	"!" и ":!". Перенаправление выполняется снаружи команды, заключённой в
	кавычки. Чтобы включить перенаправление внутри команды в кавычках,
	обратитесь к опции 'shellxquote'. Как правило, следует изменять
	значение только одной из данных двух опций.
	По умолчанию значением опции является пустая строка. Опция полезна в
	основном при использовании некоторых оболочек независимых
	производителей для MS-DOS-подобных систем, таких как MKS Korn Shell
	или bash, где значение данной опции должно быть равно "\"". Значение
	по умолчанию автоматически подстраивается в зависимости от значения
	опции 'shell', чтобы уменьшить необходимость изменения данной опции
	пользователем. См. также |dos-оболочка|.
	Значение этой опции не может быть изменено из |режимной_строки| или в
	|песочнице| по соображениям безопасности.

						        *'shellredir'* *'srr'*
'shellredir' 'srr'	строка (по умолчанию: ">", ">&" или ">%s 2>&1")
			глобальная опция
			{Vi не имеет такой возможности}

	Опция содержит строку, которая используется для помещения вывода
	команды-фильтра во временный файл. См. также раздел справочника |:!|.
	О включении пробелов и символов обратной косой черты в значение опции
	читайте в разделе |опции-обратная_косая|. 
	Имя временного файла может быть при необходимости представлено в виде
	"%s" (если %s не указано в значении данной опции, то имя временного
	файла добавляется автоматически).
	Значением по умолчанию является ">". В Unix, если значение опции
	'shell' во время операций инициализации изменяется на "csh", "tcsh"
	или "zsh", значение данной опции по умолчанию изменяется на ">&". Если
	значение опции 'shell' равно "sh", "ksh", или "bash", то значение
	данной опции по умолчанию устанавливается равным ">%s 2>&1". Это
	приводит к тому, что в тот же файл также будет перенаправлен и
	стандартный поток ошибок stderr.
	На Win32 действуют те же правила, что и для Unix систем, кроме случая,
	когда значением опции 'shell' является строка "cmd", которая приводит
	к установке в качестве значения данной опции по умолчанию строки ">%s
	2>&1". Кроме того, также производятся описанные выше проверки имени
	исполняемого файла оболочки с добавлением расширения ".exe".
	Инициализация значения данной опции выполняется после исполнения
	сценария ".vimrc" и всех остальных операций по инициализации, поэтому
	при изменении значения опции 'shell' в сценарии запуска значение опции
	'shellredir' изменяется автоматически, если оно не было явным образом
	изменено раннее.
        В будущих версиях для работы программ-фильтров может быть использовано
	перенаправление по трубе и эта опция перестанет быть необходимой (по
	крайней мере в Unix).
	Значение этой опции не может быть изменено из |режимной_строки| или в
	|песочнице| по соображениям безопасности.

			     *'shellslash'* *'ssl'* *'noshellslash'* *'nossl'*
'shellslash' 'ssl'	переключатель (по умолчанию: выключено)
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только на MSDOS, MS-Windows и OS/2}

	Если данная опция находится во включённом состоянии, то при
	подстановке имён файлов используется символ прямой косой черты в
	качестве разделителя компонентов пути к файлу. Это может быть полезным
	при использовании Unix-подобной оболочки вместо command.com или
	cmd.exe. Данная опция не мешает пользователю вводить символы обратной
	косой черты в качестве разделителей компонентов пути, но Vim
	автоматически заменяет их на символы прямой косой черты.
	Обратите внимание, что включение и выключение данной опции не
	оказывает влияния на имена некоторых существующих файлов, поэтому
	наилучшие результаты достигаются при включении данной опции др
	открытия файла. Такое поведение может быть изменено в будущих версиях.
	Опция 'shellslash' работает только в том случае, если символ обратной
	косой черты может быть использован в качестве разделителя пути. Для
	проверки можно пользоваться таким следующим выражением: >

		if exists('+shellslash')
<
						          *'shelltype'* *'st'*
'shelltype' 'st'	число (по умолчанию: 0)
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только на Amiga}

	Данная опция позволяет изменять поведение команд, использующих
	оболочку, на Amiga.
	
	0 и 1: оболочка используется во всех случаях
	2 и 3: оболочка используется только для выполнения команд-фильтров
	4 и 5: оболочка используется только для команды ':sh'

	Если оболочка не используется, то команда вызывается напрямую.

	0 и 2: для запуска внешних команд используется 
	       "shell 'shellcmdflag' cmd" 
	1 и 3: для запуска внешних команд используется "shell cmd"

						       *'shellxquote'* *'sxq'*
'shellxquote' 'sxq'	строка (по умолчанию: "";
				в Win32, если значение опции 'shell' содержит
				подстроку "sh": "\""
				в Unix, если используется вызов 
				system(): "\"")
			глобальная опция
			{Vi не имеет такой возможности}

	Опция задаёт символы, которые используются в качестве кавычек,
	окружающих команду, которая передаётся оболочке при выполнении команд
	"!" и ":!". Текст внутри кавычек включает также команды
	перенаправления потоков вывода. Чтобы вынести команды перенаправления
	за кавычки, следует использовать опцию 'shellquote'. Как правило,
	следует изменять значение только одной из данных двух опций.
	Значением данной опции по умолчанию является пустая строка. Опция
	может быть полезна при использовании некоторых оболочек для Win32 от
	независимых производителей, таких как MKS Korn Shell или bash, где
	значение данной опции должно быть равно "\"". Значение данной опции
	автоматически подстраивается в зависимости от значения опции 'shell',
	чтобы уменьшить необходимость изменения данной опции пользователем.
	См. также |dos-оболочка|.
	Значение этой опции не может быть изменено из |режимной_строки| или в
	|песочнице| по соображениям безопасности.

			       *'shiftround'* *'sr'* *'noshiftround'* *'nosr'*
'shiftround' 'sr'	переключатель (по умолчанию: выключено)
			глобальная опция
			{Vi не имеет такой возможности}

	Опция позволяет округлять значение отступа до величины, кратной
	значению опции 'shiftwidth'. Опция используется при выполнении команд
	> и <. Команды режима Вставки CTRL-T и CTRL-D всегда выполняют
	округление значения отступа до величины, кратной значению опции
	'shiftwidth', независимо от значения данной опции (такое поведение
	является совместимым с Vi).
	ЗАМЕЧАНИЕ: Эта опция отключается при включении опции 'compatible'.

						         *'shiftwidth'* *'sw'*
'shiftwidth' 'sw'	число (по умолчанию: 8)
			местная по отношению к буферу опция

	Опция задаёт количество пробелов в каждом символе табуляции. Это
	значение используется при выполнении команд |'cindent'|, |>>|, |<<| 
	и т.д.

						         *'shortmess'* *'shm'*
'shortmess' 'shm'	строка (по умолчанию в режиме Vim: "filnxtToO", 
			        в режиме совместимости с Vi: "")
			глобальная опция
			{Vi не имеет такой возможности}

	Опция позволяет избежать вывода приглашений |нажмите-enter| за счёт
	сокращения длины сообщений, которые Vim выводит в процессе работы,
	например, сообщения о файлах, которые выдаются по нажатию CTRL-G.
	
	Значение опции представляет собой набор нижеперечисленных флагов:

	 флаг	значение флага (если присутствует в составе значения опции)~
	 
	  f	использовать "(3 из 5)" вместо "(файл 3 из 5)"
	  i	использовать "[noeol]" вместо 
	        "[Незавершенная последняя строка]"
	  l	использовать "999L, 888C" вместо "999 стр., 888 симв."
	  m	использовать "[+]" вместо "[Изменён]"
	  n	использовать "[Новый]" вместо "[Новый файл]"
	  r	использовать "[RO]" вместо "[только для чтения]"
	  w     использовать "[w]" вместо "записано" для сообщения о записи
		файла и "[a]" вместо "добавлено" для сообщения о выполнении
		команды ':w >> file'
	  x	использовать "[dos]" вместо "[формат dos]", "[unix]" вместо
	        "[формат unix]" и "[mac]" вместо "[формат mac]"
	  a	все вышеперечисленные сокращения

	  o	заменять сообщение о записи файла последующим сообщением о
		чтении файла (полезно при выполнении команды ":wn" или при
		включённой опции 'autowrite').
	  O	сообщение о чтении файла заменяет любое предыдущее сообщение.
		Это также относится и к сообщениям быстрой правки (например,
		при работе команды ":cn").
	  s	не выводить сообщения "поиск будет продолжен с НАЧАЛА
		документа" и "поиск будет продолжен с КОНЦА документа"
	  t	обрезать начало сообщения о файле, если сообщение не
		помещается в командной строке; в первой колонке слева
		отображается символ "<".
		Флаг игнорируется в режиме Ex.
	  T	сокращать среднюю часть остальных сообщений, заменяя её на
		символы "...", если сообщение не помещается в командной
		строке. 
		Флаг игнорируется в режиме Ex.
	  W	не выводить "записано" или "[w]" при записи файла
	  A	не выводить сообщение "ВНИМАНИЕ" при обнаружении существующего
		своп-файла
	  I	не выводить заставку при запуске Vim |:intro|.

	Перечисленные флаги предоставляют возможность настроить редактор таким
	образом, чтобы избежать необходимости нажатия <Enter> при переходе
	между буферами, вместе с тем предоставляя обратную связь при
	помощи сокращённых сообщений. Для вывода полного сообщения о файле в
	том виде, как оно отображается на экране при пустом значении опции
	'shm', используйте команду ":file!".
	
	Полезные значения:
	
	    shm=	Сообщения не сокращаются.
	    shm=a	Сообщения сокращаются, но доступная информация
			присутствует полностью.
	    shm=at	Сообщения сокращаются, при необходимости сообщение
			может быть обрезано.

	ЗАМЕЧАНИЕ: значение опции устанавливается равным принятому по
	умолчанию в режиме совместимости с Vi при включении опции 'compatible'
	и равным принятому по умолчанию в режиме Vim при отключении опции
	'compatible'.

				 *'shortname'* *'sn'* *'noshortname'* *'nosn'*
'shortname' 'sn'	переключатель (по умолчанию: выключено)
			местная по отношению к буферу опция
			{Vi не имеет такой возможности}
			{опция недоступна в версии для MS-DOS}

	Имена файлов при включённой опции 'shortname' рассматриваются как
	состоящие из 8 символов и 3-символьного расширения. В имени файла при
	этом допускается только одна точка, поэтому при добавлении
	дополнительного расширения (".~" или ".swp") точки заменяются на
	символы подчёркивания. Данная опция недоступна на MS-DOS, поскольку на
	этой платформе она в любом случае должна быть всегда включена. Опция
	может быть полезной при редактировании файлов на MS-DOS-совместимой
	файловой системе, например на messydos или crossdos. При запуске
	графической версии редактора для Win32 в условиях Win32s эта опция
	всегда включена по умолчанию.

						  *'showbreak'* *'sbr'* *E595*
'showbreak' 'sbr'	строка (по умолчанию: "")
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+linebreak|}

	Опция используется для указания символов, которые должны быть показаны
	в начале длинных строк, отображаемых на экране в виде нескольких
	строк. Например, можно в качестве значений использовать "> " или 
	"+++ ".
	В значении данной опции допускается использование только печатных
	символов, занимающих на экране одно знакоместо, исключая символ <Tab>
	и запятую (в будущих версиях запятая может быть использована для
	разделения в значении опции символов, отображаемых в начале и в конце
	длинной строки).
	Символы, заданные в значении данной опции, подсвечиваются в
	соответствии со значением флага '@' опции 'highlight'.
	Обратите внимание, что символы табуляции после символов, заданных в
	значении опции 'showbreak', отображаются иначе. Чтобы отображать
	символы, заданные в значении данной опции, между номерами строк,
	добавьте флаг "n" к значению опции 'cpoptions'.

				     *'showcmd'* *'sc'* *'noshowcmd'* *'nosc'*
'showcmd' 'sc'		переключатель (по умолчанию в режиме Vim: включено
				       по умолчанию в режиме Vim на Unix:
				       выключено
				       в режиме совместимости с Vi: выключено)
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+cmdline_info|}

	Опция позволяет (частично) отображать команду в статусной строке. На
	медленном терминале рекомендуется выключать данную опцию.
	
	В Визуальном режиме опция позволяет отображать размер выделенной
	области:
	
	- При выделении символов в строке отображается количество выделенных
	  символов
	- При выделении нескольких строк отображается количество выделенных
	  строк
	- При выделении блока отображается количество выделенных экранных
	  символов: строки x колонки.
	  
	ЗАМЕЧАНИЕ: значение опции устанавливается равным принятому по
	умолчанию в режиме совместимости с Vi при включении опции 'compatible'
	и равным принятому по умолчанию в режиме Vim при отключении опции
	'compatible'.

			   *'showfulltag'* *'sft'* *'noshowfulltag'* *'nosft'*
'showfulltag' 'sft'	переключатель (по умолчанию: выключено)
			глобальная опция
			{Vi не имеет такой возможности}

	Если данная опция включена, то это позволяет отображать как имя метки,
	так и отредактированную форму шаблона поиска (если такая имеется), в
	качестве возможных соответствий при завершении слова в режиме Вставки
	(см. |вставка-автодополнение|) из файла меток. Таким образом, если вы
	ищете соответствие для функции на языке C, то вы сможете видеть
	необходимые аргументы для этой функции (если это позволяет стиль
	написания исходного текста программы).

				 *'showmatch'* *'sm'* *'noshowmatch'* *'nosm'*
'showmatch' 'sm'	переключатель (по умолчанию: выключено)
			глобальная опция

	Данная опция включает режим кратковременного переноса курсора при
	вводе скобки к соответствующей парной скобке. Перенос курсора
	выполняется только в том случае, если соответствующая пара видна на
	экране. Временной интервал для переноса может быть настроен при помощи
	опции 'matchtime'.
	В случае, если соответствия для скобки не обнаружено, выдаётся
	звуковой сигнал (независимо от того, видна возможная пара на экране
	или нет). Данная опция автоматически выключается при включении опции
	'paste'. Если в значении опции 'cpoptions' отсутствует флаг 'm', то
	при вводе следующего символа курсор будет немедленно перенесён обратно
	в прежнюю позицию.
	Для настройки формы и режима мигания курсора при отображении
	соответствия используйте поле "sm" в значении опции 'guicursor'.
 	Опция 'matchpairs' может быть использована для задания символов, для
	которых будет отображаться парное соответствие. Опции 'rightleft' и
	'revins' используются для поиска соответствий в обратном направлении.
	Замечание: не рекомендуется использование краткой формы данной опции
	детьми, не достигшими совершеннолетнего возраста.
	
				 *'showmode'* *'smd'* *'noshowmode'* *'nosmd'*
'showmode' 'smd'	переключатель (по умолчанию в режиме Vim: включено, 
				       в режиме совместимости с Vi: выключено)
			глобальная опция

	Опция позволяет показывать текущий режим редактора в виде сообщения в
	последней строке окна. Режим подсветки сообщения определяется флагом
	'M' опции 'highlight'.
	В сообщении может присутствовать слово "XIM", если |XIM| может быть
	использован. Однако, наличие "XIM" в строке сообщения вовсе не
	означает, что XIM действительно используется в данный момент, особенно
	в том случае, если значением опции 'imactivatekey' является пустая
	строка.
	ЗАМЕЧАНИЕ: значение опции устанавливается равным принятому по
	умолчанию в режиме совместимости с Vi при включении опции 'compatible'
	и равным принятому по умолчанию в режиме Vim при отключении опции
	'compatible'.

						         *'sidescroll'* *'ss'*
'sidescroll' 'ss'	число (по умолчанию: 0)
			глобальная опция
			{Vi не имеет такой возможности}

	Опция указывает минимальное количество колонок для горизонтальной
	прокрутки. Значение опции используется только при выключенной опции
	'wrap', если курсор перемещается за пределы видимой области экрана.
	Если значение опции равно 0, то курсор помещается в середину экрана.
	При использовании медленного терминала рекомендуется устанавливать
	значение данной опции равным 0 или большому значению. При
	использовании быстрого терминала, значение опции может быть
	установлено равным небольшому значению или 1. Опция не используется
	при выполнении команд "zh" и "zl".

						    *'sidescrolloff'* *'siso'*
'sidescrolloff' 'siso'	число (по умолчанию: 0)
			глобальная опция
			{Vi не имеет такой возможности}

	Опция задаёт минимальное количество колонок экрана, которое должно
	оставаться слева и справа от курсора при выключенной опции 'wrap'.
	Если значение этой опции больше 0, а опция |'sidescroll'| также имеет
	ненулевое значение, то при выполнении горизонтальной прокрутки на
	экране всегда будет отображаться контекст текущей позиции курсора
	(кроме случаев, когда курсор находится в самом начале или в самом
	конце строки). При очень больших значениях данной опции (например,
	999), курсор всегда будет находится в центре экрана по горизонтали,
	если он находится достаточно далеко от начала или конца строки.
	ЗАМЕЧАНИЕ: Значение данной опции устанавливается равным 0 при
	включении опции 'compatible'.

	Пример: попробуйте предлагаемое решение с использованием опций
	        'sidescroll' и 'listchars', которое позволяет запретить
		перемещение курсора на символ "extends":

		:set nowrap sidescroll=1 listchars=extends:>,precedes:<
		:set sidescrolloff=1

			       *'smartcase'* *'scs'* *'nosmartcase'* *'noscs'*
'smartcase' 'scs'	переключатель (по умолчанию: выключено)
			глобальная опция
			{Vi не имеет такой возможности}

	Опция отменяет действие опции 'ignorecase', если шаблон для поиска
	содержит символы в верхнем регистре.  Опция используется только при
	вводе шаблона для поиска вручную при включённой опции 'ignorecase'.
	Значение опции учитывается при выполнении команд "/", "?", "n", "N",
	":g" and ":s", но не используется при выполнении команд "*", "#",
	"gd", команд поиска меток и т.п. При выполнении команд "*" и "#"
	значение опции 'smartcase' может быть использовано при последующем
	выполнении команды "/" с шаблоном поиска, взятым из истории команд
	поиска. 
	ЗАМЕЧАНИЕ: Эта опция отключается при включении опции 'compatible'.

			     *'smartindent'* *'si'* *'nosmartindent'* *'nosi'*
'smartindent' 'si'	переключатель (по умолчанию: выключено)
			местная по отношению к буферу опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+smartindent|}

	Опция позволяет включать интеллектуальное автоматическое
	форматирование отступа в новой строке. Такое форматирование больше
	всего напоминает стиль форматирования отступа в программах на
	C-подобных языках, но также может применяться и для других языков.
	Опция 'cindent' позволяет выполнять похожее форматирование в
	большинстве случаев лучше, чем при помощи данной опции, но при этом
	используется более строгий набор правил (см. |С-отступы|). При
	включённой опции 'cindent', значение опции 'si' не используется. Ещё
	более продвинутым способом, позволяющим обеспечивать тонкую настройку
	форматирования отступа в строке, является использование опции
	'indentexpr'.
	Обычно при использовании опции 'smartindent' также следует включить
	опцию 'autoindent'.
	Отступ автоматически вставляется в следующих случаях:
	
	- После строки, заканчивающейся символом '{'.
	- После строки, начинающейся с ключевого слова, определённого в
	  значении опции 'cinwords'.
	- Перед строкой, начинающейся с символа '}' (только при выполнении
	  команды "O").

	При вводе '}' в качестве первого символа новой строки, эта строка
	будет иметь такой же отступ, как и строка с соответствующей парной
	'{'.
	При вводе '#' в качестве первого символа новой строки, отступ для этой
	строки ликвидируется, а символ '#' помещается в первую колонку.
	Прежнее значение отступа восстанавливается для следующей строки. Если
	вас не устраивает такое поведение, то вы можете пользоваться следующей
	привязкой: ":inoremap # X^H#" (символ ^H вводится как CTRL-V CTRL-H).
	При использовании команды ">>", строки, начинающиеся с '#', не
	подлежат сдвигу вправо.
	ЗАМЕЧАНИЕ: Данная опция выключается при включении опции 'compatible'.
	При включении опции 'paste' интеллектуальное форматирование отступов
	не выполняется.

				 *'smarttab'* *'sta'* *'nosmarttab'* *'nosta'*
'smarttab' 'sta'	переключатель (по умолчанию: выключено)
			глобальная опция
			{Vi не имеет такой возможности}

	При включённой опции 'smarttab', ввод символа <Tab> в начале
	строки приводит к вставке в текст пробелов в соответствии со значением
	опции 'shiftwidth', а в остальных местах используется значение опции
	'tabstop'. Ввод <BS> в начале строки приводит к удалению пробелов в
	соответствии со значением опции 'shiftwidth'.
	При выключенной опции 'smarttab' ввод символа <Tab> всегда приводит к
	вставке пробелов в соответствии со значением опции 'tabstop'. При этом
	значение опции 'shiftwidth' используется только для сдвига текста
	вправо или влево (см. |сдвиг-влево-вправо|).
	Выбор символа для вставки (табуляция или пробел) зависит от значения
	опции 'expandtab'. См. также |вставка-expandtab|. При выключенной
	опции 'expandtab' количество пробелов сводится к минимуму при помощи
	символов <Tab>.
	ЗАМЕЧАНИЕ: Данная опция выключается при включении опции 'compatible'.

					               *'softtabstop'* *'sts'*
'softtabstop' 'sts'	число (по умолчанию: 0)
			местная по отношению к буферу опция
			{Vi не имеет такой возможности}

	Опция задаёт количество пробелов, эквивалентное ширине символа <Tab>,
	при выполнении операций по редактированию текста (например, при
	вставке символа <Tab> или при использовании <BS>). При этом создаётся
	ощущение, что используются символы <Tab>, хотя в действительности
	применяются как символы <Tab>, так и пробелы. Опция может быть
	полезной для сохранения стандартного значения опции 'ts' (8) при том,
	что редактор начинает вести себя так, как если бы значение этой опции
	на самом деле было бы равно значению опции 'sts'. Однако, команды
	вроде "x" в любом случае работают с реальными символами.
	При значении опции 'sts' равном 0, данная возможность не используется.
	При включении опции 'paste', значение 'softtabstop' устанавливается
	равным 0.
	См. также |вставка-expandtab|. При выключенной опции 'expandtab'
	количество пробелов сводится к минимуму при помощи символов <Tab>.
	Флаг 'L' в значении 'cpoptions' изменяет алгоритм использования
	символов табуляции при включённой опции 'list'.
	ЗАМЕЧАНИЕ: Значение данной опции устанавливается равным 0 при
	включении опции 'compatible'.

			       *'splitbelow'* *'sb'* *'nosplitbelow'* *'nosb'*
'splitbelow' 'sb'	переключатель (по умолчанию: выключено)
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+windows|}

	Если эта опция включена, то при выполнении команды разделения окна,
	новое окно помещается под текущим окном |:split|.

			     *'splitright'* *'spr'* *'nosplitright'* *'nospr'*
'splitright' 'spr'	переключатель (по умолчанию: выключено)
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+vertsplit|}

	Если эта опция включена, то при выполнении команды разделения окна,
	новое окно помещается справа от текущего окна |:vsplit|.

			   *'startofline'* *'sol'* *'nostartofline'* *'nosol'*
'startofline' 'sol'	переключатель (по умолчанию: включено)
			глобальная опция
			{Vi не имеет такой возможности}

	Значение опции используется при выполнении команд CTRL-D, CTRL-U,
	CTRL-B, CTRL-F, "G", "H", "M", "L", а также "d", "<<" и ">>" с
	построчным оператором, с применением "%" с числом и в отношении команд
	изменения буфера (CTRL-^, :bnext, :bNext и т.д.). Кроме того, опция
	применяется при выполнении команды Ex, в которой используется только
	номер строки, например ":25" или ":+".
	Если данная опция включена, то при выполнении вышеперечисленных команд
	курсор переносится к первому пробельному символу строки, в противном
	случае курсор по возможности остаётся в той же колонке, что и до
	выполнения команды.
	При выполнении команд изменения буфера, курсор помещается в той
	колонке, в которой он находился при последнем редактировании буфера.
	ЗАМЕЧАНИЕ: Данная опция включается при включении опции 'compatible'.
    
			           *'statusline'* *'stl'* *E540* *E541* *E542*
'statusline' 'stl'	строка (по умолчанию: пустая строка)
			глобальная опция
			{доступно только в том случае, если Vim скомпилирован
			с особенностью |+statusline|}

	Опция задаёт содержание строки состояния, если её значением не
	является пустая строка. См. также раздел |строка_состояния|.

	Значение опции может содержать как обычный текст, так и различные
	элементы в стиле printf (которые начинаются с символа '%'). Каждый
	такой элемент задаётся при помощи следующего формата:

	  %-0{мин_шир}.{макс_шир}{элемент}
	  
	Все указанные поля элемента, кроме поля {элемент}, являются
	необязательными. Символ процента может быть включён в строку состояния
	при помощи элемента '%%'. В строке состояния может быть до 80
	различных элементов.

	Обратите внимание, что если значение данной опции не является пустой
	строкой, а значение опции 'laststatus' равно 2, то опция 'ruler'
	будет управлять только выводом команды |CTRL-G|.

	поле	    значение ~
	-	    Элемент выравнивается по левому краю. По умолчанию,
		    если минимальная ширина элемента больше длины элемента,
		    используется выравнивание по правому краю.
	0	    Использовать предваряющие нули в числовых элементах.
		    Значение отменяется полем '-'.
	мин_шир	    Минимальная ширина элемента. При необходимости значение
		    элемента дополняется в соответствии со значениями полей
		    '-' и '&'. Значение поля не должно быть больше 50.
	макс_шир    Максимальная ширина элемента. При длине элемента,
		    превышающей заданную максимальную ширину, происходит
		    обрезание значения элемента. Текстовые элементы обрезаются
		    с использованием символа '<' слева от обрезанного
		    элемента. Числовые элементы обрезаются до макс_шир-2 цифр,
		    за которыми следует символ '>' и количество опущенных
		    цифр, наподобие экспоненциального формата представления
		    чисел.
	элемент	    Односимвольный код, имеющий одно из описанных ниже
		    значений.

	Ниже следует описание возможных элементов строки состояния. В колонке
	"элемент" указано значение кода элемента и его тип:
	
		Ч число
		С строка
		Ф флаг, согласно описанному ниже формату
		- не применимо

	элемент  значение ~
	
	  f С    Путь к файлу, загруженному в буфер, относительно текущего
		 каталога.
	  F С	 Полный абсолютный путь к файлу, загруженному в буфер.
	  t С    Имя файла, загруженного в буфер (последний компонент пути).
	  m Ф    Флаг состояния несохранённых изменений в буфере. На месте
		 элемента выводится " [+]" или " [-]", в зависимости от
		 значения опции 'modifiable'.
	  M Ф    Флаг состояния несохранённых изменений в буфере. На месте
		 элемента выводится ",+" или ",-".
	  r Ф    Флаг состояния "только для чтения", на месте элемента
		 выводится " [RO]".
	  R Ф    Флаг состояния "только для чтения", на месте элемента
		 выводится ",RO".
	  h Ф    Флаг буфера справочника, выводится текст " [справка]".
	  H Ф    Флаг буфера справочника, выводится текст ",HLP".
	  w Ф    Флаг окна предпросмотра, выводится текст " [Предпросмотр]".
	  W Ф    Флаг окна предпросмотра, выводится текст ",PRV".
	  y Ф    Тип файла, загруженного в буфер, например " [vim]". 
	         См. 'filetype'.
	  Y Ф    Тип файла, загруженного в буфер, например ",VIM".
		 См. 'filetype'.
		 {доступно только в том случае, если Vim скомпилирован
		 с особенностью |+autocmd|}
	  k С	 Значение переменной "b:keymap_name" или 'keymap', если
		 используются привязки |:lmap|: "<раскладка>".
	  n Ч    Номер буфера.
	  b Ч    Значение байта в позиции курсора.
	  B Ч    То же самое, в шестнадцатеричной системе счисления.
	  o Ч    Номер байта в позиции курсора от начала файла (первый байт
	         имеет номер 1). 
		 {доступно только в том случае, если Vim скомпилирован
		 с особенностью |+byte_offset|}
	  O Ч    То же самое, в шестнадцатеричной системе счисления.
	  N Ч    Номер странице при выводе на печать (работает только с опцией
		 'printheader').
	  l Ч    Номер строки.
	  L Ч    Количество строк в буфере.
	  c Ч    Номер колонки.
	  v Ч    Номер виртуальной колонки.
	  V Ч    Номер виртуальной колонки в виде -{число}. Не отображается,
		 если значение совпадает со значением 'c'.
	  p Ч    Позиция курсора от начала файла в процентах (как при выводе
		 команды |CTRL-G|).
	  p С    Позиция текста, отображаемого в окне, по отношению к началу
	         файла в процентах. Аналогично значению, которое используется
		 в опции 'ruler'. Ширина поля всегда равна 3 символам.
	  a С    Состояние списка аргументов, аналогично значению, которое
	         выводится в заголовке по умолчанию ({текущий} из {общего}).
		 Соответствует пустой строке, если список аргументов содержит
		 0 или 1 значение.
	  { ЧФ   Позволяет вывести в строке состояния результат выражения,
	         заданного между символами '{' и '}'.
	  ( -    Указывает на начало группы элементов. Группы могут быть
	         использованы для применения параметров ширины и выравнивания
		 к нескольким элементам как к одному целому. Группа должна
		 быть закрыта при помощи элемента %).
	  ) -    Указывает на конец группы элементов. Этот элемент не
		 допускает применения полей ширины.
	  < -    Указывает на место, в котором строка состояния будет
		 обрезана в том случае, если она не может быть отображена
		 полностью. По умолчанию используется начало строки состояния.
		 Этот элемент не допускает применения полей ширины.
	  = -    Указывает на позицию, разделяющую элементы, выровненные по
	         левому и правому краям. Этот элемент не допускает применения
		 полей ширины.
	  * -    Устанавливает значение группы подсветки равным User{N}, где
	         {N} задаётся значением поля минимальной ширины, например %1*.
		 Обычный режим подсветки восстанавливается при помощи элемента
		 %* или %0*. Для строки состояния неактивного окна
		 используется значение StatusLineNC, изменённое на разницу
		 между User{N} и StatusLine. См. |подсветка-User1..9|

	Для отображения флагов используются следующие правила: если текст,
	который должен быть отображён в позиции флага, начинается с запятой,
	то он будет отделён от других элементов, кроме обычного текста. Если
	же текст, отображаемый в позиции флага, начинается с пробела, то он
	будет отделён ото всех элементов, кроме других флагов. Другими
	словами, предваряющая запятая удаляется из текста, отображаемого на
	месте флага, если предшествующий символ принадлежит обычному тексту, а
	предваряющий пробел удаляется в том случае, если предшествующий символ
	относится к тексту другого отображаемого флага. Это позволяет
	выполнять элегантное форматирование строки состояния в тех случаях,
	когда флаги используются подобно приведённым ниже примерам.

	Если все элементы группы при выводе в строку состояния являются пустой
	строкой (например, группа состоит из неактивных флагов), то группа не
	будет отображаться в строке, если для неё не задана минимальная ширина
	поля. Это позволяет полностью исключить отображение в строке состояния
	группы вроде >
	
		:set statusline=...%(\ [%M%R%H]%)...

<      	если ни один из указанных флагов не находится в активном состоянии.

	Имейте в виду, что выражения, которые могут присутствовать в строке
	состояния, вычисляются каждый раз, когда отображается строка
	состояния. При отображении строки состояния текущее окно и текущий
	буфер временно устанавливаются равными тому окну и буферу, чья строка
	состояния обновляется в данный момент, с тем, чтобы выражение
	вычислялось в правильном контексте. Переменной "actual_curbuf"
	присваивается значение, возвращаемое функцией 'bufnr()' для
	действительного активного буфера. Выражение вычисляется в |песочнице|.

	Если строка состояния не обновляется в нужный момент (например, после
	изменения значения переменной, которая используется в выражении), то
	обновление может быть произведено насильно путём присваивания
	переменной значения этой же самой переменной. Например: >

		:let &ro = &ro
	
<	Если в результате содержатся только цифры, то с точки зрения
	отображения в строке состояния он рассматривается как число. В
	противном случае результат рассматривается как текст, отображаемый на
	месте флага, и к нему применяются правила отображения, описанные выше.

	Следите за корректностью используемых выражений. Ошибки в выражениях,
	используемых в строке состояния, могут вывести Vim из рабочего
	состояния! В крайнем случае нажмите ':' или 'Q' для перехода в
	командную строку, завершите работу редактора и отредактируйте сценарий
	запуска .vimrc при помощи команды "vim -u NONE".

	Примеры:

	Эмуляция стандартной строки состояния при включённой опции 'ruler': >
	
	  :set statusline=%<%f\ %h%m%r%=%-14.(%l,%c%V%)\ %P
	  	
<	То же, но с добавлением значения символа ascii в позиции курсора (как
	по команде "ga"): >

	  :set statusline=%<%f%h%m%r%=%b\ 0x%B\ \ %l,%c%V\ %P
	  
<	Отображение количества байтов и значение байта, а также флаг
	изменённого состояния буфера красным цветом: >

	  :set statusline=%<%f%=\ [%1*%M%*%n%R%H]\ %-19(%3l,%02c%03V%)%O'%02b'
	  :hi User1 term=inverse,bold cterm=inverse,bold ctermfg=red
	  
<	Отображение флага ,GZ, если в буфер загружен файл, сжатый при помощи
	gzip: >
	
	  :set statusline=...%r%{VarExists('b:gzflag','\ [GZ]')}%h...
	  
<	для работы указанного выше примера необходимо определить в настройках
        автокоманд (|:autocmd|): >

	  :let b:gzflag = 1
	  
<	и >

	  :unlet b:gzflag
	  
<	а также определить функцию: >

	  :function VarExists(var, val)
	  :    if exists(a:var) | return a:val | else | return '' | endif
	  :endfunction
<
						           *'suffixes'* *'su'*
'suffixes' 'su'		строка (по умолчанию: ".bak,~,.o,.h,.info,.swp,.obj")
			глобальная опция
			{Vi не имеет такой возможности}

	Файлы с расширениями, указанными в значении данной опции, имеют
	меньший приоритет при выполнении поиска файлов, соответствующих
	заданному шаблону при выполнении автодополнения имени файла, см.
	|расширения|. Необходимые расширения в значении опции перечисляются
	через запятую. Пробелы после запятой игнорируются. Кроме того, в
	качестве начала расширения также рассматривается точка. Чтобы точка
	или запятая не воспринималась как разделитель отдельных расширений, её
	следует предварять символом обратной косой черты (см.  раздел
	|опции-обратная_косая| о включении пробелов и символов обратной косой
	черты в значение опции).
	Для того, чтобы полностью игнорировать файлы с определёнными именами,
	используйте опцию 'wildignore'.
	При добавлении или удалении расширений лучше всего использовать команды
	|:set+=| и |:set-=|, поскольку это позволяет избежать проблем, если
	новых версиях будет использовано иное значение по умолчанию.

						       *'suffixesadd'* *'sua'*
'suffixesadd' 'sua'	строка (по умолчанию: "")
			местная по отношению к буферу опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
		        с особенностью |+file_in_path|}

	Значением данной опции является список расширений, разделённых
	запятыми, которые применяются при выполнении команд поиска файла,
	таких как "gf", "[I" и т.д. Например: >
	
		:set suffixesadd=.java
<
				 *'swapfile'* *'swf'* *'noswapfile'* *'noswf'*
'swapfile' 'swf'	переключатель (по умолчанию: включено)
			местная по отношению к буферу опция
			{Vi не имеет такой возможности}

	Опция управляет использованием своп-файла для данного буфера. Если для
	какого-то буфера желательно не использовать своп-файл, то следует
	выключить данную опцию. Например, это может быть полезно, если вы
	редактируете файл с какой-нибудь секретной информацией, которую не
	должен видеть даже привилегированный пользователь системы. При этом
	следует быть предельно внимательным, так как весь текст файла будет
	загружен в память полностью. Не следует применять отключение
	своп-файла для больших файлов. Если использование своп-файла
	отключено, то восстановление в случае аварийного завершения работы
	будет невозможно.
	Своп-файл создаётся только в том случае, если опция 'swapfile'
	включена, а значение опции |'updatecount'| не равно 0.
	При отключении опции 'swapfile', существующий своп-файл для текущего
	буфера немедленно удаляется. При включении опции 'swapfile' своп-файл
	будет немедленно создан, если значение опции 'updatecount' не равно 0.
	См. также раздел |своп-файл| и справку по опции |'swapsync'|.

	Данная опция используется совместно с опциями 'bufhidden' и 'buftype'
	для создания буферов специального назначения. См. раздел
	|специальные_буферы|.
	
						          *'swapsync'* *'sws'*
'swapsync' 'sws'	строка (по умолчанию: "fsync")
			глобальная опция
			{Vi не имеет такой возможности}

	Если значение этой опции не является пустой строкой, то своп-файл
	синхронизируется с файловой системой немедленно после записи. Этот
	процесс занимает некоторое время, особенно на загруженных системах
	Unix. Если значением этой опции является пустая строка, то своп-файл
	может частично находиться в оперативной памяти и при аварийном
	завершении работы это может привести к потере информации. Unix-системы
	выполняют синхронизацию содержимого своп-файла самостоятельно с
	определённой периодичностью, поэтому на таких системах установка
	значения данной опции равным пустой строке не имеет серьёзных
	отрицательных последствий. С другой стороны, на некоторых системах
	своп-файл вообще не записывается на диск. Если на Unix-системе
	установить значение данной опции равным "sync", то при синхронизации
	будет использоваться системный вызов sync() вместо вызова fsync(),
	предусмотренного по умолчанию, что может быть эффективнее на некоторых
	системах.

						         *'switchbuf'* *'swb'*
'switchbuf' 'swb'	строка (по умолчанию: "")
			глобальная опция
			{Vi не имеет такой возможности}

	Эта опция управляет поведением редактора пи переключении между
	буферами. Значение опции представляет собой разделённый запятыми
	список ключевых слов:

	   useopen	позволяет перемещаться в первое открытое окно, которое
			содержит указанный буфер, если такое имеется. Если это
			ключевое слово отсутствует в значении данной опции, то
			другие окна не будут приниматься во внимание. Это
			значение также проверяется при выполнении команд
			|быстрого_исправления|, при переходе между ошибками
			(":cc", ":cn", "cp" и т.д.). Кроме того, это значение
			используется во всех связанных с буферами командах
			разделения, таких как ":sbuffer", ":sbnext" и
			":sbrewind".
			
	   split	это ключевое слово позволяет разделять текущее окно
			перед загрузкой нового буфера. Если оно отсутствует в
			списке, то буфер загружается в активное окно. Значение
			поддерживается командами |быстрого_исправления|,
			которые позволяют перемещаться между ошибками в
			текстах программ.

						            *'syntax'* *'syn'*
'syntax' 'syn'		строка (по умолчанию: пустая строка)
			местная по отношению к буферу опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
		        с особенностью |+syntax|}

	Данная опция, если её значение задано, позволяет загрузить правила
	подсветки синтаксиса с соответствующим именем, если подсветка
	синтаксиса не была отключена по команде ":syntax off". Значение опции
	не обязательно отражает правила синтаксиса действующие для буфера в
	текущий момент (для этой цели следует использовать переменную
	b:current_syntax).
	Эта опция наиболее полезна в режимной строке файлов, синтаксис которых
	не может быть определён автоматически. Например, для файла на языке
	IDL: >
	
		/* vim: set syntax=idl : */
<	
	Для отключения подсветки синтаксиса в текущем файле используйте
	команду >

		:set syntax=OFF
<	
	Чтобы включить подсветку синтаксиса в соответствии с текущим значением
	опции 'filetype', используйте команду >

		:set syntax=ON
<	
	При изменении значения данной опции фактически происходит срабатывание
	автокомандного события Syntax со значением, соответствующим значению
	данной опции. Значение опции 'syntax' не копируется в другой буфер,
	независимо от наличия флага 's' или 'S' в значении опции 'cpoptions'.

					                    *'tabstop'* *'ts'*
'tabstop' 'ts'		число (по умолчанию: 8)
			местная по отношению к буферу опция

	Опция задаёт количество пробелов, используемых для отображения
	содержащихся в файле символов <Tab>. См. также справку по команде
	|:retab| и опцию 'softtabstop'.
	
	Замечание: изменение значения опции 'tabstop' на величину, отличную от
	принятой по умолчанию (8), может привести к неправильному отображению
	файла при печати или на других машинах.

	Существует четыре основных способа использования символов табуляции в
	Vim:
	
	1. Путём изменения значения опций 'softtabstop' и 'shiftwidth' на 4
	   (или 3, или любую другую величину), при сохранении значения опции
	   'tabstop' равным 8 и использовании опции 'noexpandtab'. В этом
	   случае Vim будет использовать набор символов табуляции и пробелов,
	   но при этом <Tab> и <BS> будут вести себя так, как если бы метки
	   табуляции были расставлены через каждые 4 (3, ...) символа.
	   
	2. Путём изменения значения 'tabstop' и 'shiftwidth' на любую
	   необходимую величину с использованием опции 'expandtab'. При этом
	   символы табуляции всегда будут заменяться пробелами. При изменении
	   значения опции 'tabstop' форматирование будет сохранено.
	   
	3. Путём изменения значения 'tabstop' и 'shiftwidth' на любую
	   необходимую величину с использованием |режимной_строки| для
	   использования заданных значений этих опции при повторном
	   редактировании файла. Этот вариант работает только в том случае,
	   если для редактирования файла используется Vim.
	   
	4. Путём использования равных по величине значений опций 'tabstop' и
	   'shiftwidth' и опции 'noexpandtab'. В этом случае для начальных
	   отступов строк будет использоваться любое текущее значение
	   'tabstop'. В этом случае следует пользоваться пробелами для вставки
	   символов табуляции далее в строке, чтобы выравнивание оставалось в
	   силе при изменении значения опции 'tabstop'.
	   
			     *'tagbsearch'* *'tbs'* *'notagbsearch'* *'notbs'*
'tagbsearch' 'tbs'	переключатель (по умолчанию: включено)
			глобальная опция
			{Vi не имеет такой возможности}

	Vim может выполнять как линейный, так и бинарный поиск, при выполнении
	команд поиска в файле меток (например, по команде |:ta|).  Бинарный
	поиск выполняется НАМНОГО быстрее, однако линейный поиск позволяет
	обнаруживать больше меток в тех случаях, когда файл меток не
	отсортирован должным образом. По умолчанию Vim принимает, что ваши
	файлы меток отсортированы, либо сообщает, что сортировка отсутствует.
	Опцию 'tagbsearch' следует отключать только в тех случаях, когда
	указанные условия не выполняются.

	При включённой опции 'tagbsearch' наиболее вероятно, что Vim будет
	использовать бинарный поиск. В некоторых случаях Vim прибегает к
	линейному поиску или проводит повторный линейный поиск в определённых
	файлах, если это потребуется. При выключенной опции 'tagbsearch'
	всегда выполняется только линейный поиск.

	Линейный поиск всегда производится в тех файлах, где Vim обнаруживает
	в начале файла строку, предупреждающую, что файл не отсортирован: >
	
        !_TAG_FILE_SORTED	0	/some command/
	
<	[до и после '0' должен быть единственный символ <Tab>]

	Если метка не была обнаружена при помощи бинарного поиска ни в одном
	из файлов, перечисленных в значении опции 'tags', и при этом включена
	опция 'ignorecase' или вместо обычного имени метки был применён
	шаблон, то выполняется повторный линейный поиск. При этом будут
	обнаружены только метки в неотсортированных файлах меток и
	соответствия с символами в разных регистрах.

	Если в файле меток содержится указание, что файл отсортирован с учётом
	регистра символов, то необходимость в выполнении второго линейного
	поиска при включённой опции 'ignorecase' отпадает. В этом случае
	следует использовать значение '2' в строке "!_TAG_FILE_SORTED". Файл
	меток может быть отсортирован с учётом регистра символов при помощи
	команды "sort -f" в большинстве систем Unix, например: "sort -f -o
	tags tags". В "Exuberant ctags" версии 5.3 и выше можно также
	использовать аргумент -f или --fold-case-sort. Обратите внимание, что
	для этого также необходимо, чтобы символы были приведены к верхнему
	регистру.
	
	При выключенной опции 'tagbsearch' поиск в файле меток выполняется
	дольше в том случае, когда имеется полное соответствие, но быстрее в
	тех случаях, когда полное соответствие отсутствует. Метки в
	неотсортированных файлах меток могут быть найдены только при
	выключенной опции 'tagbsearch'.
	
	Если файл меток не отсортирован, либо отсортирован неправильно (не по
	порядку значений ASCII), то опция 'tagbsearch' должна быть отключена,
	либо приведённая выше строка не должна быть указана в файле меток. 
	
	Данная опция не оказывает влияния на команды, которые выполняют поиск
	всех отвечающих заданному условию меток (например, автодополнение в
	командной строке, команда ":help").
	
	{Vi всегда использует бинарный поиск в некоторых версиях}

						          *'taglength'* *'tl'*
'taglength' 'tl'	число (по умолчанию: 0)
			глобальная опция
			    
	Если значение этой опции не равно 0, то оно указывает на количество
	символов, значимых для определения различия между метками.

			     *'tagrelative'* *'tr'* *'notagrelative'* *'notr'*
'tagrelative' 'tr'	переключатель (по умолчанию в режиме Vim: включено, 
				       в режиме совместимости с Vi: выключено)
			глобальная опция
			{Vi не имеет такой возможности}

	При использовании файла меток в другом каталоге, пути к файлам в
	данном файле меток конструируются относительно каталога, в котором
	находится файл меток, если данная опция включена.
	ЗАМЕЧАНИЕ: значение опции устанавливается равным принятому по
	умолчанию в режиме совместимости с Vi при включении опции 'compatible'
	и равным принятому по умолчанию в режиме Vim при отключении опции
	'compatible'.

						       *'tags'* *'tag'* *E433*
'tags' 'tag'		строка (по умолчанию: "./tags,tags", 
				если Vim скомпилирован с включённой
				особенностью |+emacs_tags|: 
					      "./tags,./TAGS,tags,TAGS")
			глобальная или местная по отношению к буферу опция 
			|глобальные-местные|

	Значение опции представляет собой разделённый пробелами или запятыми
	список имён файлов для команды ":tag". Для включения пробела или
	запятой в состав имени файла следует предварять их символом обратной
	косой черты (о включении пробелов и символов обратной косой черты в
	значение опции читайте в разделе |опции-обратная_косая|). Если имя
	файла начинается с "./", то "." заменяется на путь к текущему файлу,
	если флаг 'd' не включён в значение опции 'cpoptions'. 	При задании
	значения данной опции выполняется |подстановка_переменных_окружения|.
	См. также раздел справочника |tags-опция|.

	Для поиска файлов меток в дереве каталогов можно применять "*", "**" и
	другие символы масок, см. |файл-поиск|.
	{доступно только в том случае, если Vim скомпилирован с особенностью
	|+path_extra|}

	Если Vim скомпилирован с особенностью |+emacs_tags|, то редактор также
	будет автоматически поддерживать метки в стиле Emacs. Значением данной
	опции по умолчанию в таком случае будет "./tags,./TAGS,tags,TAGS",
	кроме MS-Windows и других ОС, где регистр символов в именах файлов не
	имеет значения. См. |emacs-метки|.
	
	При добавлении или исключении имён файлов лучше использовать команды
	|:set+=| и |:set-=|, что позволяет избежать проблем в том случае, если
	в новой версии будет использовано иное значение по умолчанию.
	
	{Vi использует по умолчанию значение "tags /usr/lib/tags"}

			       *'tagstack'* *'tgst'* *'notagstack'* *'notgst'*
'tagstack' 'tgst'	переключатель (по умолчанию: включено)
			глобальная опция
			{доступно не во всех версиях Vi}

	При включённой опции 'tagstack' |стек_меток| работает в обычном
	режиме. Если данная опция находится в выключенном состоянии, то при
	выполнении команд ":tag" и ":tselect" с дополнительным аргументом,
	соответствующая метка не будет помещаться в стек. При следующем вызове
	команды, использующей стек (":tag" без аргумента, ":pop" и т.п.),
	будет использоваться стек без изменений, но указатель стека будет
	перенесён к активному элементу. Выключение данной опции может
	оказаться полезным при использовании команды ":tag" в привязках,
	которые не должны изменять стек меток.

						 *'term'* *E529* *E530* *E531*
'term'			строка (по умолчанию значение переменной $TERM, либо,
			если переменная не задана:
			 в версии с графическим интерфейсом:  "builtin_gui"
					           на Amiga:  "amiga"
					           на BeOS:   "beos-ansi"
					           на Mac:    "mac-ansi"
					           на MiNT:   "vt52"
				                   на MS-DOS: "pcterm"
					           на OS/2:   "os2ansi"
					           в Unix:    "ansi"
					           на VMS:    "ansi"
				                   в Win 32:  "win32")
			глобальная опция
			
	Значением опции является имя терминала. Используется для выбора
	управляющих символов терминала. При изменении значения данной опции
	выполняется |подстановка_переменных_окружения|.
	Например: >
	
		:set term=$TERM
<	
	См. также |termcap|.

						        *'termbidi'* *'tbidi'*
						    *'notermbidi'* *'notbidi'*
'termbidi' 'tbidi'	переключатель (по умолчанию: выключено, 
				       включено на "mlterm")
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
		        с особенностью |+arabic|}

	Включённое состояние опции указывает, что за работу с направлением
	текста (в соответствии с Unicode) отвечает сам терминал. При этом
	терминал также выполняет работу по выбору внешнего вида символов в
	зависимости от положения в слове, если это требуется по правилам языка
	ввода (например, в арабском).
	Включение данной опции подразумевает, что при включении опции 'arabic'
	опция 'rightleft' включаться не будет, а значение опции 'arabicshape'
	не будет приниматься во внимание. Сразу после перевода данной опции во
	включённое состояние значение опции 'arabicshape' перестаёт влиять на
	работу Vim, однако значение опции 'rightleft' не изменяется
	автоматически. 
	Данная опция отключается при запуске графического интерфейса.
	Дополнительная информация приводится в разделе |arabic.txt|.
	
					             *'termencoding'* *'tenc'*
'termencoding' 'tenc'	строка (по умолчанию: "";
				в графическом интерфейсе GTK+ 2: "utf-8";
				в графическом интерфейсе Macintosh: "macroman")
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
		        с особенностью |+multi_byte|}

	Опция содержит название кодировки, которая используется на данном
	терминале: это кодировка символов, в которой происходит ввод с
	клавиатуры и которая используется при выводе символов на экран. При
	работе с графическим интерфейсом значение опции применяется только к
	кодировке символов ввода с клавиатуры (для отображения символов
	используется значение кодировки 'encoding').
	В консольной версии Win32 значением по умолчанию является кодовая
	страница консоли, если она отличается от кодовой страницы ANSI.

								        *E617*
	Замечание: При работе в графическом интерфейсе GTK+ 2 опция работает
	несколько иначе. После успешной инициализации графического интерфейса
	значение опции 'termencoding' насильно устанавливается равным "utf-8",
	а все последующие попытки изменить это значение будут отклоняться с
	выдачей сообщения об ошибке.
	В графическом интерфейсе Win32 значение опции 'termencoding' при
	наборе символов не используется, поскольку система Win32 всегда
	использует символы Unicode.
	Если значением опции является пустая строка, как это принято по
	умолчанию, то используется значение опции 'encoding'.
	Не все сочетания значений 'termencoding' и 'encoding' допустимы.
	Подробнее об этом см. раздел справочника |кодировки-таблица|.
	Значение данной опции должно поддерживаться внутренними функциями
	преобразования кодировок или функцией iconv(). Если это не так, то
	преобразование выполняться не будет и вы можете столкнуться с
	проблемами при отображении не-ASCII символов.
	Пример: если вы работаете с локалью euc-jp (японский язык) и желаете
	редактировать файл в кодировке UTF-8: >

		:let &termencoding = &encoding
		:set encoding=utf-8
<	
        Эти команды могут потребоваться в том случае, если ваша система не
	поддерживает локаль UTF-8.

						         *'terse'* *'noterse'*
'terse'			переключатель (по умолчанию: выключено)
			глобальная опция

	При включении данной опции к значению опции 'shortmess' добавляется
	флаг 's', что приводит к прекращению выдачи сообщения о достижении
	конца или начала файла при поиске соответствия заданному шаблону
	поиска. При отключении данной опции флаг 's' из значения опции
	'shortmess' убирается.
	{Vi сокращает большое количество сообщений}

				   *'textauto'* *'ta'* *'notextauto'* *'nota'*
'textauto' 'ta'		переключатель (по умолчанию в режиме Vim: включено, 
				       в режиме совместимости с Vi: выключено)
			глобальная опция
			{Vi не имеет такой возможности}

	Эта опция является устаревшей и существует для обеспечения обратной
	совместимости. Вместо неё следует использовать опцию 'fileformats'.
	
	При включении опции 'textauto' значение опции 'fileformats'
	устанавливается равным значению по умолчанию для данной операционной
	системы. При отключении опции 'textauto' значение опции 'fileformats'
	устанавливается равным пустой строке.
	ЗАМЕЧАНИЕ: значение опции устанавливается равным принятому по
	умолчанию в режиме совместимости с Vi при включении опции 'compatible'
	и равным принятому по умолчанию в режиме Vim при отключении опции
	'compatible'.

				   *'textmode'* *'tx'* *'notextmode'* *'notx'*
'textmode' 'tx'		переключатель (по умолчанию на MS-DOS, Win32 и OS/2: 
				       включено,
				       на остальных системах: выключено)
			местная по отношению к буферу опция
			{Vi не имеет такой возможности}

	Эта опция является устаревшей и существует для обеспечения обратной
	совместимости. Вместо неё следует использовать опцию 'fileformat'.
	
	При включении опции 'textmode' значение опции 'fileformat'
	устанавливается равным "dos". При отключении опции 'textmode' значение
	опции 'fileformat' устанавливается равным "unix".

						          *'textwidth'* *'tw'*
'textwidth' 'tw'	число (по умолчанию: 0)
			местная по отношению к буферу опция
			{Vi не имеет такой возможности}

	Опция указывает на максимальную длину строки текста при вставке.
	Для обеспечения заданной значением данной опции ширины текста длинные
	строки могут быть разбиты на несколько строк после пробельных
	символов. Нулевое значение данной опции отключает разбивку длинных
	строк. При включении опции 'paste' значение данной опции
	устанавливается равным 0. При нулевом значении опции 'textwidth' может
	быть использована опция 'wrapmargin'. См. также справку по опции
	'formatoptions' и раздел |вставка-textwidth|.
	ЗАМЕЧАНИЕ: Значение данной опции устанавливается равным 0 при
	включении опции 'compatible'.

						         *'thesaurus'* *'tsr'*
'thesaurus' 'tsr'	строка (по умолчанию: "")
			глобальная или местная по отношению к буферу опция 
			|глобальные-местные|
			{Vi не имеет такой возможности}

	Опция представляет собой список имён файлов словарей синонимов,
	разделённых запятыми. Словари синонимов используются при выполнении
	команды автодополнения синонимов |i_CTRL-X_CTRL-T|. Каждая строка в
	файле должна содержать слова с похожим значением, разделённые одним из
	несловарных символов (лучше всего использовать пробел). Максимальная
	длина строки в таком файле не должна превышать 510 байтов.
	Дополнительную информацию о файлах синонимов можно получить на
	странице часто задаваемых вопросов о списках слов по адресу
	http://www.hyphenologist.co.uk .
	Для включения в состав имени файла запятой её следует предварять
	символом обратной косой черты. Пробелы после запятой игнорируются, но
	в остальных случаях рассматриваются как часть имени файла. Подробнее
	об использовании символов обратной косой черты в значениях опций
	читайте в разделе |опции-обратная_косая|.
	При добавлении или исключении имён файлов лучше использовать команды
	|:set+=| и |:set-=|, что позволяет избежать проблем в том случае, если
	в новой версии будет использовано иное значение по умолчанию.
	Символы обратных кавычек не могут быть использованы в значении данной
	опции по соображениям безопасности.

			           *'tildeop'* *'top'* *'notildeop'* *'notop'*
'tildeop' 'top'		переключатель (по умолчанию: выключено)
			глобальная опция
			{Vi не имеет такой возможности}

	При включённой опции 'tildeop' команда "~" ведёт себя как оператор.
	ЗАМЕЧАНИЕ: Эта опция автоматически отключается при включении опции
	'compatible'.

				     *'timeout'* *'to'* *'notimeout'* *'noto'*
'timeout' 'to'		переключатель (по умолчанию: включено)
			глобальная опция
						   *'ttimeout'* *'nottimeout'*
'ttimeout'		переключатель (по умолчанию: выключено)
			глобальная опция
			{Vi не имеет такой возможности}

	Опции 'timeout' и 'ttimeout' совместно используются для настройки
	поведения Vim при вводе частичной последовательности символов,
	используемых в привязках, и клавиатурных кодов:

	'timeout'    'ttimeout'		действие	~
	   выкл		выкл		не использовать временную задержку
	   вкл		вкл или выкл	использовать временную задержку для
				        привязок :map и клавиатурных кодов
	   выкл		вкл		использовать временную задержку для
	                                клавиатурных кодов

	Если обе опции находятся в выключенном состоянии, то Vim будет ожидать
	завершения ввода привязки или клавиатурного кода, либо момента, к
	которому становится ясно, что введённые символы не относятся к
	клавиатурным кодам или привязкам. Например, если вы определили
	привязку для последовательности символов "vl", то при вводе символа
	'v' редактор будет ожидать ввода следующего символа, чтобы выяснить
	не является ли он символом 'l'.
	Если одна из указанных опций находится во включенном состоянии, то Vim
	будет ожидать ввода следующего символа в течение примерно 1 секунды.
	По истечении этого времени уже введённые символы воспринимаются как
	обычные одиночные символы. Период ожидания настраивается при помощи
	опции 'timeoutlen'.
	На медленных терминалах и сильно загруженных системах использование
	временной задержки может привести к нарушению работы кнопок управления
	курсором. Если обе опции находятся в выключенном состоянии, то после
	ввода <Esc> Vim будет ожидать ввода клавиатурных кодов, начинающихся с
	символа <Esc>, сколь угодно долго. В этом случае вам придётся вводить
	символ <Esc> дважды. Если у вас нет проблем с вводом клавиатурных
	кодов, но вам не хотелось бы, чтобы последовательности, используемые в
	привязках, утрачивали свою силу при частичном вводе в течение секунды,
	то необходимо включить опцию 'ttimeout' и отключить опцию 'timeout'.
	
	ЗАМЕЧАНИЕ: опция 'ttimeout' автоматически отключается при включении
	опции 'compatible'.

						         *'timeoutlen'* *'tm'*
'timeoutlen' 'tm'	число (по умолчанию: 1000)
			глобальная опция
			{доступно не во всех версиях Vi}
						       *'ttimeoutlen'* *'ttm'*
'ttimeoutlen' 'ttm'	число (по умолчанию: -1)
			глобальная опция
			{Vi не имеет такой возможности}

	Эти опции задают период времени в миллисекундах, в течение которого
	происходит ожидание продолжения ввода символьных последовательностей,
	используемых в привязках и клавиатурных кодах. Также применяется при
	выполнении команд CTRL-\ CTRL-N и CTRL-\ CTRL-G, если введена только
	часть команды.
	
	Обычно используется только значение опции 'timeoutlen', а значение
	опции 'ttimeoutlen' равно -1. Чтобы использовать значение задержки при
	вводе клавиатурных кодов, отличное от задержки, применяемой при вводе
	привязки, измените значение 'ttimeoutlen' на неотрицательное значение.

		ttimeoutlen задержка для привязок   задержка для клав. кодов	~
		
		   < 0		'timeoutlen'		'timeoutlen'
		  >= 0		'timeoutlen'		'ttimeoutlen'

	Временная задержка используется в соответствии с текущими установками
	опций 'timeout' и 'ttimeout'. Примером полезной настройки может быть:
>
		:set timeout timeoutlen=3000 ttimeoutlen=100
<		
	(ожидание ввода следующего символа при вводе привязок составляет три
	секунды, а при вводе клавиатурных кодов -- одну десятую секунды).

						         *'title'* *'notitle'*
'title'			переключатель (по умолчанию: выключено, включено, если
                        заголовок окна может быть восстановлен)
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
		        с особенностью |+title|}

	При включённой опции 'title' заголовок окна будет изменён в
	соответствии со значением опции 'titlestring' (если её значение не
	является пустой строкой), либо на значение, соответствующее формату

		имя_файла [+=-] (путь) - VIM
		
	где:
		имя_файла	имя редактируемого файла
		-		указывает, что файл не может быть изменён,
				опция 'ma' выключена
		+		указывает, что файл был изменён
		=		указывает, что файл открыт только для чтения
		=+		указывает, что файл открыт только для чтения и
		                был изменён
		(путь)		путь к редактируемому файлу
		- VIM		имя сервера |v:servername| или "VIM"
		
	Опция работает только в том случае, если терминал поддерживает
	изменение заголовка окна (на данный момент это консоль Amiga, консоль
	Win32, все версии с графическим интерфейсом и терминалы с непустой
	опцией 't_ts', к которым в том числе по умолчанию относятся Unix xterm
	и iris-ansi, где значение данной опции берётся из встроенного
	termcap).
								         *X11*
	Если Vim скомпилирован с определённой переменной HAVE_X11, то он будет
	пытаться также восстанавливать первоначальный заголовок окна. Если эта
	переменная была определена при компиляции, то в выводе команды
	":version" будет присутствовать строка "+X11", в противном случае
	будет присутствовать строка "-X11". То же самое касается и названия
	значка, см. |'icon'|. В то же время, если Vim был запущен без
	аргумента |-X|, то восстановление заголовка окна работать не будет
	(кроме графического интерфейса).
	Если заголовок окна не может быть восстановлен после завершения работы
	Vim, то он заменяется на значение опции 'titleold'. В этом случае вы
	можете попытаться восстановить заголовок при помощи внешних средств.
	При использовании xterm с удалённой машины можно использовать такую
	команду: >

	    rsh имя_машины xterm -display $DISPLAY &
<	    
	в этом случае наследуется  переменная окружения WINDOWID и заголовок
	окна будет восстанавливаться к своему первоначальному значению при
	выходе из Vim.

								  *'titlelen'*
'titlelen'		число (по умолчанию: 85)
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
		        с особенностью |+title|}

	Опция задаёт максимальную длину заголовка окна, выраженную в процентах
	от значения опции 'columns'. Если длина заголовка окна превышает
	значение данной опции, то отображается только последняя часть пути к
	редактируемому файлу, а в начале пути выводится символ '<'.
	Использование доли значения опции 'columns' позволяет адаптироваться к
	текущей ширине окна, однако следует помнить, что действительное
	количество символов, которые могут поместиться в отведённое для
	заголовка пространство, зависит также от шрифта и других параметров
	окна. При значении 'titlelen' равном 0 используется полный путь к
	файлу. Опция 'titlelen' может принимать значения от 0 до 30000.
	Опция 'titlelen' также применяется при работе с опцией 'titlestring'.
	
						                  *'titleold'*
'titleold'		строка (по умолчанию: "Спасибо за использование Vim")
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
		        с особенностью |+title|}

	Эта опция используется для заголовка окна при выходе из Vim, если
	первоначальный заголовок не может быть восстановлен. Опция работает
	только при включённой опции 'title' или если значение опции
	'titlestring' не является пустой строкой.
	
						               *'titlestring'*
'titlestring'		строка (по умолчанию: "")
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
		        с особенностью |+title|}

	Если значение этой опции не является пустой строкой, то оно будет
	использовано в качестве заголовка окна Vim при включённой опции
	'title'. Для изменения заголовка окна Vim также необходимо, чтобы
	терминал позволял изменять заголовки окон (на данный момент это
	консоль Amiga, консоль Win32, все версии с графическим интерфейсом и
	терминалы с непустой опцией 't_ts').
	Если Vim скомпилирован с определённой переменной HAVE_X11, то он будет
	пытаться также восстанавливать первоначальный заголовок окна при
	завершении работы, см. |X11|.
	В значении опции можно также использовать элементы, начинающиеся с
	символа '%' в стиле printf. Такие элементы применяются согласно
	правилам, определённым для опции 'statusline'.
	Пример: >
	
        :auto BufEnter * let &titlestring = hostname() . "/" . expand("%:p")
        :set title titlestring=%<%F%=%l/%L-%P titlelen=70
    
<	Значение опции 'titlelen' используется для выравнивания элементов
	посередине или по правому краю доступного в заголовке окна
	пространства. 
	Некоторые пользователи предпочитают, чтобы в заголовке сначала
	выводилось имя файла: >
	
        :set titlestring=%t%(\ %M%)%(\ (%{expand(\"%:~:.:h\")})%)%(\ %a%)
<	
	Обратите внимание на использование выражения внутри "%{ }" для
	получения пути к каталогу, в котором находится файл. Конструкция
	группы ("%( %)") используется для добавления разделительного пробела
	только в том случае, когда это необходимо.
	ЗАМЕЧАНИЕ: Использование специальных символов (например, <CR> или
	<NL>) в значении опции 'titlestring' может привести к появлению мусора
	на экране.
	{доступно только в том случае, если Vim скомпилирован с особенностью
	|+statusline|}

				                            *'toolbar'* *'tb'*
'toolbar' 'tb'		строка (по умолчанию: "icons,tooltips")
			глобальная опция
			{доступно только в том случае, если Vim скомпилирован
			с одной из следующих особенностей: |+GUI_GTK|,
			|+GUI_Athena|, |+GUI_Motif| или |+GUI_Photon|}

	Значение данной опции управляет различными настройками
	инструментальной панели. Возможно использование следующих ключевых
	слов: 

		icons		Инструментальная панель отображается со
				значками.
		text		На кнопках инструментальной панели
				отображается текст.
		horiz		Значки и текст на кнопках инструментальной
				панели располагаются горизонтально. 
				{доступно только в GTK+ 2 GUI}
		tooltips	Кнопки инструментальной панели используют
				всплывающие подсказки.
		
	Всплывающими подсказками называется короткий пояснительный текст,
	который появляется на некоторое время при наведении курсора мыши на
	кнопку инструментальной панели.

	Если вы хотите, чтобы на кнопках инструментальной панели отображались
	как значки, так и текст, используйте команду >

		:set tb=icons,text
		
<	Motif и Athena не могут отображать иконки и текст одновременно.
	В этих системах совместное использование ключевых слов "icons" и
	"text" равноценно использованию одного слова "icons".

	Значение данной опции игнорируется, если ни одно из ключевых слов,
	входящих в его состав, не является допустимым, либо если значением
	опции является пустая строка. Для того, чтобы полностью убрать
	инструментальную панель, следует изменить значение опции 'guioptions'.
	Например: >
	
		:set guioptions-=T
<	
	См. также |графический_интерфейс-инструментальная_панель|.

						  *'toolbariconsize'* *'tbis'*
'toolbariconsize' 'tbis'	строка (по умолчанию: "small")
				глобальная опция
				{Vi не имеет такой возможности}
			        {доступно только в GTK+ 2 GUI}

	Опция управляет размером значков на инструментальной панели. Возможны
	следующие значения:

		tiny		Использовать крошечные значки.
		small		Использовать небольшие значки (по умолчанию).
		medium		Использовать значки среднего размера.
		large		Использовать большие значки.
		
	Точные размеры значков в пикселах зависят от действующей темы
	графического интерфейса. Как правило, применяются следующие размеры:
	large=32x32, medium=24x24, small=20x20 и tiny=16x16.

	Если значением опции 'toolbariconsize' является пустая строка, то
	используется глобальное значение по умолчанию, определённое
	настройками пользователя или действующей темой графического
	интерфейса. 

			     *'ttybuiltin'* *'tbi'* *'nottybuiltin'* *'notbi'*
'ttybuiltin' 'tbi'	переключатель (по умолчанию: включено)
			глобальная опция
		      	{Vi не имеет такой возможности}
			
	При включённой опции 'ttybuiltin' поиск таблицы возможностей терминала
	происходит прежде всего во встроенном termcap. Если данная опция
	выключена, то поиск во встроенном termcap происходит после поиска во
	внешнем termcap. После изменения значения данной опции необходимо также
	изменить значение опции 'term', чтобы изменения вступили в силу.
	Например: >

		:set notbi term=$TERM
		
<	См. также |termcap|.
	
	По умолчанию данная опция находится во включенном состоянии, поскольку
	встроенные таблицы терминалов как правило лучше (на многих системах
	используются глючные таблицы для xterm).

				     *'ttyfast'* *'tf'* *'nottyfast'* *'notf'*
'ttyfast' 'tf'		переключатель (по умолчанию: выключено, 
				       включено, если значением опции 'term'
				       является xterm, hpterm, sun-cmd,
				       screen, rxvt, dtterm или iris-ansi; 
				       также включено при запуске Vim в
				       консоли DOS)
			глобальная опция
		      	{Vi не имеет такой возможности}

	Опция указывает на быстрое соединение с терминалом. При этом вместо
	использования команд для вставки/удаления строки на терминал будет
	отправляться гораздо большее количество символов при обновлении
	экрана. Это позволяет улучшить плавность обновления экрана при
	использовании нескольких окон, если терминал не поддерживает области
	прокрутки. Кроме того, опция позволяет включать запись дополнительных
	символов в конец каждой перенесённой длинной экранной строки. Это
	позволяет использовать операции копирования и вклейки при помощи мыши
	на xterm и других терминалах.

						         *'ttymouse'* *'ttym'*
'ttymouse' 'ttym'	строка (значение по умолчанию зависит от значения
                                опции 'term')
			глобальная опция
		      	{Vi не имеет такой возможности}
			{доступно только в Unix и на VMS, не работает в
			графическом интерфейсе; опция не доступна, если Vim
			скомпилирован без включённой особенности |+mouse|}

	Опция задаёт тип терминала, в соответствии с которым будут
	распознаваться коды, связанные с работой мыши. В настоящий момент
	допустимы следующие значения:

						    *xterm-mouse* *xterm-мышь*
	   xterm	Работа с мышью xterm.  Мышь генерирует коды вида
	                "<Esc>[Mscr", где "scr" это три последовательных
			байта:
			
				"s"  = состояние кнопки
				"c"  = колонка + 33
				"r"  = строка + 33
				
	   xterm2	Работает аналогично значению "xterm", но используется
			в том случае, если xterm может сообщать о положении
			мыши в момент её перемещения. Для обеспечения такое
			возможности необходимо, чтобы xterm имел как минимум
			88 уровень заплаток (XFree 3.3.3). См. ниже информацию
			о том, как Vim может автоматически определять
			необходимое значение.
			
						*netterm-mouse* *netterm-мышь*
	   netterm	Работа с мышью NetTerm.  Мышь генерирует коды вида
			"<Esc>}r,c<CR>", где "r" и "c" это два десятичных
			числа, отражающих соответственно строку и колонку в
			позиции мыши.

						        *dec-mouse* *dec-мышь*
	   dec		Работа с мышью на терминале DEC.  Мышь генерирует
	                довольно сложную последовательность кодов,
			начинающуюся с "<Esc>[".
			
					        *jsbterm-mouse* *jsbterm-мышь*
	   jsbterm	Работа с мышью на терминале JSB.
	   
						    *pterm-mouse* *pterm-мышь*
	   pterm	Работа с мышью на терминале pterm в QNX.


	Для работы с мышью необходимо включить соответствующую особенность при
	компиляции |+mouse_xterm| |+mouse_dec| |+mouse_netterm|.
	
	Vim способен автоматически распознавать терминал "xterm"(2). Коды,
	генерируемые мышью NetTerm, также всегда распознаются в том случае,
	если при компиляции Vim была включена соответствующая особенность.
	Коды мыши терминала DEC распознаются в том случае, если при компиляции
	Vim была включена соответствующая особенность и значением опции
	'ttymouse' не является "xterm" (коды мыши dec и xterm конфликтуют
	между собой).
	Значение данной опции автоматически устанавливается равным "xterm",
	если значение опции 'term' начинается со строки "xterm", а значением
	опции 'ttymouse' не является "xterm" или "xterm2". Данная опция в
	основном применяется для назначения типа мыши "xterm" в тех случаях,
	когда имя терминала не начинается с "xterm", однако он способен
	работать с кодами мыши xterm.
	Значение "xterm2" будет использоваться в xterm версии 95 и выше.
	Автоматическое распознавание работает только в том случае, если Vim
	скомпилирован со включённой особенностью |+termresponse| и значение
	опции терминала |t_RV| содержит управляющую последовательность,
	позволяющую запросить версию xterm. В противном случае значение
	"xterm2" необходимо настраивать вручную. Если вы против установки
	значения 'ttymouse' равным "xterm2" автоматически, то вы можете
	сбросить значение опции терминала t_RV: >

		:set t_RV=
<
						         *'ttyscroll'* *'tsl'*
'ttyscroll' 'tsl'	число (по умолчанию: 999)
			глобальная опция

	Опция задаёт максимальное количество строк прокрутки экрана. Если
	прокрутка потребует большее количество строк, то будет выполнено
	обновление экрана. На тех терминалах, где прокрутка выполняется очень
	медленно, а обновление экрана происходит значительно быстрее, можно
	изменить значение этой опции на совсем небольшую величину, например 3,
	для ускорения работы.

						           *'ttytype'* *'tty'*
'ttytype' 'tty'		строка (по умолчанию: $TERM)
			глобальная опция
			
	Синоним опции 'term', см. выше.

						         *'undolevels'* *'ul'*
'undolevels' 'ul'	число (по умолчанию: 100, 
			       на Unix, VMS, Win32 и OS/2: 1000)
			глобальная опция
		      	{Vi не имеет такой возможности}

	Опция задаёт максимально возможное количество изменений, которые могут
	быть отменены. Поскольку информация о внесённых изменениях хранится в
	оперативной памяти, высокие значения данной опции приводят к большему
	использованию памяти (в то же время, каждое изменение может само по
	себе использовать неограниченное количество памяти). Для обеспечения
	поведения, совместимого с Vi, значение данной опции может быть задано
	равным нулю (при этом допускается только один уровень отмены внесённых
	изменений, а команда "u" может отменять уже выполненную команду
	отмены): >

		set ul=0
		
<	Кроме того, совместимости с Vi можно также добиться путём включения
	флага 'u' в значение опции 'cpoptions', причём в этом случае можно
	будет также использовать CTRL-R для повторения операции отмены. 

	Для полного отказа от использования отмены операций необходимо
	использовать отрицательное число в качестве значения данной опции: >

		set ul=-1
		
<	Такая настройка может быть полезной, если на вашей системе
	недостаточно памяти даже для внесения единственного изменения.

	См. также раздел справочника |отмена-два_способа|.

						        *'updatecount'* *'uc'*
'updatecount' 'uc'	число (по умолчанию: 200)
			глобальная опция
		      	{Vi не имеет такой возможности}

	Vim выполняет запись своп-файла на диск после ввода указанного в
	значении данной опции количества символов. При нулевом значении опции
	'updatecount' своп-файл не создаётся (см. раздел о восстановлении
	данных, |восстановление_после_аварии|). При запуске Vim с ключом
	командной строки "-n" значение опции 'updatecount' устанавливается
	равным 0, см. раздел |инициализация|. При редактировании файла в
	режиме только для чтения, значение данной опции первоначально
	устанавливается равным 10000.
	Своп-файл может быть отключён для отдельных буферов при помощи опции
	|'swapfile'|.
	Если значение опции 'updatecount' изменяется с нулевого значения на
	ненулевое, то своп-файлы будут созданы для всех буферов со включённой
	опцией 'swapfile'. При изменении значения опции 'updatecount' на 0
	существующие своп-файлы не удаляются.
	См. также справку по опции |'swapsync'|.
	Эта опция не оказывает влияния на буферы, в которых значение опции
	|'buftype'| равно "nofile" или "nowrite".

						         *'updatetime'* *'ut'*
'updatetime' 'ut'	число (по умолчанию: 4000)
			глобальная опция
		      	{Vi не имеет такой возможности}

	Vim выполняет запись своп-файла на диск, если ввод не осуществлялся в
	течение заданного в значении данной опции количества миллисекунд 
	(см. раздел |восстановление_после_аварии|). Значение данной опции
	также используется для автокомандного события |CursorHold|.

						           *'verbose'* *'vbs'*
'verbose' 'vbs'		число (по умолчанию: 0)
			глобальная опция
		      	{Vi не имеет такой возможности, хотя в некоторых
			версиях имеется опция-переключатель}

	Если значение данной опции больше 0, то Vim будет выводить сообщения о
	своих действиях. В текущей версии выводятся следующие сообщения:

	>= 1	Сообщения о чтении или записи файла viminfo.
	>= 2	Сообщения о считывании файла сценария по команде ":source".
	>= 5	Сообщения о каждом файле меток, в котором происходит поиск.
	>= 8	Сообщения о файлах, в отношении которых выполняются группы
	        автокоманд.
	>= 9	Сообщения о каждой выполненной автокоманде.
	>= 12	Сообщения о каждой выполненной функции.
	>= 13	Сообщения о пойманных, завершённых, проигнорированных или
	        выброшенных исключительных ситуациях.
	>= 14	Сообщения о командах, которые выполняются в блоке ":finally".
	>= 15	Сообщения о каждой выполненной команде Ex (обрезаются после
	        200 символов).

	Данная опция также может быть изменена при запуске Vim с помощью
	аргумента командной строки "-V", см. |-V|.
	Значение данной опции также может быть изменено при помощи команды
	|:verbose|.

						          *'viewdir'* *'vdir'*
'viewdir' 'vdir'	строка (по умолчанию на Amiga, MS-DOS, OS/2 и Win32:
							 "$VIM/vimfiles/view",
				 в Unix: "~/.vim/view",
				 на Macintosh: "$VIM:vimfiles:view"
				 на VMS: "sys$login:vimfiles/view"
				 в RiscOS: "Choices:vimfiles/view")
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
		        с особенностью |+mksession|}

	Опция задаёт путь к каталогу, в котором сохраняются файлы, создаваемые
	по команде |:mkview|.
	Значение этой опции не может быть изменено из |режимной_строки| или в
	|песочнице| по соображениям безопасности.

						       *'viewoptions'* *'vop'*
'viewoptions' 'vop'	строка (по умолчанию: "folds,options,cursor")
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
		        с особенностью |+mksession|}

	Опция используется для управления работой команды |:mkview|. Её
	значением является список ключевых слов, разделённых запятыми. Каждое
	слово позволяет сохранять и восстанавливать определённые параметры:

	   слово	сохраняет и восстанавливает ~
	   
	   cursor	позицию курсора в файле и в окне
	   folds	складки, созданные вручную, состояние складок
			(открытые/закрытые), местные опции складок
	   options	опции и привязки, являющиеся местными по отношению к
			окну или буферу (но не глобальные значения местных
			опций)
	   slash	используется для замены символов обратной косой черты
	                в именах файлов на символы прямой косой черты
	   unix		символы конца строки в формате Unix (одиночный символ
			<NL>), даже в Windows или DOS

	Ключевые слова "slash" и "unix" полезны при редактировании файлов в
	Windows, если эти же файлы также используются и в Unix. Vim для Unix
	не может обрабатывать сценарии, записанные в формате DOS, но версии
	Vim для Windows способны обрабатывать сценарии, записанные в формате
	Unix.

				       *'viminfo'* *'vi'* *E526* *E527* *E528*
'viminfo' 'vi'		строка (по умолчанию в режиме Vim на MS-DOS, Windows 
                                и OS/2: 
				    '20,<50,s10,h,rA:,rB:				
				в режиме Vim на Amiga:
				    '20,<50,s10,h,rdf0:,rdf1:,rdf2:				
				в режиме Vim на остальных системах:
				    '20,<50,s10,h				
				в режиме совместимости с Vi: "")
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
		        с особенностью |+viminfo|}

	Если значение данной опции не является пустой строкой, то Vim будет
	читать файл viminfo при запуске и сохранять его при завершении работы
	(см. |файл_viminfo|). Значением опции является список параметров,
	разделённых запятой, каждый из которых состоит из символа,
	определяющего смысл параметра, за которым следует число или строка,
	определяющие значение данного параметра. Если какой-либо параметр в
	значении опции не указан явно, то используется значение этого
	параметра по умолчанию. Ниже приводится список допустимых параметров и
	их значения.
	
	СИМВОЛ	ЗНАЧЕНИЕ	~

	!	Если этот параметр включён в список, то в файле viminfo будут
		сохраняться для последующего восстановления значения
		глобальных переменных, которые начинаются с прописной буквы и
		не содержат строчных букв. Например, будут сохранены значения
		переменных "KEEPTHIS" и "K_L_M", но не значения переменных
		"KeepThis" и "_K_L_M".
	"	Параметр задаёт максимальное число строк, которые сохраняются
		в каждом регистре. Это устаревший параметр, вместо которого
		теперь можно использовать '<'; он обладает следующим
		недостатком: вы должны предварять символ " обратной косой
		чертой, иначе тот будет распознаваться как начало комментария!
	%	Если этот параметр включён в список, то в файле viminfo будет
		сохраняться список буферов. Если Vim был запущен с
		определённым именем файла в качестве аргумента командной
		строки, то список буферов восстанавливаться не будет. Если Vim
		был запущен без указания имени файла в командной строке, то
		список буферов будет восстановлен из файла viminfo.
		Безымянные буферы и буферы файлов справки в файле viminfo не
		сохраняются.
	'	Максимальное количество файлов, для которых запоминаются
		отметки. Этот параметр всегда должен быть задан, если значение
		опции 'viminfo' не является пустой строкой.
		Включение данного параметра также означает, что в файле
		viminfo будет сохраняться |список_прыжков| 
		и |список_изменений|.
	/	Максимальное количество сохраняемых записей в истории поиска
		по шаблону. Если значение параметра не равно 0, то сохраняются
		также шаблоны поиска в предыдущем тексте и шаблоны замены
		текста. Если параметр не включён в значение опции 'viminfo'
		явно, то используется значение опции 'history'.
	:	Максимальное количество сохраняемых записей в истории
		командной строки. Если параметр не включён в значение опции
		'viminfo' явно, то используется значение опции 'history'.
	<	Максимальное количество строк, которые сохраняются для каждого
	        регистра. Если значение равно нулю, то содержимое регистров не
		сохраняется. Если этот параметр не включён в значение опции, то
		сохраняются все строки содержимого регистров. Раннее с той же
		самой целью применялся параметр '"'.
		См. также символ 's' ниже: ограничение задаётся в килобайтах.
	@	Максимальное количество сохраняемых записей в истории
		строки ввода. Если параметр не включён в значение опции
		'viminfo' явно, то используется значение опции 'history'.
	c	Если данный параметр включён в значение опции 'viminfo', то
		текст файла viminfo преобразуется из кодировки,
		соответствующей значению опции 'encoding' в момент записи
		файла viminfo, в кодировку, соответствующую текущему значению
		опции 'encoding'. См. также |viminfo-кодировка|.
	f	Параметр указывает на необходимость сохранения файловых
		отметок. При значении параметра, равном 0, файловые отметки
		(от '0 до '9 и от 'A до 'Z) не сохраняются. Если параметр не
		указан явно или его значение не равно 0, то все файловые
		отметки сохраняются в файле viminfo. Отметка '0 используется
		для сохранения текущего положения курсора в момент завершения
		работы Vim или выполнения команды ":wviminfo".
	h	Параметр отменяет действие опции 'hlsearch' при загрузке файла
		viminfo. Если параметр не включён в значение опции 'viminfo'
		явным образом, то поведение редактора зависит от того,
		применялась ли команда ":nohlsearch" после выполнения
		последней команды поиска.
        n       Параметр задаёт имя файла viminfo. Имя файла должно быть
		указано сразу же после 'n'. Данный параметр должен быть указан
		последним в списке параметров! Если при запуске Vim был
		использован аргумент командной строки "-i", то указанное имя
		файла будет использовано вместо заданного в значении опции
		'viminfo'. Подстановка переменных окружения выполняется в
		момент открытия файла, а не при изменении значения опции
		'viminfo'.
	r	Параметр указывает на съёмное устройство хранения данных. Его
		аргументом является строка (вплоть до следующего символа ',').
		Данный параметр может быть задан неоднократно. Каждое
		вхождение этого параметра указывает на путь к устройству, для
		которого отметки не должны сохраняться. Параметр применяется
		для того, чтобы избежать сохранения отметок для файлов,
		находящихся на съёмных устройствах хранения данных. На MS-DOS
		можно использовать значение "ra:,rb:", на Amiga
		"rdf0:,rdf1:,rdf2:". Вы также можете использовать его для
		временных файлов, например в Unix: "r/tmp". Регистр символов в
		значении параметра не играет роли. Максимальная длина каждого
		параметра 'r' составляет 50 символов. 
	s	Максимальный размер элемента в килобайтах. При нулевом
		значении параметра состояние регистров не сохраняется. В
		данный момент применяется только к содержимому регистров. По
		умолчанию используется значение "s10", исключающее регистры,
		содержащие более 10 КБ текста.
		См. также параметр '<' выше: ограничение по количеству строк.

	Пример: >
	
	    :set viminfo='50,<1000,s100,:0,n~/vim/viminfo
<
	'50		Отметки будут сохраняться для 50 файлов, которые
			редактировались в последнее время.
	<1000		В файле viminfo будет сохраняться до 1000 строк в
			каждом регистре.
	s100		Регистры, в которых хранится более 100 КБ текста,
			пропускаются.
	:0		История командной строки сохраняться не будет.
	n~/vim/viminfo	В качестве файла viminfo будет использоваться
			"~/vim/viminfo".
	нет /		Поскольку параметр '/' не задан, будет использоваться
			значение по умолчанию, а именно: сохранение всех
			записей в истории поиска, истории поиска в предыдущем
			тексте и истории замены текста.
	нет %		Список буферов не сохраняется и не восстанавливается.
	нет h		Подсветка 'hlsearch' будет восстановлена.

	При изменении значения опции 'viminfo' с пустого значения можно
	воспользоваться командой |:rviminfo| для загрузки соответствующего
	файла, поскольку это не происходит автоматически.

	Значение этой опции не может быть изменено из |режимной_строки| или в
	|песочнице| по соображениям безопасности.

					                *'virtualedit'* *'ve'*
'virtualedit' 've'	строка (по умолчанию: "")
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
		        с особенностью |+virtualedit|}

	Значением опции является список ключевых слов, разделённых запятыми:

	    block	Позволяет выполнять виртуальное редактирование в
			режиме Визуального блока.
	    insert	Позволяет выполнять виртуальное редактирование в
			режиме Вставки.
	    all		Позволяет выполнять виртуальное редактирование во всех
			режимах.

	Виртуальное редактирование позволяет перемещать курсор в позицию
	экрана, в которой на самом деле отсутствует реальный символ. Это может
	быть середина пространства, которое занимает символ табуляции, или
	конец строки. Данная опция может быть полезна при выделении
	прямоугольного блока в Визуальном режиме или для редактирования
	таблиц.

	                       *'visualbell'* *'vb'* *'novisualbell'* *'novb'*
	                                                       *beep* *звонок*
'visualbell' 'vb'	переключатель (по умолчанию: выключено)
			глобальная опция
			{Vi не имеет такой возможности}

	Опция позволяет использовать "визуальный звонок" вместо звукового
	сигнала. Код терминала, который используется для визуального звонка,
	задаётся с помощью опции 't_vb'. Чтобы отключить как звуковой сигнал,
	так и моргание экрана, необходимо сбросить значение этой терминальной
	опции: ":set vb t_vb=".
	Замечание: при запуске графического интерфейса, опция 't_vb'
	восстанавливает значение по умолчанию. Вам может потребоваться
	изменить это значение в файле сценария запуска |gvimrc|.
	В режиме графического интерфейса значением опции 't_vb' по умолчанию
	является "<Esc>|f", что приводит к кратковременному (20 миллисекунд)
	инвертированию экрана. Если вы хотите использовать другой временной
	интервал, то можно изменить значение опции 't_vb' соответствующим
	образом, например: "<Esc>|40f" для интервала 40 мсек.
	Эта опция не работает на Amiga, где моргание экрана происходит во всех
	случаях.
	См. также справку по опции 'errorbells'.

						           *'warn'* *'nowarn'*
'warn'			переключатель (по умолчанию: включено)
			глобальная опция

	Опция управляет выдачей предупреждения при выполнении команды оболочки
	в другом буфере.

		           *'weirdinvert'* *'wiv'* *'noweirdinvert'* *'nowiv'*
'weirdinvert' 'wiv'	переключатель (по умолчанию: выключено)
			глобальная опция
			{Vi не имеет такой возможности}

	Опция дублирует действие терминальной опции 't_xs'. Эта опция
	присутствует для обеспечения совместимости с версией Vim 4.x.
	Включение опции 'weirdinvert' имеет тот же эффект, что и изменение
	значения опции 't_xs' на непустое, и наоборот. Опция не оказывает
	никакого влияния в режиме графического интерфейса.

						          *'whichwrap'* *'ww'*
'whichwrap' 'ww'	строка (по умолчанию в режиме Vim: "b,s", 
				в режиме совместимости с Vi: "")
			глобальная опция
			{Vi не имеет такой возможности}

	Опция позволяет перемещать курсор на предыдущую/следующую строку, если
	курсор находится на первом/последнем символе в строке, при вводе
	перечисленных в её значении через запятую команд перемещения курсора.
	В значении опции могут быть использованы следующие команды:

	      символ  кнопка	 режим	~
	      
		 b    <BS>	 Обычный и Визуальный
		 s    <Space>	 Обычный и Визуальный
		 h    "h"	 Обычный и Визуальный
		 l    "l"	 Обычный и Визуальный
		 <    <Left>	 Обычный и Визуальный
		 >    <Right>	 Обычный и Визуальный
		 ~    "~"	 Обычный
		 [    <Left>	 режим Вставки и Замены
		 ]    <Right>	 режим Вставки и Замены
		 
	Например: >
	
		:set ww=<,>,[,]
<	
	позволяет перемещать курсор на предыдущую/следующую строку только при
	использовании кнопок перемещения курсора.
	Если команды перемещения курсора используются в сочетании с
	операторами удаления или изменения, то символ <EOL> также считается
	символом. В этом случае команда "3h" будет отличаться от "3dh", если
	при перемещении курсор пересекает конец строки. То же самое
	относится и к командам "x" и "X", поскольку они работают так же, как и
	"dl" и "dh". Если вы пользуетесь такой возможностью, то можно также
	назначить специальную привязку ":map <BS> X" для удаления символа
	перед курсором при нажатии кнопки <BS>.
	При включении 'l' имеется также побочный эффект: "yl" на пустой строке
	будет включать символ <EOL>, поэтому последующая команда "p" будет
	приводить к вставке новой строки.
	ЗАМЕЧАНИЕ: значение опции устанавливается равным принятому по
	умолчанию в режиме совместимости с Vi при включении опции 'compatible'
	и равным принятому по умолчанию в режиме Vim при отключении опции
	'compatible'.

						           *'wildchar'* *'wc'*
'wildchar' 'wc'		число (по умолчанию в режиме Vim: <Tab>, 
			       в режиме совместимости с Vi: CTRL-E)
			глобальная опция
			{Vi не имеет такой возможности}

	Опция используется для назначения символа, при вводе которого в
	командной строке происходит подстановка значений по маске в
	соответствии со значением опции 'wildmode'.
	Этот символ не распознаётся при использовании в составе макроса -- для
	этих целей существует опция 'wildcharm'.
	Несмотря на то, что значением опции 'wc' является число, вы можете
	использовать спецкнопку в качестве её значения: >
	
		:set wc=<Esc>
<
	ЗАМЕЧАНИЕ: значение опции устанавливается равным принятому по
	умолчанию в режиме совместимости с Vi при включении опции 'compatible'
	и равным принятому по умолчанию в режиме Vim при отключении опции
	'compatible'.

						         *'wildcharm'* *'wcm'*
'wildcharm' 'wcm'	число (по умолчанию: значение не задано (0))
			глобальная опция
			{Vi не имеет такой возможности}
			
	Опция 'wildcharm' работает так же, как и 'wildchar', но, в отличие от
	последней, распознаётся также в составе макросов. Список "свободных"
	кнопок, которые можно использовать в качестве значения данной опции,
	можно посмотреть в разделе |ex-редактирование-указатель|. Как правило
	значение этой опции используется только в привязках, которые вызывают
	режим автодополнения, например: >

		:set wcm=<C-Z>
		:cmap ss so $vim/sessions/*.vim<C-Z>
		
<	После выполнения указанных команд можно будет применять CTRL-P и
	CTRL-N при вводе команды :ss.

						        *'wildignore'* *'wig'*
'wildignore' 'wig'	строка (по умолчанию: "")
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
		        с особенностью |+wildignore|}

	Значением опции является список масок для имён файлов. Файлы, с
	именами, соответствующими одной из перечисленных масок, будут
	игнорироваться при выполнении автодополнения имён файлов и каталогов.
	Шаблоны масок, используемые в значении данной опции, точно такие же,
	как и применяемые в команде |:autocmd|, см. |автокоманды-шаблоны|.
	См. также справку по опции 'suffixes'.
	
	Пример: >
	
		:set wildignore=*.o,*.obj
<	
	При добавлении или исключении шаблонов лучше использовать команды
	|:set+=| и |:set-=|, что позволяет избежать проблем в том случае, если
	в новой версии будет использовано иное значение по умолчанию.

			       *'wildmenu'* *'wmnu'* *'nowildmenu'* *'nowmnu'*
'wildmenu' 'wmnu'	переключатель (по умолчанию: выключено)
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
		        с особенностью |+wildmenu|}

	Опция 'wildmenu' позволяет включать улучшенный режим автодополнения
	командной строки. При вводе символа, определённого значением опции
	'wildchar' (обычно <Tab>), для выполнения операции автодополнения,
	возможные варианты дополнения будут показаны непосредственно над
	командной строкой, причём первое соответствие будет выделяться при
	помощи подсветки. Если в окне имеется строка состояния, то меню
	автодополнения временно перекрывает строку состояния. Кнопки
	перемещения по списку совпадений (<Tab>, CTRL-P/CTRL-N) перемещают
	выделение к следующему совпадению. При использовании опции 'wildmode'
	режим "wildmenu" применяется в тех случаях, когда указан режим "full".
	Режимы "longest" и "list" не используют режим "wildmenu". Если список
	соответствий не помещается на одной строке, то в левой колонке
	отображается символ "<", а в правой колонке отображается символ ">",
	отражая наличие дополнительных соответствий. Список соответствий в
	строке меню автодополнения при необходимости прокручивается
	автоматически. 
	Режим "wildmenu" завершается по нажатию кнопки, которая не приводит к
	выбору соответствия для автодополнения.
	При активном режиме "wildmenu" следующие кнопки имеют особое значение:

	<Left> <Right>	- выбор предыдущего/следующего соответствия (как
	                  CTRL-P/CTRL-N)
	<Down>		- при выполнении автодополнения имени файла или меню:
			  перемещение на один уровень файловой системы или
			  меню вниз
	<CR>		- при выполнении автодополнения меню, если курсор
			  находится непосредственно после точки: перемещение
			  на один уровень меню вниз
	<Up>		- при выполнении автодополнения имени файла или меню:
			  перемещение на один уровень файловой системы или
			  меню вверх

	Эта опция позволяет сделать меню доступным из консоли. См. раздел
	справочника |меню_в_консоли|.

	Если вы предпочитаете использовать кнопки <Left> и <Right> для
	перемещения курсора вместо выбора варианта автодополнения, то
	используйте следующие привязки: >

		:cnoremap <Left> <Space><BS><Left>
		:cnoremap <Right> <Space><BS><Right>
<
	Для подсветки текущего варианта автодополнения используется группа
	подсветки "WildMenu", см. |подсветка-WildMenu|.

						          *'wildmode'* *'wim'*
'wildmode' 'wim'	строка (по умолчанию в режиме Vim: "full")
			глобальная опция
			{Vi не имеет такой возможности}

	Опция задаёт режим автодополнения, которое включается при вводе
	символа, указанного в значении опции 'wildchar'. Значением этой опции
	является список ключевых слов, разделённых запятыми. Допускается
	использовать до четырёх ключевых слов включительно. Каждое ключевое
	слово указывает на необходимый режим работы при следующем нажатии
	кнопки 'wildchar'. Таким образом, первое слово определяет режим
	автодополнения, который используется при первом нажатии 'wildchar',
	второе слово определяет режим для второго нажатия, и т.д.

	В каждом случае возможно использование следующих ключевых слов:

	""		Автодополнение при помощи первого соответствия.
	"full"		Автодополнение при помощи следующего полного
			соответствия. После применения последнего соответствия
			используется первоначальная строка, а затем снова
			первое соответствие.
	"longest"	Автодополнение до самой длинной общей с другими
			соответствиями строки. Если это не приводит к более
			длинной строке, то используется следующее ключевое
			слово из значения данной опции.
	"longest:full"	То же, что и "longest", но приводит к включению
			'wildmenu' в том случае, если соответствующая опция
			включена.
	"list"		При наличии нескольких соответствий выводится список
			всех соответствий.
	"list:full"	При наличии нескольких соответствий выводится список
			всех соответствий и подставляется первое соответствие
			из списка.
	"list:longest"	При наличии нескольких соответствий выводится список
			всех соответствий и выполняется дополнение до самой
			длинной из возможных строки.
			
	При наличии единственного соответствия оно автоматически подставляется
	в строку во всех случаях.

	Примеры: >
	
		:set wildmode=full
<	Выполняется дополнение при помощи первого полного совпадения, затем
	второго полного совпадения и т.д. (по умолчанию)
>
		:set wildmode=longest,full
<	Выполняется дополнение при помощи самой длинной из возможных строки,
	затем используется дополнение при помощи каждого последующего полного
	совпадения.
>
		:set wildmode=list:full
<	Выводится список всех соответствий и выполняется дополнение при помощи
	каждого последующего полного совпадения.
>
		:set wildmode=list,full
<	Выводится список всех соответствий без выполнения автодополнения,
        затем используется дополнение при помощи каждого последующего полного
	совпадения.
>
		:set wildmode=longest,list
<	Выполняется дополнение при помощи самой длинной общей строки, затем
	выводится список альтернативных вариантов.

						        *'winaltkeys'* *'wak'*
'winaltkeys' 'wak'	строка (по умолчанию: "menu")
			глобальная опция
			{Vi не имеет такой возможности}
			{используется только в Win32, Motif, GTK и графическом
			интерфейсе Photon}

	Некоторые версии графического интерфейса позволяют использовать меню
	при помощи комбинации кнопки ALT и символа, который отображается в
	названии меню подчёркнутым. Такое поведение может входить в
	противоречие с использованием кнопки ALT в привязках и для ввода
	специальных символов. Данная опция определяет способ использования
	кнопки ALT:

	  no	Не использовать кнопку ALT для доступа к меню. Необходимые
		комбинации ALT и соответствующих символов могут быть заданы
		при помощи привязок, однако автоматической обработки таких
		комбинаций производиться не будет. В этом случае можно
		использовать команду |:simalt|.
	  yes	Обработка кнопки ALT выполняется системой оконного интерфейса.
		Комбинации символов с нажатием кнопки ALT не могут быть
		использованы в привязках.
	  menu	Комбинации ALT с символами, задействованными для организации
		доступа к меню, обрабатываются системой оконного интерфейса.
		Остальные комбинации могут быть использованы в привязках.

	Если меню отключены при помощи удаления флага 'm' из значения опции
	'guioptions', то кнопка ALT не будет применяться для доступа к меню.
	В версии Vim для Win32 нажатие кнопки <F10> обрабатывается аналогичным
	образом, поскольку Windows также использует её для выбора меню.

						   *'winheight'* *'wh'* *E591*
'winheight' 'wh'	число (по умолчанию: 1)
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
		        с особенностью |+windows|}

	Опция задаёт минимальное количество строк для текущего окна. Это
	значение не является жёстко заданным и Vim будет использовать меньшее
	количество строк, если возникает такая необходимость. Если текущее
	окно имеет размеры меньше значения данной опции, то его размер
	увеличивается за счёт остальных окон. Если значение этой опции
	равняется 999, то текущее окно всегда будет занимать весь экран 
	(в этом случае по команде ":all" будут создаваться только два окна). 
	Как правило при работе используются меньшие значения.  Минимальное
	значение данной опции равно 1.
	Высота окна не изменяется после выполнения одной из команд изменения
	высоты текущего окна.
	Значение опции 'winheight' применяется к текущему окну. Для настройки
	минимальной высоты остальных окон используйте опцию 'winminheight'.

			 *'winfixheight'* *'wfh'* *'nowinfixheight'* *'nowfh'*
'winfixheight' 'wfh'	переключатель (по умолчанию: выключено)
			местная по отношению к окну опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
		        с особенностью |+windows|}

	Опция позволяет сохранять высоту окна без изменений при открытии и
	закрытии других окон или при включении опции 'equalalways'. Данная
	опция включается по умолчанию для |окна_предварительного_просмотра| и
	|окна_быстрых_исправлений|.
	Высота окна, тем не менее, может быть изменена, если на экране не
	хватает места для отображения всех окон.

						      *'winminheight'* *'wmh'*
'winminheight' 'wmh'	число (по умолчанию: 1)
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
		        с особенностью |+windows|}

	Опция задаёт минимальную высоту окна, когда оно не является текущим
	окном. Данное значение является жёстко установленным: неактивное окно
	не может иметь высоту меньшую, чем значение данной опции. При нулевом
	значении данной опции окна могут быть "сплющены" до нулевой высоты
	(т.е. от окна остаётся только строка состояния), если это необходимо.
	При выделении такого окна его высота возвращается как минимум к одной
	строке (поскольку на экране должна присутствовать хотя бы одна строка,
	куда можно поместить курсор). Для указания минимальной высоты текущего
	окна используйте опцию 'winheight'. Значение данной опции используется
	только при уменьшении высоты окна. Не следует использовать большие
	значения данной опции, поскольку это будет приводить к выдаче
	сообщений об ошибке при открытии нескольких окон. Приемлемым является
	значение от 0 до 3.

						       *'winminwidth'* *'wmw'*
'winminwidth' 'wmw'	число (по умолчанию: 1)
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
		        с особенностью |+vertsplit|}

	Опция задаёт минимальную ширину окна, когда оно не является текущим
	окном. Данное значение является жёстко установленным: неактивное окно
	не может иметь ширину меньшую, чем значение данной опции. При нулевом
	значении данной опции окна могут быть "сплющены" до нулевой ширины
	(т.е. от окна остаётся только колонка вертикального разделения), если
	это необходимо. При выделении такого окна его ширина возвращается как
	минимум к одной	колонке (поскольку на экране должна присутствовать
	хотя бы одна колонка, куда можно поместить курсор). Для указания
	минимальной ширины текущего окна используйте опцию 'winwidth'.
	Значение данной опции используется только при уменьшении ширины окна.
	Не следует использовать большие значения данной опции, поскольку это
	будет приводить к выдаче сообщений об ошибке при открытии нескольких
	окон. Приемлемым является значение от 0 до 12.

						   *'winwidth'* *'wiw'* *E592*
'winwidth' 'wiw'	число (по умолчанию: 20)
			глобальная опция
			{Vi не имеет такой возможности}
			{доступно только в том случае, если Vim скомпилирован
		        с особенностью |+vertsplit|}

	Опция задаёт минимальное количество колонок для текущего окна. Это
	значение не является жёстко заданным и Vim будет использовать меньшее
	количество колонок, если возникает такая необходимость. Если текущее
	окно имеет размеры меньше значения данной опции, то его размер
	увеличивается за счёт остальных окон. Если значение этой опции
	равняется 999, то текущее окно всегда будет занимать весь экран. Как
	правило при работе используются меньшие значения. Ширина окна не
	изменяется после выполнения одной из команд изменения ширины текущего
	окна.
	Значение опции 'winwidth' применяется к текущему окну. Для настройки
	минимальной ширины остальных окон используйте опцию 'winminwidth'.

						           *'wrap'* *'nowrap'*
'wrap'			переключатель (по умолчанию: включено)
			местная по отношению к окну опция
			{Vi не имеет такой возможности}

	Данная опция влияет только на отображение текста на экране. В отличие
	от опции 'textwidth', она не изменяет текст, содержащийся в буфере.
	При включённой опции 'wrap' строки, длина которых превышает ширину
	окна, будут отображаться разбитыми на несколько строк. При выключенной
	опции 'wrap' длинные строки отображаются на экране частично. При
	перемещении курсора за пределы видимой части строки, происходит
	прокрутка окна по горизонтали.
	При необходимости строка может быть перенесена прямо в середине слова.
	Чтобы настроить перенос строк по словарным границам, используйте опцию
	'linebreak'.
	Для более удобной горизонтальной прокрутки можно использовать
	следующие команды: >
	
		:set sidescroll=5
		:set listchars+=precedes:<,extends:>
<	
	См. 'sidescroll', 'listchars' и |отключение_переноса|.

						         *'wrapmargin'* *'wm'*
'wrapmargin' 'wm'	число (по умолчанию: 0)
			местная по отношению к буферу опция

	Опция задаёт количество символов от правого края окна, которые
	отводятся под поле, в котором может происходить перенос длинных строк.
	При вводе текста, выходящего за пределы заданного поля, происходит
	вставка символа <EOL>, а ввод текста продолжается на новой строке.
	Кроме того, ширина отображаемого текста также дополнительно
	уменьшается при использовании некоторых опций, таких как 'number' и
	'foldcolumn', которые "отъедают" под свои цели определённое
	пространство экрана. Такое поведение является Vi-совместимым.
	Если значение опции 'textwidth' не равно 0, то данная опция не
	используется. См. также справку по опции 'formatoptions' и раздел
	справочника |вставка-textwidth|.
	{Vi реализует аналогичную возможность при помощи иных, менее удобных,
	средств}

				   *'wrapscan'* *'ws'* *'nowrapscan'* *'nows'*
'wrapscan' 'ws'		переключатель (по умолчанию: включено) 	 *E384* *E385*
			глобальная опция
			
	Опция позволяет продолжать выполнение поиска с другого конца файла.

						         *'write'* *'nowrite'*
'write'			переключатель (по умолчанию: включено)
			глобальная опция
			{Vi не имеет такой возможности}

	Опция позволяет выполнять запись файлов. При выключенной опции 'write'
	запись файла не разрешается. Эта опция может быть использована для
	включения режима "только для просмотра", при котором внесение
	изменений в текст всё же возможно. Опция может быть выключена при
	помощи аргументов командной строки |-m| или |-M| при запуске Vim. При
	выключенной опции 'write' возможно использование команд-фильтров,
	несмотря на то, что это требует записи временного файла.

				   *'writeany'* *'wa'* *'nowriteany'* *'nowa'*
'writeany' 'wa'		переключатель (по умолчанию: выключено)
			глобальная опция
			
	Опция позволяет выполнять запись любого файла без необходимости
	применения модификатора команды "!".

			     *'writebackup'* *'wb'* *'nowritebackup'* *'nowb'*
'writebackup' 'wb'	переключатель (по умолчанию: включено, если Vim
				       скомпилирован со включённой
				       особенностью |+writebackup|,
				       выключено в противном случае)
			глобальная опция
			{Vi не имеет такой возможности}

	При включенной опции 'writebackup' Vim выполняет резервное копирование
	файла перед записью внесённых изменений. После успешного выполнения
	записи резервная копия удаляется, если опция 'backup' выключена.
	Данную опцию можно отключить, если вы испытываете нехватку дискового
	пространства. Более подробное объяснение содержится в разделе
	справочника |резервное_копирование-таблица|.
	Если имя файла соответствует шаблону, заданному в значении опции
	'backupskip', то резервное копирование не выполняется.
	ЗАМЕЧАНИЕ: при включении опции 'compatible' значение данной опции
	устанавливается равным принятому по умолчанию.

						         *'writedelay'* *'wd'*
'writedelay' 'wd'	число (по умолчанию: 0)
			глобальная опция
			{Vi не имеет такой возможности}

	Опция задаёт количество микросекунд, в течение которых ожидается
	отправку каждого символа на экран. При ненулевом значении данной опции
	символы отправляются на экран поодиночке. Эта опция не работает на
	MS-DOS pcterm. Опция применяется для отладочных целей.


Примечание к русскому переводу:                                        *greek*

Пример языковой раскладки 'langmap' для греческого языка в русском справочнике
заменён на аналогичный пример для русского языка. 
См. |русская_раскладка_langmap|.

==============================================================================
 vim:tw=78:ts=8:ft=help:norl:
